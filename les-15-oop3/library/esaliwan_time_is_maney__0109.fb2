<?xml version="1.0" encoding="windows-1251"?>
<FictionBook xmlns:l="http://www.w3.org/1999/xlink" xmlns="http://www.gribuser.ru/xml/fictionbook/2.0"><description><title-info><genre>comp_programming</genre><genre>sci_business</genre><author><first-name>Эд</first-name><last-name>Салливан</last-name></author><book-title>Время — деньги. Создание команды разработчиков программного обеспечения</book-title><annotation><p>В этой книге ветеран индустрии программных средств Эд Салливан делится найденными в результате нелёгкого труда принципами, приёмами и методиками разработки коммерческого ПО. В книге раскрыты фундаментальные принципы, позволяющие выпускать качественные программы в срок в любых обстоятельствах. Вы узнаете о реальном опыте успешной разработки коммерческого ПО в начинающей компании, о том, как выбрать нужных специалистов, инструментальные средства разработки, настроить технологию, планировать и выполнять проект, своевременно обнаруживая и решая возникающие проблемы.</p><p>Книга состоит из 15 глав и предметного указателя. </p></annotation><date>2001</date><coverpage><image l:href="#cover.jpg"/></coverpage><lang>ru</lang><src-lang>en</src-lang><translator><first-name>В.</first-name><last-name>Вшивцев</last-name></translator></title-info><document-info><author><first-name>NickNem</first-name><last-name/></author><author><first-name>Faiber</first-name><last-name/><email>faiber@yandex.ru</email></author><program-used>FBD, FB Writer v1.0</program-used><date value="2007-04-20">2007-04-20</date><id>BEC45A5A-9A04-4361-BDC3-7E5584EDB1E4</id><version>1.2</version><history><p>v 1.1 — дополнительное форматирование — (Faiber)</p></history></document-info><publish-info><book-name>Салливан Э. Время — деньги. Создание команды разработчиков программного обеспечения</book-name><publisher>Русская Редакция</publisher><city>М.</city><year>2002</year><isbn>5-7502-0189-9, 0-7356-1184-X</isbn></publish-info><custom-info info-type="src-author-first-name">Ed</custom-info><custom-info info-type="src-author-last-name">Sullivan</custom-info><custom-info info-type="src-book-title">Under Pressure and on Time</custom-info></description><body><myheader><p>Спасибо, что скачали книгу в <a l:href="http://royallib.ru">бесплатной электронной библиотеке Royallib.ru</a></p><p><a l:href="http://royallib.ru/author/sallivan_ed.html">Все книги автора</a></p><p><a l:href="http://royallib.ru/book/sallivan_ed/vremya__dengi_sozdanie_komandi_razrabotchikov_programmnogo_obespecheniya.html">Эта же книга в других форматах</a></p><empty-line/><p>Приятного чтения!</p><empty-line/><empty-line/><empty-line/></myheader><title><p>Эд САЛЛИВАН</p><p>ВРЕМЯ — ДЕНЬГИ</p><p>Создание команды разработчиков, программного обеспечения</p></title><epigraph><p>Посвящается Джейн, Мэту и Ханне — тем, кого я люблю и буду любить всегда;</p><p>и всем сотрудникам, работавшим и работающим в NuMega: без вас эта книга никогда не появилась бы на свет.</p></epigraph><section><title><p>Предисловие</p></title><p>Предупреждаю: эта книга особенная. Управлению проектами посвящено множество книг. Здесь же речь пойдёт о реальных приёмах создания и выпуска программ, причём особое внимание уделяется ситуации начинающей организации. Своевременный выпуск продукта — единственное, что имеет значение в этом бизнесе, поэтому книга сосредоточена на решении этой задачи. Её автор — не просто счастливчик, которому повезло выпустить удачную программу. Под его руководством был выпущен целый ряд замечательных программ, но важнее всего, что он воспитал плеяду менеджеров, повторивших его успех. Ими создано столько программ, сколько большинству организаций даже не снилось. В этой отрасли практически невозможно воспитать менеджера проекта, умеющего успешно работать. Однако Эд многократно справлялся с этой трудной задачей, и в этой книге вы найдёте те методики, которые он передавал своим ученикам.</p><p>В разработке ПО управление проектами значит больше, чем в какой-либо другой отрасли, поскольку в наше «время Интернета» всем приходится работать в очень напряжённом темпе. С другой стороны, группы стремятся сэкономить время за счёт управления проектом. В итоге — постоянные срывы графика и куча ошибок в выпускаемых программах. Эта проблема особенно характерна для небольших фирм, спешащих поскорее использовать даже минимальную возможность, чтобы протиснуться на рынок. Такая ситуация не редкость и в компаниях-«мастодонтах», которые в погоне за постоянно ускользающими сроками разработки продукта ведут проекты без нормального управления.</p><p>Можно думать, что руководители проекта просто не выдержали сроки выпуска, однако корни проблемы намного глубже. Во всех образовательных учреждениях мира курс информатики даёт очень мало или вовсе не даёт навыков управления проектами. Поэтому большинству разработчиков приходится заниматься самообразованием или перенимать опыт менеджеров, которые сами с трудом представляют себе этот предмет. Написать код программы — это лишь малая часть любого проекта, но в большинстве компаний этого до сих пор не поймут. К счастью, книга, которую вы держите в руках, даёт представление об остальной, большей части работы; такого материала вы больше нигде не найдёте. Здесь нет теории управления проектами — лишь описание приёмов, сработавших или не сработавших в весьма успешной молодой компании.</p><p>Нетрудно заметить, что по ходу изложения многократно подчёркивается важность командной работы. Структура большинства компаний представляет собой отдел программирования, отдел тестирования и, возможно, отдел разработки документации, которые со временем превращаются в удельные княжества. Формируется совокупность индивидуумов, собранных для работы над продуктом (я даже не могу назвать её командой в строгом смысле этого слова), подотчётных разным группам с разной структурой и уровнем полномочий. В силу этого большинство компаний с самого начала обречены на неудачу из-за врождённых недостатков организации. Эд создал в NuMega команду в истинном смысле этого слова, где программисты, тестировщики, инженерные психологи и разработчики пользовательской документации были собраны под началом единственного менеджера проекта. Даже когда NuMega разрослась настолько, что пришлось менять организацию в соответствии с традиционной структурой, Эд не отступал от концепции единой команды и отстаивал её в боях с оппонентами. В рамках принятой в NuMega структуры организации, все специалисты, необходимые для создания продукта, приписаны только к этому продукту. Такая структура позволила NuMega справиться с массой искусственных проблем, обычно встающих на пути у других компаний. Её дополнительное преимущество в том, что она позволяет каждому своими глазами видеть, насколько работа других участников проекта важна для выпуска успешного продукта. Это разительно отличалось от стиля отношений, принятого в большинстве компаний, который можно назвать скорее конфронтацией (что особенно характерно для отношений между разработчиками и тестировщиками).</p><p>Конечно, собрать команду и не допустить её раскола — задача не из лёгких. Практически ни один отчёт о состоянии дел в программной индустрии не обходится без упоминаний о постоянной нехватке кадров. Одним желанием, как бы велико оно ни было, хорошую команду не создать, если нет людей, способных стать её участниками. Один из экстраординарных подходов компании NuMega — включение в персонал компании «непрофессиональных» разработчиков. Как говорит Эд, один из важнейших секретов успеха NuMega — подбор и сохранение ценных кадров. Результатом стала возможность мгновенной мобилизации сил и своевременного выпуска продукта на рынок. У Эда есть и собственная исключительная черта: набрав толковых сотрудников, он уходит с дороги, чтобы не мешать им в полной мере проявить свои способности. Порой такие сотрудники могли неделю работать, не встречаясь и не советуясь с менеджером проекта. Характерным качеством Эда было то, что он позволял менеджерам учиться на своих ошибках и, что самое важное, поощрял их, когда они извлекали уроки.</p><p>Если набрать толковых людей и правильно организовать их, решать остальные задачи управления проектом становится намного легче. Важно тщательно следить за балансом управления (и Эд подчёркивает это в своей книге): нельзя ни распускать коллектив, ни слишком «закручивать гайки», управления должно быть ровно столько, сколько нужно. Разделы, посвящённые планированию и исполнению проектов составлены из описания тех самых методов, которые он передавал менеджерам, обучая их основам методики успешной работы. Выпустить качественный продукт вовремя нелегко. Изложенные в этих разделах принципы — тяжкий опыт многих ошибок, заставлявших скрипеть зубами от досады, а порой доводивших до слёз!</p><p>Будучи участником многих таких ситуаций и пережив всё, о чём здесь говорится, я не понаслышке знаю, что ценность опыта, изложенного в этой книге, намного больше отданных за неё денег. Я начинал программистом в составе команды, работавшей над BoundsChecker 3.0 под началом Эда, бывшего в ту пору менеджером проекта. В конце концов я дослужился в NuMega до менеджера проектов по разработке программных продуктов из серии TrueTime и TrueCoverage. Эд в это время был уже начальником отдела разработки NuMega. Без методик, представленных Эдом в этой книге, группы, отвечающие за создание TrueTime и TrueCoverage, никогда бы не сделали эти продукты такими успешными, какими они стали.</p><p>Я во многом завидую читателям этой книги, потому что, когда они будут учиться приёмам мастера, сроки сдачи не будут дышать им в затылок. Однако мне гораздо больше повезло, поскольку меня научил этим приёмам сам мастер. Эд помог мне вырасти от начинающего программиста до состоявшегося технического специалиста и менеджера проекта (я думал, что никогда им не стану), чью помощь в управлении проектами используют компании по всему миру. Я никогда не смогу полностью отблагодарить Эда за то, что он был моим самым лучшим руководителем. Он всегда шутил, что достаточно знает о наших успехах в программировании, чтобы мы оставались честны с ним. И всё же я могу сказать, что почти всему, что касается успешного создания программ, меня научил Эд.</p><p>Когда Эд попросил меня написать предисловие к этой книге, я был просто ошеломлён, ведь это такая честь для меня! Но он сказал, что эта книга полностью на моей совести, поскольку я подал ему идею и постоянно стимулировал её написание. Я тут же с радостью признал свою вину! Когда я работал в NuMega, мне часто задавали один и тот же вопрос: «Как этим ребятам в NuMega удаётся выпускать столько замечательных программ?» Теперь для ответа мне достаточно сослаться на книгу Эда. Я чувствую приятное волнение от того, что теперь у каждого есть шанс узнать, как один из лучших в своей отрасли менеджеров проектов снова и снова создавал программы, значение которых для разработчиков трудно переоценить.</p><p><emphasis>Джои Роббинс Холлис, Нью-Гэмтиир Январь 2001 года</emphasis></p></section><section><title><p>Благодарности</p></title><p>Над этой книгой работало столько народа, что упомянуть всех очень трудно, поэтому я заранее хочу извиниться перед теми, кого нет в этом списке. Думаю, важно отметить как группы, так и отдельных людей, которые сыграли ключевые роли в создании этой книги и прямо или косвенно помогли ей появиться на свет. Вот кого я хочу поблагодарить.</p><p>• Джона Робинса, бывшего товарища по группе и одного из основателей Wintellect Inc., вдохновлявшего меня в течение более чем двух лет во время написания этой книги. Его неисчерпаемый энтузиазм и поддержка в конце концов сделали своё дело. Спасибо за дружбу и веру в меня!</p><p>• Группу редакторов и рецензентов: Барбару Морланд и Дэниель Бёрд из Microsoft Press, а также Габриэль Hoунэст и Нэнси Дэппер из Online Training Solutions, Inc. Они проделали огромную работу по сведению содержимого этой книги в единое целое и внесли значительный вклад в каждый этап работы над ней.</p><p>• Фрэнка Гроссмана и Джима Москана, совместно с которыми была основана компания NuMega Technologies, Inc. Они преподали мне уроки разработки замечательных программ и составили компанию я практическом освоении этого искусства. За это я всегда буду им благодарен.</p><p>• Команду разработчиков BoundsChecker 3.0, 4.0 и 5.0. Большая часгь материала этой книги взята из их достижений. Ребята, вы — лучшая команда разработчиков из известных мне. И перестаньте, наконец, скандировать моё имя!</p><p>• Боба О'Брайена, менеджера NuMega по связям с общественностью, и Клайда Хакима, менеджера по экономическим связям. Вы постоянно привлекали внимание к нашей работе, благодаря вашим усилиям мы выглядели намного лучше, чем мы есть на самом деле. Ваш вклад вместе с остальными участниками группы маркетинга заслуживает такую же благодарность, как и вклад остальных.</p><p>• Моих родителей, Эда и Лору Салливан, научивших меня жизни и всему, что в ней важно.</p><p>• Мою жену Джейн, сына Мэтью и дочь Xaнну, позволивших мне работать над книгой по ночам и в выходные. Благодаря вашему энтузиазму и поддержке, оказанной в моменты, когда я больше всего нуждался в ней, я мог продолжать работу. Вы — самое драгоценное, что у меня есть, и я каждый день благодарю за это Бога.</p><p>Ну наконец-то все!</p></section><section><title><p>Введение</p></title><p>Я пришёл в NuMega Technologies летом 1994 года. Работая над BoundsChecker, продуктом для обнаружения ошибок в программах для Windows, я совмещал должности руководителя разработки и менеджера по маркетингу продукта. Тогда в NuMega было всего лишь 14 сотрудников: кроме двух основателей компании — три программиста, руководитель административной службы, четверо специалистов по сбыту, один администратор в офисе, один посыльный, три специалиста по технической поддержке и менеджер по маркетингу. Мы были небольшой компанией, по всем статьям подходящей под определение начинающей. Каждому приходилось совмещать несколько должностей и выполнять массу обязанностей. Однако, несмотря на небольшие размеры NuMega, у нас были большие планы и надежды. Мы твёрдо намеревались создавать замечательные программы и хотели собрать элитную группу специалистов, способную создавать лучшие в мире инструменты для разработки ПО.</p><p>Спустя несколько лет, благодаря заботам основателей и усилиям первоклассной группы менеджеров, компания выросла: теперь в ней больше 150 сотрудников. Вместе с компанией рос и я, дойдя до поста начальника отдела разработки. В первые четыре года мы создали шесть основных выпусков наших приоритетных продуктов, BoundsChecker и SoftICE, приобрели два новых продукта и ещё четыре создали для внутреннего применения. Почти все эти продукты были выпущены в расчётный срок. Объём прибылей быстро рос, и компания стала очень рентабельной. Наши продукты хорошо принимали, и они смогли завоевать ряд отраслевых наград:</p><subtitle>2000 г.</subtitle><p>• Приз «Лучший компонент или утилита для обеспечения качества ПО», присуждаемый Vbxtra за DevPartner® for Visual Basic.</p><p>• Приз «На гребне волны», присуждаемый Рrogammer’s Paradise, в номинации «Самый продаваемый инструмент для тестирования и отладки» за BoundsChecker VC++ Edition.</p><p>• Приз «Выбор читателя» журнала VBPJ за CodeReview™ 6.1.</p><p>• Приз «Выбор читателя» за FailSafe™ 5.21 журнала VBPJ.</p><subtitle>1999 г.</subtitle><p>• Журнал Software Developmem Magazine присудил DevPartner Studio приз Jolt Cola «За отличное качество продукта».</p><p>• DevPartner Studio заслужил 5 звёздочек в рейтинге Software Development. </p><p>• Java Developer's Journal присудил приз «JDJ World Class Award» программе DevPartner for Java™.</p><p>• SmartCheck 6.01 получил приз «Выбор читателя» журнала VBPJ. </p><p>• CodeReview 6.1 получил приз «Выбор читателя», присуждаемый журналом VBPJ.</p><p>• DevPartner 6.1 for Visual Basic получает приз «Выбор читателя» журнала VBPJ.</p><p>• Приз «Выбор читателя» присуждается журналом VBPJ программе TrueTime®</p><subtitle>1998 г.</subtitle><p>• DevPartner for Visual Basic получает от Vbxtras приз «Thunderbolt». </p><p>• SmartCheck и TrueTime объявлены «Выбором редакции» журнала Visual Basic Programmer's Journal.</p><p>• SmartCheck и TrueTime получают приз «Выбор читателя» журнала Visual Basic Programmer's Journal.</p><p>• DevPartner for Visual Basic получает от SoftwareDevelopment приз Jolt Cola «За производительность».</p><subtitle>1997 г.</subtitle><p>• BoundsChecker становится первым экспонатом в зале славы «Jolt Hall of Fame». Программа у всех на устах, как завоевавшая многочисленные награды за высокую производительность.</p><p>• TrueTime Visual Basic Edition завоевала на выставке Comdex приз «Best of Show» журнала BYTE.</p><p>• Еженедельник PC Week присуждает приз «Выбор аналитика» программе SmartCheck</p><p>• BoundsChecker второй год подряд получает от журнала Visual Basic Programmer’s Journal приз «Выбор читателя». </p><subtitle>1996 г.</subtitle><p>• Журнал Windows Tech Journal присуждает приз «Star Tech» программе CodeReview™ как одному из наиболее значительных инструментов для разработки ПО.</p><p>• BoundsChecker получает приз журнала PC Magazine «Выбор редакции», опередив конкурентов по многим параметрам.</p><p>• BoundsChecker для Windows NT получает приз «За лучший и наиболее технически совершенный инструмент для разработки» от журнала PC Magazine.</p><p>• BoundsChecker получает приз Jolt Cola «За высокую производительность и отличное качество» на конференции Software Development West'96.</p><p>• BoundsChecker становится обладателем приза «Выбор читателя» журнала Visual Basic Programmer’s Journal.</p><subtitle>1995 г.</subtitle><p>• Windows Tech Journal присуждает свой приз «Star Tech» программе BoundsChecker, как одному из наиболее значительных инструментов для разработки ПО 1995 года.</p><p>• BoundsChecker для Windows NT получает приз Jolt Cola «За отличное качество продукта» на конференции Software Development West'95.</p><subtitle>1994 г.</subtitle><p>• BoundsChecker для Windows получает приз Jolt Cola «За отличное качество продукта» на конференции Software Development West'95.</p><empty-line/><p>Неплохой список, да? Однако нам пришлось столкнуться с теми же проблемами, с которыми сталкивается любая группа разработчиков ПО. Конфликтующие задачи, напряжённый график, нехватка ресурсов и сил, плохо налаженный обмен информацией — лишь несколько пунктов из длинного списка проблем. Но нужно было своевременно выпускать качественные программы — в противном случае нас бы просто вытеснили из бизнеса.</p><p>Самое большое препятствие — неэффективное управление группами разработчиков и проектами. Сейчас это самая распространённая проблема в индустрии программных средств. Она особенно актуальна для начинающих компаний — они сталкиваются с ней ежедневно. И решать её надо, иначе — банкротство. Способность справиться с этой проблемой — один из важнейших факторов успеха NuMega Technologies.</p><p>Цель этой книги — поделиться с вами принципами. приёмами и методиками разработки коммерческого ПО в растущей среде начинающей компании, найденными в результате нелёгкого труда. В книге будут раскрыты самые важные и фундаментальные принципы, позволяющие выпускать качественные программы. Я не буду отвлекаться на праздные дискуссии или перечислять сотни возможных способов решения той или иной проблемы, а расскажу лишь о подходах, которые были с успехом использованы для разработки коммерческого ПО в начинающей компании. Я также расскажу об опыте моей работы в NuMega: как мы воспитывали своих специалистов и создавали наши продукты, находясь в начале пути.</p><p>Думаю, что среда начинающей компании практически тождественна небольшим и средним проектам (в которых занято до 30 человек). Мала или велика ваша организация, занимается она Интернет-услугами или информационными технологиями, являетесь вы гуру Ассемблера или Web-программистом, — нужно выпускать качественные программы и делать это вовремя. Вы постоянно находитесь под давлением этой необходимости, вам приходится иметь дело с идентичными проблемами, и вы тоже стремитесь к успеху. В конце концов, когда последний раз ваша группа смогла избежать конфликта задач, накладок с графиком, нехватки ресурсов и других «радостей» типичного цикла разработки ПО?</p><p>Пожалуйста, имейте в виду, что эта книга — не исчерпывающее пособие по какому-либо предмету. Книг, посвящённых подробному анализу узких вопросов: набору кадров, технологии разработки ПО, тестированию, инженерной психологии и др. — хватает. Уверен, на собственном опыте вы уже убедились, что во время цикла разработки редко удаётся полностью реализовать какой-либо отдельный этап. Поэтому важно отличать главное от второстепенного. Нужно овладеть основами и не беспокоиться о мелочах. Если можно сэкономить время, силы или средства, экономьте! Но если нет иного способа решить задачу, кроме трудного, все равно беритесь за эту задачу.</p><p>С другой стороны, эта книга — не обзор оценок способов решения различных задач. Вы не найдёте здесь критики всех разнообразных стратегий решения конкретных задач. Вместо этого я расскажу вам о наших испытанных методах и покажу, как быстро и эффективно связать их воедино в цикле разработки. Хотя есть ещё целый ряд замечательных идей, ждущих своего воплощения, я сосредоточусь только на подходах, опробованных на деле.</p><subtitle>Как пользоваться этой книгой</subtitle><p>Я не хочу сказать, что изложенные в этой книге идеи подойдут для каждой группы и будут работать в каждой компании. Однако я глубоко убеждён, что большинство этих идей будет полезно самым разным организациями при работе над широким спектром проектов. Надеюсь, вы сможете адаптировать под нужды ваших проектов как можно больше информации из этой книги. Описанный подход к созданию программ не единственный, но он испытан в деле и с успехом применялся.</p><subtitle>Для кого предназначена эта книга</subtitle><p>Если вы занимаете (или надеетесь занять) руководящую должность в проекте по созданию ПО, то эта книга — для вас. К целевой аудитории книги также относятся:</p><p>• верхние эшелоны управления техническими подразделениями (вице-президенты компаний, начальники отделов, руководители групп);</p><p>• руководители проектов;</p><p>• ведущие разработчики;</p><p>• архитекторы ПО;</p><p>• менеджеры продуктов;</p><p>• менеджеры групп технических писателей;</p><p>• ведущие технические писатели;</p><p>• менеджеры групп тестировщиков;</p><p>• ведущие тестировщики;</p><p>• менеджеры по эргономике;</p><p>• ведущие специалисты по эргономике;</p><p>• менеджеры групп технологов по разработке ПО;</p><p>• ведущие технологи по разработке ПО.</p><p>Если вы — рядовой член группы, вам тоже следует прочитать эту книгу. В ней описаны роли всех участников команды, а не только менеджеров и ведущих специалистов. Важно, чтобы вся команда работала как единое целое, разделяя одни и те же концепции, единое отношение к разным проблемам, чтобы это были единомышленники и носители одной культуры.</p><subtitle>Структура книги</subtitle><p>В книге три части, и в каждой описан один из критических аспектов управления созданием ПО.</p><p><emphasis><strong>Часть 1. Люди, организация и методы</strong></emphasis></p><p>Прежде чем приступать к планированию проекта или написанию программы, нужно позаботиться об основах. Для эффективной работы необходимо подобрать людей, организовать их и вооружить их приёмами. Без этого все усилия не отстать от графика будут безуспешны, и при возрастании темпа работы и давления сроков проект просто развалится на части. Первая часть посвящена фундаментальным потребностям любого проекта, исполняемого быстрыми темпами, включая:</p><p>• <emphasis>кадры — </emphasis>как найти и удержать нужных специалистов;</p><p>• <emphasis>организацию — </emphasis>какова роль и обязанности каждого участника группы;</p><p>• <emphasis>инструментарии — </emphasis>ключевые инструменты для разработки и способы их использования;</p><p>• <emphasis>тестирование — </emphasis>как вести тестирование параллельно с разработкой;</p><p>• <emphasis>технологию разработки — </emphasis>как поддерживать целостность программы и обеспечивать её пригодность к использованию на протяжении цикла разработки.</p><p><emphasis><strong>Часть 2. Формулирование и планирование проекта</strong></emphasis></p><p>Если вы всерьёз намерены выпустить программу в срок, то прежде, чем приступать к её созданию, нужно понять, что и как должно быть создано. Даже самым талантливым людям требуется иметь представление о планируемых результатах проекта, намеченных для использования технологиях и конечном облике продукта. В связи с этим нужно:</p><p>• сформулировать основные требования к проекту:</p><p>• определить технологии, которые лягут в основу проекта:</p><p>• создать модель использования проекта.</p><p>Решив эти задачи, можно составить график, в котором задачи проекта приведены в равновесие с доступными кадрами и уровнем их способностей. В определённой степени можно быть уверенным, что при таком подходе будет создан реалистичный график создания именно такой программы, какая нужна.</p><p>Все четыре предмета — требования, технологии, использование и график работ — тесно связаны, поэтому если ваша цель — успешный проект, их нельзя рассматривать в отрыве друг от друга. Без них придётся полагаться только на догадки, допущения и игнорировать ключевые элементы проекта, внося неприемлемый риск, часто ведущий к возникновению проблем и срывам графика. Помните: почти все самые большие ошибки делаются в первые несколько недель работы над проектом, при планировании.</p><p><emphasis><strong>Часть 3. Исполнение проекта</strong></emphasis></p><p>Планирование закончено — всё готово для создания продукта. При наличии толковых людей, верных технологических приёмов и хорошего плана, шансы уложиться в срок весьма велики. Однако необходимо следить за тем, чтобы и на завершающих стадиях проекта всё шло должным образом.</p><p>В третьей части я рассказываю о моделях исполнения проекта, управляющих повседневными работами по разработке продукта. Мы рассмотрим:</p><p>• <emphasis>исполнение — </emphasis>как не дать проекту сбиться с курса, обнаруживая и решая проблемы как можно раньше;</p><p>• <emphasis>бета-тёсmирование — </emphasis>как с помощью бета-тестирования получать из внешнего мира отзывы о программе и расширить возможности тестирования;</p><p>• <emphasis>работа с кандидатами на выпуск — </emphasis>как управлять заключительными этапами проекта и обеспечить готовность продукта;</p><p>• <emphasis>закрытие проекта — </emphasis>что это такое, зачем оно нужно и как его провести.</p><subtitle>Дополнительная информация</subtitle><p>В конце каждой главы приводятся ответы на распространённые вопросы и методы решения проблем, часто возникающих во время применения изложенных в книге идей на практике. Большинство вопросов и проблем взято из реальных случаев, поэтому я надеюсь, что они помогут вам выйти из реальных затруднительных ситуаций.</p><p>Кроме того, по ходу изложения есть врезки под заголовком <emphasis>«Из собственного опыта»</emphasis>, иллюстрирующие применение некоторых принципов и концепций в компании NuMega. Эти врезки позволили мне кое-что прокомментировать, рассказать несколько интересных, а порой анекдотичных историй, благодаря которым разработка ПО является таким весёлым занятием.</p><subtitle>Как со мной связаться</subtitle><p>Я бы хотел услышать ваши соображения и комментарии по поводу этой книги. Кроме того, было бы интересно, если б читатели поделились своими уроками, которые они извлекли из собственного опыта, а также оригинальными способами создания программ в срок. Пишите мне по адресу: <emphasis><a l:href="mailto:eds_books@botmail.com">eds_books@botmail.com</a></emphasis></p></section><section><title><p>Часть 1</p><p>Люди, организация и методы</p></title><section><title><p>Глава 1</p><p>Замечательные люди и как их найти</p></title><section><p>Замечательные люди создают замечательные программы. Они формулируют требования, отлаживают технологию и придерживаются графиков. Они тестируют, документируют и сопровождают продукт. Их идеи, профессионализм и энтузиазм определяют успех или провал разработки. Поскольку на судьбы проекта больше всего влияет «человеческий фактор», <emphasis>очень </emphasis>важно нанимать самых подходящих людей.</p><p>Так-то оно так, но в команды разработчиков часто попадают не совсем те. Трудности с поиском кандидатов и неспособность распознать талант могут усугубляться жёсткими требованиями к срокам поставки продукта, хотя их принимают в расчёт из лучших побуждений. Если вам не по силам решить эти проблемы, то в лучшем случае вы наберёте команду посредственную, в худшем — несостоятельную. И не надейтесь, что таланты сами придут к вам: как бы там ни было, так будет далеко не всегда. Напротив, нужно иметь жёсткое, закреплённое на уровне организации правило находить и удерживать наиболее квалифицированных специалистов. Это правило должно распространяться на три ключевых направления деятельности: поиск, собеседование и удерживание кандидатов.</p><p>В этой и следующей главе мы обсудим лучшие методики поиска, отбора и удерживания талантливых людей. Я также расскажу о том, почему эта деятельность, как и сама разработка ПО, требует планирования, дисциплины и контроля исполнения.</p></section><section><title><p>Определение «замечательных»</p></title><p>Прежде всего нужно понять, кого же вы ищете. Если вы не можете определить, кто вам нужен, как вы узнаете, что нашли того, кого искали? Как отличить классного разработчика, потрясающего технического писателя и cупep-тестировщика от не столь выдающихся? Критериев оценки масса, но я выделил шесть основных.</p><subtitle>Квалификация</subtitle><p>Каждый потенциальный кандидат должен иметь признание в своей области. Разработчик должен иметь квалификацию в своей специфической технической области, технический писатель — опыт в создании учебных материалов, инженер по обеспечению качества — владеть методами автоматизированного тестирования.</p><p>Я говорю не просто о компетентности, а о мастерстве. Кандидат должен в совершенстве (ну, почти) владеть предметом, относящимся к потребностям проекта. Он должен быть способен «с лёту» рассказать о своей теме и в любой момент продемонстрировать глубокое понимание того, что и как было сделано. Разработчик, например, должен доказать, что его технические познания соответствуют предлагаемой ему должности. Вот некоторые возможные темы:</p><p>• C++ объектно-ориентированное проектирование;</p><p>• создание СОМ-компонентов;</p><p>• MFC и разработка пользовательского интерфейса;</p><p>• ассемблер и внутренняя организация Windows;</p><p>• разработка драйверов устройств;</p><p>• разработка сетевых протоколов;</p><p>• оптимизация производительности.</p><p>Почему это важно? Во-первых, если человек в совершенстве овладел хотя бы одним предметом, он, вероятно, при необходимости освоит и другие. Технология меняется быстро, и способность к обучению и постижению сложных предметов — очень важное качество.</p><p>Во-вторых, в мощных командах важно взаимоуважение друг к другу её членов, а оно зачастую основывается на знаниях и способностях. Каждый должен иметь квалификацию в одной или нескольких областях, в которые он может внести такой же или больший вклад, чем другие.</p><p>Значит ли это, что каждый разработчик должен иметь учёную степень и 20-летний опыт разработки ПО? Нет, конечно. Но если вы решили нанять начинающего разработчика для поддержки и сопровождения, вы должны быть уверены, что он выделится на своём месте, а не просто будет ему соответствовать.</p><p>На собеседования с кандидатом вам нужно основательно потрудиться, чтобы удостовериться в его квалификации и в том, что она соответствует вашим текущим или будущим потребностям. (О собеседовании мы поговорим ниже.)</p><subtitle>Преданность</subtitle><p>Разработка практически любого проекта переживает плохие времена. Кто знает, какие проблемы вас ждут впереди: ваш конкурент объявит о выпуске своего продукта первым, ведущий разработчик заболеет, производительность продукта окажется плачевно низкой — мало ли что! Но именно преданность ваших людей и их вера в то, что они делают, доведёт проект до конца. Они будут демонстрировать свою приверженность делу, не прекратят работу и будут помогать, пока не добьются своего. Самые преданные люди стремятся к завершению проекта и готовы пожертвовать чем угодно во имя победы.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Прекрасный пример того, на что способна преданная и целеустремлённая команда, — разработанный NuMega продукт BoundsChecker 4.0. В декабре 1995 г., в самом начале Интернет-революции, Билл Гейтс рассказал о планах Microsoft относительно Интернета. 8 декабря, на следующий день после его заявления, нам позвонили из Microsoft и спросили, хотим ли мы поддерживать их Sweeper SDK и новые инициативы, сплошные с Интернетом. Если да, то представьте совместные пресс-релизы и демонстрации на предстоящей в начале марта выставке Software Devetopment West. Для начинающей компании предложение было превосходным, но у нас оставалось менее трёх месяцев, а наш проект был готов наполовину, у нас была малюсенькая команда, и начинался сезон отпусков... Реакция коллектива была удивительной. Все увидели выгоду этого предложения и решили рискнуть. К полудню у нас был план разработки, учитывающий новую ситуацию. Конечно, он был далёк от совершенства — это был некий зародыш плана, над которым мы продолжали трудиться. Следующие три месяца весь коллектив работал засучив рукава... И выставка прошла великолепно!</emphasis></p><subtitle>Отношение к делу</subtitle><p>Хорошие специалисты зачастую проявляют завидное усердие и недюжинную энергию. Они самоуверенны, но не циничны и сосредоточены на хорошем. Их трудно выбить из колеи: они оптимисты и легко адаптируются. Ищите их. Тяните в свою команду. Они будут поддерживать её моральный дух во всё время работы над проектом, особенно в тяжелые времена. Их энтузиазм воодушевит коллектив.</p><subtitle>Поведение</subtitle><p>Вам нужны специалисты, склонные к активным действиям, из тех, кто идёт своим путём для достижения цели. Имённо стремление к действию отличает истинно классных разработчиков. Люди этой породы не сворачивают с намеченного пути, они стремятся иметь больше обязанностей, исправить пару лишних ошибок или общаться по электронной почте, чтобы оставаться в курсе событий.</p><subtitle>Умение работать в команде</subtitle><p>Для разработки ПО нужны люди, способные делиться идеями, мнениями и опытом. Только тогда можно решать сложные проблемы. Только так человек способен помочь другому. Только так создаётся ощущение, что работа кончается тогда, когда закончен весь проект. ПО создаётся командой. Если у вас нет хорошей команды, вы не создадите хорошего ПО.</p><p>Вот почему необходимо поддерживать сплочённость команды. Исключений здесь быть не должно. Если суперспециалист не способен сработаться с другими, его ценность для коллектива становится заметно ниже. В худшем случае люди такого типа могут даже разрушить команду. На первом месте — забота о коллективе.</p><subtitle>Жажда знаний</subtitle><p>Ищите жаждущих знаний, тех, кто постоянно занимается самообразованием, поиском новых интересных способов применения технологий. Они интересуются новинками и знают, что происходит в их индустрии; они не дают своим знаниям устареть. Они понимают, что происходило с ПО раньше, что творится сейчас и что его ждёт в будущем. Наличие таких людей при выработке перспективных решений трудно переоценить. Это поможет вашей команде быстро и легко переходить к новым технологиям, инструментам и методам.</p><subtitle>Замечательные люди или совершенные люди?</subtitle><p>Совершенных людей не бывает. Так что не надейтесь, что найдёте кандидата идеального во всех отношениях.</p><p>Скажем, подходит ли вам прекрасный специалист, демонстрирующий заинтересованность в проекте, хорошо работающий в команде и читающий всё, что ему попадёт, но вялый и не уверенный в себе? Как знать. Во всяком случае, если с ним нет других проблем.</p><p>Ещё один важный фактор — способность кандидата к росту. Посмотрите на его потенциал: его способности, отношение к делу. То, что он знает в первый день, не так важно в сравнении с тем, что он будет знать через три, шесть месяцев и через год. Убедитесь, что вы правильно оценили способность кандидата к росту, даже если он не столь ярок, как другие члены вашей команды. Не бойтесь взять подающего надежды талантливого человека и вырастить его.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>В NuMega мы часто оцениваем людей по их стремлению и возможности учиться: если человеку не сидится на месте и он постоянно хочет совершенствовать свои знания, у него есть два важнейших качества, необходимых для успеха в будущем. Обнаружив такие черты у молодых кандидатов, мы принимаем их на работу. Мы устраиваем их на начальные технические должности, в техническую поддержку или контроль качества — туда, где нам нужна помощь и подходит их опыт. Кандидат может не знать столько, сколько другие сотрудники, но он должен быстро набираться знаний и может со временем обогнать других.</emphasis></p><subtitle>Паршивая овца…</subtitle><p>Иногда просчёт при выборе кандидата может обернуться серьёзными проблемами.</p><p>• <emphasis>Неспособность адекватно выполнять поручения</emphasis></p><p>Допустим, это было сделано не по злому умыслу — просто кто-то не приложил достаточно усилий, чтобы оценить квалификацию нового сотрудника, но он принят на должность, для которой не годится.</p><p>• <emphasis>Изоляция от коллектива</emphasis></p><p>В сплочённых командах очень важно, чтобы каждый тянул свою лямку. Работник, не способный справиться со своей работой, часто становится изгоем: люди редко советуются, просят помощи или оценки у отстающего. Им кажется, что он «сидит у них на шее». Если у вас более одного неуспевающего, коллектив раздробится на группировки, начнутся интриги… Чтобы команда функционировала нормально, каждый должен вносить свой ощутимый вклад и общее дело.</p><p>• <emphasis>Неустойчивый моральный дух</emphasis></p><p>Если с одним из членов команды невозможно работать, боевой дух всей команды начнёт стремительно падать. Нужно проверять, что любой кандидат — особенно претендующий на роль лидера, — хорошо вписывается в команду.</p><p>• <emphasis>Отставание от технологического прогресса</emphasis></p><p>Для общего успеха коллектива очень важно реагировать на изменения в своей индустрии. Например, если вы решили, что ваша традиционная стратегия двухуровневых клиент-серверных приложений устарела и вам нужно переходить на трехуровневую стратегию Web-приложений, а кто-то из членов команды не способен достаточно быстро усовершенствовать свои знания, вы потеряете время, а возможно, и интересные заказы.</p><empty-line/><subtitle>Финансовые затраты</subtitle><empty-line/><p>Теперь посмотрим, как неправильный выбор сотрудника сказывается на финансах. Вот пример одно— и двухгодичных выплат одному разработчику:</p><cite><p>$90 000 Зарплата</p><p>$5 000 «Подъёмные»</p><p>$20 000 Комиссионные агентам по найму</p><p>$30 000 Социальное страхование, льготы, обучение</p><p>Итого:</p><p>$145 000 Затраты за первый год</p><p>$175 000 Затраты за первый и второй год (включая небольшой рост, без премий)</p></cite><p>Куча денег! И только на одного человека. Так как зачастую оплата труда является крупнейшей статьёй расходов при разработке ПО, возникает вопрос: стоит ли тратить столько же времени и сил на оценку новых кандидатов, как на новые технологии и средства разработки?</p><p>В обоих случаях вы хотите быть уверены. В том, что удовлетворены ваши сегодняшние и будущие потребности. И в том, что сделали надёжный выбор, который облегчит вашу деятельность. Очевидно, что вы должны выбирать новых сотрудников не менее тщательно, чем оборудование.</p><subtitle>Влияние плохого кадрового обеспечения</subtitle><p>Одно неверное решение при подборе сотрудников, конечно, не очень приятно, но не имеет фатального влияния на проект. Гораздо сложней преодолеть последствия серии неудачных решений при подборе персонала, в результате которых команда формируется из посредственностей.</p><p>• <emphasis>Низкая производительность</emphasis></p><p>Низкая производительность для слабой команды — норма. Трудно рассчитывать на череду успехов, победы кратковременны, и проект начинает пробуксовывать. Сбиваясь с пути, слабая команда начинает бессмысленную борьбу, поскольку не может понять суть проблем и сменить курс быстро и решительно.</p><p>• <emphasis>Невнимательность к деталям и качеству</emphasis></p><p>Слабая команда часто выпускает «сырой» продукт. У людей нет стремления сделать своё дело наилучшим образом и страстного желания создать солидный продукт, удовлетворяющий пользователя. В плохой команде люди не остаются после работы и не прихватывают обеденное время, чтобы чуть повысить производительность программы, прогнать лишний тест или переписать параграф документации. Без таких мелочей время работы увеличивается, а его качество значительно ухудшается.</p><p>• <emphasis>Задержка в выпуске продукта</emphasis></p><p>Плохой команде трудно спланировать график выпуска продукта. Исполнители зачастую не осознают сложность технологий, с которыми имеют дело, не способны предвидеть возможных проблем и не желают жертвовать во имя своевременного завершения работы. Сама по себе задержка проекта не значит, что у вас плохая команда. Но я убеждён, что для плохой команды это в порядке вещей и что эти проблемы часто являются следствием плохо организованного кадрового обеспечения.</p></section><section><title><p>Поиск и привлечение достойных кандидатов</p></title><p>Как же их найти? Основных методик девять. В NuMega мы использовали практически все. Кто скажет, откуда возьмётся хороший кандидат! Так что мы решили задействовать все имеющиеся механизмы. Каждая методика имеет свои плюсы и минусы, но некоторые работают лучше других, особенно для начинающих компаний (табл. 1-1).</p><empty-line/><image l:href="#pic1.jpg"/><p>Табл. 1-1. Каналы для поиска новых сотрудников.</p><subtitle>Web-узлы поиска кадров</subtitle><p>Сегодня Интернет предоставляет, пожалуй, самые широкие возможности для найма сотрудников. Важнейшим преимуществом Интернета является его огромная популярность во всём мире и то, что он может работать на вас круглосуточно. Кроме обычной публикации объявлений в телеконференциях, один из лучших способов — работа с интерактивными узлами поиска кадров: они могут дать вам исключительную возможность найти талантливых профессионалов. Вот пара хороших узлов: <emphasis>www.monster.ami</emphasis> и <emphasis>www.hotjobs.com</emphasis></p><p>Идея проста: вы, как работодатель, публикуете на Web-узле описание своей работы, а потенциальные кандидаты просматривают список предложений в поисках интересующих их должностей. Чтобы это работало, нужно очень чётко описать предлагаемую работу. Web-узлы обычно ограничивают описание предложения лишь парой абзацев, так что убедитесь, что оно содержит чёткое описание должностных обязанностей, технологии и рабочей обстановки.</p><subtitle>Собственный Web-узел</subtitle><p>Web-узел вашей компании также играет важную роль. Хотя большинство работодателей часто используют свои узлы для описания вакансий, многие из них недооценивают, насколько важны их узлы для потенциальных кандидатов.</p><subtitle>Привлеките внимание кандидатов</subtitle><p>Большинству малых или вновь появившихся компаний трудно привлечь кандидатов на свои узлы: о них просто мало кто знает. Поэтому маловероятно, что кандидаты обратят внимание на вашу компанию только благодаря вашему Web-узлу. Но если ваша компания побольше или широко известна, нужно использовать эту возможность. В поисках работы люди часто заходят на Web-узлы компаний, о которых они что-то слышали или об успехах которых они знают.</p><p>По мере роста вашей компании и укрепления её репутации вы будете замечать увеличивающийся трафик посещений вашего узла потенциальными кандидатами. Приготовьтесь к этому. Если компания широко известна, не упустите возможность извлечь выгоду из вашей репутации и представляйте свои вакансии всем посетителям Web-узла.</p><subtitle>Представьте товар лицом</subtitle><p>Независимо от возможностей компании привлекать внимание людей к Web-узлу, разместите на нём ваши предложения по трудоустройству. Нет разницы, откуда кандидату стало о вас известно (от кадрового агентства, из объявления, по рекомендации или как-то ещё), — важно, что теперь именно ваш Web-узел должен разрекламировать ваши вакансии и вашу компанию. Нужно, чтобы на посетителей узел произвёл глубокое впечатление. Профессионально ли сделан узел? Достаточно ли чётко подана информация, насколько он аккуратен, интересен и ярок? Надо не просто перечислить вакансии, надо показать, почему это так здорово — работать в вашей компании.</p><p>Почти все хорошие кандидаты посмотрят Web-узел компании перед собеседованием. Даже если ваша компания маленькая и вы ограничены в ресурсах и во времени, важно произвести сильное впечатление на потенциальных кандидатов, представляя свою компанию и имеющиеся вакансии. Далее я привожу список наиболее важных задач, которые должен решать ваш узел.</p><p>• Предоставьте ясное и точное описание предлагаемой работы:</p><p>— опишите свободные вакансии;</p><p>— опишите применяемые технологии;</p><p>— укажите требуемый опыт работы.</p><p>• Приведите описание интересных проектов или продуктов:</p><p>— объясните, что может делать программа;</p><p>— объясните, почему продукт так нужен организациям или компаниям:</p><p>— расскажите об особых навыках, приобретённых сотрудниками при работе над проектом;</p><p>— фотографии членов команды разработчиков позволят сделать знакомство менее формальным.</p><p>• Предоставьте сведения о вашей компании и достигнутых ей успехах:</p><p>— обозначьте цели компании и её виды на будущее;</p><p>— укажите, как долго работает компания;</p><p>— укажите, является ли компания государственной или частной;</p><p>— укажите, получает ли компания венчурное финансирование;</p><p>— расскажите о достигнутых успехах;</p><p>— включите один из последних пресс-релизов компании;</p><p>— покажите фотографии зданий, помещений, кафе и мест отдыха в вашей компании.</p><p>• Опишите программу предоставляемых льгот:</p><p>— опишите стандартный пакет льгот;</p><p>— опишите исключительные особенности, отличающие ваши льготы от других.</p><p>• Опишите рабочую обстановку:</p><p>— укажите, используется ли официальная форма одежды или произвольная;</p><p>— укажите, возможен ли гибкий график работы;</p><p>— укажите, есть ли возможности для активного отдыха;</p><p>— укажите, имеет ли место какая-либо особая общественная деятельность.</p><subtitle>Рекомендации</subtitle><p>Рекомендации сотрудников исключительно важны, особенно для начинающих компаний. Программа найма сотрудников по рекомендациям должна стимулировать уже работающих сотрудников к привлечению своих бывших коллег, друзей или знакомых. Вместо того чтобы платить большие комиссионные профессиональным агентам по трудоустройству, часть этих денег лучше заплатить своим работникам.</p><p>Метод найма по рекомендациям основан на очень простой концепции: классные специалисты обычно образуют некое сообщество, зачастую включающее разных специалистов: разработчики ПО знакомы с техническими писателями, архитекторы с менеджерами и т.д. Ещё одна прекрасная особенность этого метода в том, что рекомендующий ручается за лицо, которое он рекомендует, демонстрируя своё желание снова с ним работать.</p><p>Рекомендации сотрудников — это не только прекрасная методика найма. Если у вас уже высококвалифицированная команда и вы используете этот метод, вы увеличиваете шансы пополнить её другими квалифицированными специалистами. Кроме того, люди склонны рекомендовать тех, с кем они хотели бы работать. По сути рекомендующий заинтересован в том, чтобы рекомендуемый добился успеха, и не будет стоять у него на пути.</p><p>Благодаря рекомендациям, многие начинающие и малые компании растут очень быстро. Это самый дешёвый, простой и надёжный способ найма квалифицированных кандидатов. Одно «но»: маленькие компании могут легко попасть в зависимость от рекомендаций. Через какое-то время рекомендаций станет меньше, или они вообще перестанут поступать, так как все варианты будут испробованы. Нельзя слишком крепко привязываться к этому подходу, как и к любой другой методике найма работников.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>В NuMega за первые три года 40% наших кандидатов попали к нам по рекомендациям. Цепочка рекомендаций получилась длинной и запутанной, и было довольно забавно её распутывать. Так, мы начали с Мэта, который ручался за Джона, который в свою очередь ручался за Бэрни, а тот — за Мэри Лу.</emphasis></p><empty-line/><p>Сотрудники не всегда помнят о том, что им имеет смысл охотиться за бывшими коллегами. Чтобы метод найма работал, требуется регулярное общение внутри компании (собрания, доски объявлений, электронная почта) и серьёзное материальное поощрение. Выплачивайте премии за рекомендации на общих собраниях. Не забывайте информировать новых сотрудников о программе рекомендаций — сделайте это частью своей программы обучения новых сотрудников. Пусть кадровики встречаются с новыми сотрудниками через несколько недель после начала работы и узнают, не могут ли они рекомендовать потенциальных кандидатов.</p><subtitle>Профессиональные кадровые агентства</subtitle><p>Один из традиционных способов поиска работников — прибегнуть к услугам профессиональных кадровых агентств. Получив от вас описание предлагаемых вакансий и требуемой квалификации, агентства ищут подходящих кандидатов. Затем они посылают вам резюме, удовлетворяющие вашим требованиям. Если вы нанимаете кандидата, рекомендованного агентством, вы выплачиваете агентству в качестве комиссионных от 15 до 25% годовой зарплаты нового сотрудника.</p><p>Лучший способ работы с профессиональными агентствами — установить с ними крепкие взаимоотношения. Если вы продемонстрируете, что готовы уделять им достаточно времени, подробно опишите свои предложения, обеспечьте обратную связь — и вы достигнете лучших результатов. А ещё лучше, если вы согласны ограничить число посреднических агентств, платить большие комиссионные и покажете, что у вас хватает вакансий. У агентства будет реальный стимул, и в результате вы из самых лучших найденных ими кандидатов выберите первоклассного работника.</p><p>Достоинства кадровых агентств очевидны. Кто-то другой ищет того, кто вам нужен, а вы за это платите. Если вы знаете хорошее кадровое агентство и можете себе позволить заплатить им то, что они хотят, — все счастливы. Но хорошие агентства встречаются редко. Во многих случаях резюме, получаемые от них, выглядят неважно, а агентство не предоставляет о кандидате достаточной информации. Снова вы должны рассчитывать на самих себя.</p><subtitle>Колледжи</subtitle><p>Может, поискать в колледжах? У нас в NuMega не было ресурсов для поиска талантов по всей стране. Мы определили несколько ключевых учебных заведений в нашем районе и установили связи с деканами, профессурой и служащими, отвечающими за распределение выпускников. Проделав эту работу, мы вызвались на общественных началах рассказать о своей компании, отрасли и о том, чем мы занимаемся. Когда наши отношения укрепились, нам стали рекомендовать талантливых новичков на постоянную работу, а также для работы на неполный рабочий день и на время каникул.</p><subtitle>Объявления и ярмарки вакансий</subtitle><p>Рекламные объявления и ярмарки вакансий — пожалуй, старейшие методики найма работников. Но объявления в газетах очень дороги, и хотя в результате вы получаете много резюме, большинство из них — от неподходящих кандидатов. Обычно хорошие кандидаты не обращают внимания на объявления и не посещают ярмарок вакансий — они склонны вращаться в своём кругу. Вот почему так эффективны рекомендации. Возможно, вам удастся найти самородок в горе песка, просматривая объявления и посещая ярмарки, но приготовьтесь копаться в пачке резюме, посланных «на всякий случай».</p><subtitle>Выставки</subtitle><p>Поиск сотрудников на выставках может быть эффективным, но только если у вас очень специфические запросы и вы выставляетесь на соответствующей специализированной выставке. Как правило, выставки посещают люди, преданные своей компании, и не с целью найти новую работу, а узнать что-то новое. Как бы там ни было, не упускайте ни одной возможности разрекламировать свою компанию или организацию. Если у вас свой стенд, не забудьте подготовить рекламные листовки с информацией о вакансиях для потенциальных кандидатов.</p><subtitle>Целевой поиск</subtitle><p>Давайте честно: большинство людей, которых вы хотели бы видеть в своей команде, уже имеют работу и, возможно, не ищут другую. Учитывая это, некоторые компании нанимают кадровые агентства, занимающиеся целевым поиском. Те находят конкретные компании с аналогичными требованиями к составу персонала и пытаются найти разочарованных или неудовлетворённых сотрудников, готовых обсудить новые варианты трудоустройства. Целевой поиск часто используется, когда компания испытывает финансовые трудности или намечается смена её владельцев.</p><p>Однако этот подход ничего не даст, если сотрудники довольны работой и зарплатой. На самом деле обычно они будут просто отказываться разговаривать с позвонившим. Понимание всего этого — лучшая защита от того, чтобы ваша компания не стала целью такого поиска. Помните простое правило: если вы не способны удовлетворить вашего сотрудника, это сделает кто-нибудь другой.</p><subtitle>Исключительные события</subtitle><p>К исключительным событиям относится закрытие компании и увольнение целой команды или отдела. Когда такое случается, надо действовать очень быстро. Большинство компаний, сталкивающихся с подобными трудностями, реализует программы по трудоустройству сотрудников, которых затрагивает реорганизация. Поскольку такое случается довольно редко, не стоит строить специальную программу, рассчитанную на подобные события. Однако если повезёт, вы получите несколько хороших специалистов из одной команды.</p><subtitle>Какая методика лучше?</subtitle><p>Итак, какой способ лучше? Начинающие компании предпочитают Интернет или рекомендации, поскольку эти методики дешевле, проще и эффективней. Вы можете построить свою политику подбора кадров, опираясь только на два этих подхода. Остальные методики менее популярны или эффективны, так как требуют больше времени, денег и усилий.</p><p>Однако поскольку суперзвёзды и высококвалифицированные кандидаты очень важны, а найти их можно любым способом, следует работать по всем описанным каналам. Просто сначала надо полагаться на самые продуктивные из них.</p><p>Короче, вы должны постоянно и целенаправленно прилагать усилия в поиске кадров — это процесс бесконечный и непрерывный. Кроме тех случаев, когда вы надолго замораживаете программу найма новых сотрудников, вы должны исходить из предположения, что вам нужна некоторая реорганизация кадров с заменой старых сотрудников новыми.</p></section><section><title><p>Общие проблемы и решения</p></title><p>Пожалуй самая сложная кадровая проблема — поиск качественных специалистов. Если кадровое обеспечение у вас отстаёт, вы можете под влиянием обстоятельств «взять хоть кого, лишь бы помог». Но это очень рискованно. Каждый новый сотрудник должен прежде всего стать полноценным членом команды.</p><p>Кроме того, любое плохое кадровое решение скорей всего приведёт к проблемам, описанным в этой главе. Классные специалисты распознают достойные организации и хотят работать только в самых лучших. Не разбавляйте команду посредственностями — это может сказаться на ваших дальнейших возможностях найма работников.</p><p>Но что делать в кризисных ситуациях? А вот что:</p><p>• <emphasis>Нанимайте контрактников</emphasis></p><p>Контрактников можно эффективно использовать, заполнив пробелы в штатном расписании и используя их для работ, не являющихся критичными или уникальными в вашем проекте. Даже если их способности позволяют выполнять более квалифицированные задачи, все равно имеет смысл их использовать для таких работ, это позволит вашим людям работать над более критичными или интересными частями проекта. Контрактники — люди временные, и их легко уволить по завершении работы или если они окажутся несовместимыми с командой.</p><p>• <emphasis>Сверхурочная работа</emphasis></p><p>Это ещё одна возможность закончить работу, не жертвуя качеством коллектива (подробнее см. главу 12).</p><p>• <emphasis>Удаление или задержка в реализации некоторых функций</emphasis></p><p>Рассмотрите возможность принести в жертву функциональность. Если работы настолько много, что не поможет ни сверхурочная работа, ни контрактники, график проекта и список его возможностей может стать нереальным. При этом дополнительные сотрудники с недостаточной квалификацией не только не помогут, а, возможно, даже помешают.</p><p>• <emphasis>Реорганизация кадрового обеспечения</emphasis></p><p>Отсутствие достойных кандидатов может говорить о том, что прилагается недостаточно усилий для кадрового обеспечения. Зачем вводить в команду слабых специалистов, создавая дополнительные проблемы, если на самом деле вам нужно разобраться с кадровым обеспечением?</p></section></section><section><title><p>Глава 2</p><p>Резюме, собеседование и удерживание сотрудников</p></title><section><p>Хотя команда создаётся из отдельных людей, но вообще-то нужно работать с коллективом — обдуманно и осторожно. В этой главе мы рассмотрим основы построения коллектива: анализ резюме, собеседование с кандидатами и создание необходимых условий.</p><p>Умение отличить плохих кандидатов от хороших на основе их резюме — очень важное качество. Ничего не стоит швырнуть в корзину плохое резюме прекрасного специалиста или потратить уйму времени и сил на собеседование с человеком, с которым не стоило и встречаться.</p></section><section><title><p>Анализ резюме</p></title><p>Давайте использовать определение подходящих кандидатов из предыдущей главы применительно к анализу резюме.</p><p>• <emphasis>Опыт работы (квалификация)</emphasis></p><p>Как давно кандидат работает в интересующей вас области и насколько сложны проекты, с которыми он имел дело? Например, имеет кандидат 2— или 10-летний опыт разработки на C++? Писал он код высокопроизводительных приложений с обработкой транзакций для финансовых институтов или простой код для вывода диалоговых окон в вузовской программке? Предыдущий опыт скажется на способности специалиста разбираться со сложными технологиями и применять их в работе. Вам нужны люди, справившиеся со сложной работой хотя бы в одной из интересующих вас областей.</p><p>• <emphasis>Летуны (преданность)</emphasis></p><p>Один из лучших способов оценить это качество — посмотреть в резюме, не «летун» ли он: если за последние три года он сменил четыре места, его преданность работе можно поставить под вопрос. Хотя причины смены работы могут быть вполне обоснованными, такое поведение заслуживает пристального внимания.</p><p>• <emphasis>Предприятия, на которых кандидат работал в прошлом (отношение к делу, умение работать в команде)</emphasis></p><p>Ещё одна неплохая возможность получше узнать потенциального работника — посмотреть, где он работал раньше. Вам нужны люди, которые хорошо впишутся в организацию того типа, которая у вас есть или которую вы хотите создать. Где работал кандидат: всегда только в больших компаниях или в малых? Преимущественно в отделах информационных технологий или независимых фирмах-производителях ПО? Потратил ли он большую часть времени на работу по госзаказам или три его последние работодателя были начинающими компаниями? Над чем трудился кандидат: создавал «коробочное» ПО или занимался реализацией больших проектов масштаба предприятия?</p><p>Рабочая среда, корпоративная культура, сегмент бизнеса, выбранные кандидатом в прошлом, могут многое о нём сказать — для этого даже не нужно встречаться. Так, если ваша компания начинающая, а в резюме говорится об опыте работы с начинающими компаниями, такой кандидат может вам подойти. С другой стороны, если вы имеете дело с кандидатом, пришедшим из компании, загруженной формализованными методами и стандартами, а вы пытаетесь быстро выбросить свой продукт на рынок, вам, возможно, придётся отказать такому кандидату, особенно если есть другие факторы, указывающие на его приверженность неторопливой работе.</p><p>• <emphasis>«Сильные» и «слабые» глаголы (поведение)</emphasis></p><p>Вы можете многое почерпнуть из того, как кандидат описывает свой предыдущий опыт. Хорошие работники обычно демонстрируют свою приверженность и ответственность за решаемые задачи и гордятся этим. Показателем такого положительного качества обычно являются «сильные» глаголы, например:</p><p>— произвёл;</p><p>— овладел;</p><p>— управлял;</p><p>— определил;</p><p>— написал;</p><p>— интегрировал;</p><p>— направил;</p><p>— создал.</p><p>Слабые, глаголы в целом означают меньшую приверженность делу и ответственность. Применение таких слов может указывать, что кандидат не в полной мере овладел предметом. Поищите такие слова:</p><p>— принимал участие;</p><p>— ознакомился;</p><p>— следовал;</p><p>— помогал;</p><p>— способствовал;</p><p>— комментировал.</p><p>• <emphasis>Сфера ответственности (поведение, умение работать в команде)</emphasis></p><p>Оцените сферу ответственности. Насколько большим был проект? Какова была доля участия в нём кандидата? Насколько важно это было для компании? Что бы произошло при срыве проекта? Сколько людей участвовало в проекте?</p><p>• <emphasis>Способность письменно излагать свои мысли (умение работать в команде)</emphasis></p><p>Резюме и сопроводительное письмо — первые примеры способности кандидата письменно излагать свои мысли. Они же могут быть и единственными, если вы не попросите кандидата написать что-нибудь ещё. Хорошо ли это читается? Не слишком ли многословно? Не чересчур ли сжато? Понимаете ли вы, что хотел сказать кандидат? Не забудьте оценить всё, что получили от кандидата.</p><p>• <emphasis>Профессиональный кругозор (жажда знаний)</emphasis></p><p>Жажду знаний можно оценить (с некоторыми оговорками), исходя из широты профессионального опыта. В целом тот, кто стремится расширять свои знания, склонен принимать предложения, позволяющие ему испробовать что-то новое. Хорошей мерой профессионального кругозора кандидата является оценка его способности работать на разных уровнях абстрагирования. Может ли он работать как с высокоуровневым кодом (например, с пользовательским интерфейсом и общей логикой программы), так и с низкоуровневыми технологиями (потоки, управление памятью, внутренняя организация ОС и т.п.)?</p><subtitle>Резюме не даёт полной картины</subtitle><p>Резюме лишь помогают отобрать кандидатов для собеседования. Не забывайте оценить жизненный опыт кандидата на основании сопроводительного письма и резюме. Иногда из него видны характерные черты человека, которые могут иметь значение для предлагаемой вами работы. Вполне вероятно, что умение играть на нескольких музыкальных инструментах говорит о способности работать с несколькими языками программирования, успехи в спорте — об активной натуре, а опыт военной службы — о дисциплине.</p><subtitle>Телефонное интервью</subtitle><p>Прежде чем назначать встречу кандидатам для собеседования, имеет смысл провести их предварительный отсев, поговорив по телефону. Телефонное интервью — эффективное средство получения дополнительных сведений о кандидатах, а также прекрасная возможность сэкономить время. Оно поможет не только понять, для какой должности в наибольшей степени подходит кандидат, но и назначать ли вообще ему собеседование. Собеседование по телефону целесообразно в следующих случаях.</p><p>• <emphasis>Вы хотите больше узнать о кандидате</emphasis></p><p>Предварительный разговор по телефону — лучший способ решить, подходит ли вам кандидат, когда вы в нём не уверены. Резюме не даёт полного представления о кандидате, так что если у вас есть сомнения, поговорите с ним по телефону. Соберите наиболее важные сведения, которые помогут вам решить, отсеять его или назначить ему встречу.</p><p>• <emphasis>Нужно установить контакт, но нет возможности встретиться</emphasis></p><p>Если ваш график не позволяет своевременно провести собеседование, созвонитесь с кандидатом, подтвердив при этом наличие вакансии. Так, если у вас есть вакансия разработчика пользовательского интерфейса для самых современных карманных компьютеров, сообщите об этом кандидату. Если у вас отличная команда и прекрасные условия работы, кандидат должен об этом знать. Это поможет поддерживать заинтересованность кандидата в вашей компании, когда он будет рассматривать другие предложения, а вы сможете решить, нужно ли уделять ему больше внимания, чтобы взять его себе.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Иногда для забавы мы просматриваем старые резюме наших сотрудников. Показательно (и довольно смешно), насколько плохи их резюме в сравнении с тем, что на самом деле представляют эти люди или кем они стали. Когда-то я зачитывал такие резюме, не называя имени автора, и спрашивал у коллег, взять ли нам его на работу. Ответы были очень интересными!</emphasis></p></section><section><title><p>Собеседование с кандидатом</p></title><p>Наконец появился хороший кандидат. Следующий шаг — собеседование. Далее я расскажу о принципах его проведения.</p><subtitle>Команда, проводящая собеседование</subtitle><p>В собеседовании должны принимать участие все сотрудники, которые будут непосредственно связаны с новичком. Не забывайте: вы создаёте команду и важно, чтобы другие её члены приняли нового сотрудника. Им будет легче это сделать, если они будут участвовать в выборе кандидатов.</p><subtitle>Ключевые темы</subtitle><p>При собеседовании вы должны оценить:</p><p>• квалификацию;</p><p>• преданность;</p><p>• отношение к делу;</p><p>• поведение;</p><p>• умение работать в команде:</p><p>• жажду знаний.</p><subtitle>Оценка квалификации</subtitle><p>На собеседовании важно оценить квалификацию кандидата. Правильней всего привлечь для этого руководителей или ведущих специалистов отдельных направлений. Это могут быть руководители отдела разработки, тестирования или разработки технической документации. Ваши специалисты должны уделить достаточно времени для понимания того, что и как кандидат уже сделал.</p><p>Вот простой совет: даже если вы, как интервьюер, не знаете предмет столь же глубоко, как кандидат, вы все равно можете задавать много вопросов для оценки его знаний. Здесь важно внимательно слушать и правильно формулировать последующие вопросы. Например:</p><p>• «Что такое потоки?»</p><p>• «Как они функционируют?»</p><p>• «Зачем они применяются?»</p><p>• «Каковы наиболее распространённые проблемы использования потоков?»</p><p>• «Опишите наиболее сложную проблему, связанную с потоками, которую вам удалось решить».</p><p>Откровенно говоря, один и тот же набор вопросов вы можете использовать для самых разнообразных тем, скажем, обсуждая СОМ, серверы Sun и базы данных Oracle. Если ответы становятся короче и поверхностней, стоит копнуть глубже. Но если кандидат отвечает свободно, подробно и приводит примеры из реальной жизни, вы, скорее всего, имеете дело с кандидатом, знающим своё дело.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Как-то в NuMega мы связались с кандидатом, из резюме которого следовало, что он был архитектором сложных систем на базе СОМ, и мы попросили своих экспертов по СОМ провести с ним собеседование. Сначала кандидата попросили схематически изобразить его проект на доске, а затем пройтись по объектной модели и объяснить проектные решения. Кандидат нарисовал на доске один квадратик, долго на него таращился, а потом сказал: «Ладно, поймали. Я соврал в своём резюме — я это не разрабатывал». Вывод: всегда нужно убедиться, что кандидат умеет делать то, что он декларирует.</emphasis></p><empty-line/><subtitle>Ключевые вопросы</subtitle><p>Вопросы на собеседовании должны быть связаны с предыдущей практикой кандидата, а не с абстрактными ситуациями, для которых кандидат обычно знает «правильные» ответы. Вам нужно определить, как он работает в реальных условиях. Оценив поведение человека предыдущих ситуациях, вы можете представить, как он будет справляться с новой работой. Рассмотрим ряд общих проблем в тех областях, на которых нужно сосредоточиться. Они не претендуют на полноту — это лишь примеры вопросов, относящихся к ключевым темам.</p><p>• Квалификация.</p><p>— Опишите последний случай, когда для решения проблемы вам требовалась помощь других специалистов. Долго ли вы её ждали? Как вы взаимодействовали? Что получилось в итоге?</p><p>— Расскажите о сложной проблеме, которую вам пришлось выявлять и устранять. Что это было? Как вы её обнаружили? Каково было решение?</p><p>— Расскажите о каком-нибудь фрагменте кода, который вам нужно было написать в сжатые сроки. Как вы это делали? Получилось ли у вас и почему?</p><p>• Преданность.</p><p>— Какая часть вашего предыдущего проекта была самой сложной? Как вы к этому относились? В чём заключалась ваша роль? Что получилось в результате?</p><p>— Расскажите о ситуации, когда ваш проект должен был реагировать на внешние воздействия. Что было причиной? Какова была реакция команды? Какова была ваша реакция?</p><p>• Отношение к делу.</p><p>— Опишите последний случай, когда вы не уложились в сроки. Что случилось? Как вы реагировали? Что произошло потом?</p><p>— Опишите последний случай, когда вы оказались в затруднительном положении. Из-за чего? Как вы реагировали? Как вы вышли из положения?</p><p>• Поведение.</p><p>— Опишите последний случай, когда вы отвлеклись от своих дел, чтобы помочь кому-то другому. Почему вы это сделали? Каков был результат?</p><p>— Расскажите о ситуации, когда вы делали дополнительную работу, хотя вас об этом не просили и никто не знал, что вы это делаете.</p><p>• Умение работать в команде.</p><p>— Опишите самого сложного во взаимоотношениях человека, с которым вам приходилось работать. Что делало таким сложным общение с ним? Какова была ваша реакция? Как вы к этому относились?</p><p>— Каковы наиболее важные принципы плодотворной работы с другими людьми? Почему? Приведите примеры, подтверждающие ваше мнение.</p><p>• Жажда знаний.</p><p>— Как вы поддерживаете свои знания? Какие книги или журналы вы читаете, какие выставки посещаете?</p><p>— Опишите, что сейчас происходит на рынке с продуктом X. Что может случиться в дальнейшем?</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Один из любимых вопросов наших специалистов: «Есть ли у вас дома компьютер, пригодный для разработки?» Если у кандидата его нет, он, как правило, не интересует наших разработчиков. Они ищут фанатов своего дела, готовых потратить на него своё личное время и деньги, и писать программы бесплатно. Ищут себе подобных.</emphasis></p><empty-line/><subtitle>Обратная связь и завершение собеседования</subtitle><p>Не действуйте в одиночку. Поддерживайте обратную связь с другими членами команды, проводящей собеседование. Обсуждайте с ними все «за» и «против» по данному кандидату, а также вопросы, требующие дальнейшего изучения. Не пытайтесь переубедить друг друга — ограничьтесь простым обсуждением в рамках своей компетентности.</p><p>Иногда становится совершенно очевидным, что кандидат не годится. То ли он не соответствует тому, что написано в его резюме, то ли из его заявлений вытекает, что он не вписывается в коллектив. Не бойтесь прервать собеседование, если стало ясно, что кандидат у вас работать не будет. Наше правило: если двое согласны, что лучше не продолжать собеседование, они его кончают — какой смысл попусту тратить время?</p><subtitle>Тестирование кандидата</subtitle><p>Проверка возможностей кандидата может дать очень наглядные результаты. Для начинающих и малых компаний тестирование, позволяющее больше узнать кандидата, чем интервью, зачастую является важным шагом, предшествующим приёму на работу. Тестирование не должно требовать большого объёма внешней вспомогательной информации. Вместе с тем тест должен быть достаточно сложным, чтобы можно было увидеть, как кандидат решает трудные проблемы.</p><p>Зачастую наиболее важная часть теста — не тест как таковой, а реакция на него. Не паникует ли кандидат? Не сдаётся ли он через пять минут? Находит ли он творческое или уникальное решение? Прилагает ли усилия? Не сломило ли его то, что он не смог закончить тест или не нашёл ответа?</p><p>Многие считают, что собеседование — порядочный стресс и без тестирования. Может быть, но работа в среде разработки ПО — стресс ещё больший. Вы должны быть уверены, что ваш человек до определённой степени умеет справляться со стрессами.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Многие годы мы предлагаем одни и тот же программистский тест каждому разработчику. Он не требует никакого оборудования или обращения к справочникам. Кандидатов просят написать программу, отображающую на экране свой собственный исходный текст, не обращаясь к чтению файлов. Хотя для многих кандидатов этот тест оказался сложным, он позволил многое в них открыть. Кое-кто сдавался через пару минут, другой присылал ответ потом, поскольку не нашёл решения во время собеседования. Один даже позвонил из самолёта, возвращаясь с собеседования! Не такие ли люди вам нужны?</emphasis></p><empty-line/><subtitle>Примеры разработок</subtitle><p>Другой способ тестирования кандидатов — анализ примеров их разработок. Многие разработчики пользовательского интерфейса, технические писатели, специалисты по эргономике и программисты могут запросто представить вам такие образцы. Скажем, разработчики пользовательского интерфейса и эргономисты могут продемонстрировать снимки экранов поставляемых продуктов, а технические писатели — документацию или справочные файлы, над которыми они работали. У тестировщиков зачастую есть их старые планы тестирования или другая вспомогательная документация. Внимательно ознакомившись с предыдущими работами, вы сможете получить хорошее представление о предыдущем опыте и способностях кандидата. Когда вы не знаете, как поступить с кандидатом, образцы его разработок могут направить вас в нужном направлении.</p><subtitle>Привлечение кандидата</subtitle><p>При положительных результатах собеседования вы начинаете рассматривать кандидата как явного претендента на место. Теперь вы должны суметь объяснить, почему эта должность, эта компания и эта рабочая обстановка — именно то, что ему нужно. У хорошего кандидата предложений хватает, поэтому важно уметь кратко описать преимущества, которые он получит, работая на вас.</p><p>Чтобы привлечь кандидата, задайте себе следующие вопросы относительно проекта, группы и компании;</p><p>• что вы предлагаете в плане технологий?</p><p>• над какими продуктами будет работать кандидат?</p><p>• как можно охарактеризовать компанию, в которой будет работать кандидат?</p><p>• в чём уникальность предложения?</p><p>• какие уникальные преимущества есть у предлагаемой рабочей обстановки?</p><p>Заметьте: о зарплате и льготах в вашем предложении ни звука. О них я скоро расскажу. Вам не нужны люди, рассматривающие работу только через призму зарплаты. Прежде чем переходить к цифрам, нужно убедиться, что кандидат интересуется работой.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>В NuMega все аргументы в пользу компании абсолютно чётко определены, и все их знают наизусть. Многих кандидатов это завораживает.</emphasis></p><p>• <emphasis>Вопрос: что вы предлагаете в плане технологий?</emphasis></p><p><emphasis>Ответ: Windows-программирование на нижнем уровне.</emphasis></p><p>• <emphasis>Вопрос: над какими продуктами будет работать кандидат?</emphasis></p><p><emphasis>Ответ: средства разработки и отладки.</emphasis></p><p>• <emphasis>Вопрос: как можно охарактеризовать компанию, в которой будет работать кандидат?</emphasis></p><p><emphasis>Ответ: стремительно развивающаяся коммерческая компания — поставщик ПО.</emphasis></p><p>• <emphasis>Вопрос: в чём уникальность предложения?</emphasis></p><p><emphasis>Ответ: применение передовых закрытых технологий Microsoft и Intel; работа в элитарной команде разработчиков.</emphasis></p><p>• <emphasis>Вопрос: каковы уникальные преимущества предлагаемой рабочей обстановки?</emphasis></p><p><emphasis>Ответ: непринуждённая обстановка, ориентированная на комфорт разработчиков, сочетающая работу и отдых.</emphasis></p><empty-line/><subtitle>Окончательное решение</subtitle><p>Когда придёт время принять решение, не забудьте выяснить мнения каждого. Соберите всех заинтересованных лиц, чтобы обсудить их соображения и наблюдения. Это позволит выяснить одну из трёх вещей:</p><p>• вы нашли победителя;</p><p>• вы не нашли победителя;</p><p>• не ясно, кого вы нашли — мнения разделились.</p><p>Сделайте предложение кандидату, только если понятно, что вы имеете дело с победителем — не нужно лишнего риска. Если после многочисленных дискуссий у какого-то члена команды остаются серьёзные возражения, лучше остановиться. Важно учитывать мнение каждого члена команды. Особенно важно не вводить кандидата в команду насильно. Маловероятно, что команда, участвовавшая в собеседовании и процессе отбора, примет и будет помогать человеку, который ей не подходит.</p><subtitle>Дополнительные усилия</subtitle><p>Когда вы кончите собеседования и убедитесь, что хотите взять кандидата, может возникнуть ситуация, требующая дополнительных действий с вашей стороны. Иногда кандидаты рассматривают несколько предложений, или у них остаются какие-то сомнения или вопросы, которые не могут разрешить только специалисты по подбору кадров. Тогда вам может потребоваться человек, умеющий доводить сделки до конца, который снимет последние вопросы и сомнения колеблющегося кандидата. Он может позвонить ему домой, пригласить на ранний завтрак или поздний ужин и доверительно с ним поговорить. Само собой, тот факт, что вы уделяете особое внимание кандидату, скажет ему о том, как он для вас важен, что в свою очередь существенно увеличит ваши шансы заполучить этого кандидата.</p><subtitle>Предложение</subtitle><p>Когда приходит пора делать кандидату предложение, действуйте быстро и предлагайте солидные начальные условия. Нужно продемонстрировать кандидату, что он является важной частью команды. Не забывайте: вы берёте на работу только лучших и времени терять не намерены!</p><p>Я очень рекомендую предлагать солидную базовую зарплату и поощрения, стимулирующие производительность. Обычно это делается в виде премий и некоторой доли акций в соответствии с тем уровнем вклада в общее дело, который вы ожидаете от нового сотрудника.</p><subtitle>Дальнейшие шаги</subtitle><p>Если кандидат не принял вашего предложения сразу же, будьте готовы и дальше работать с ним. Ещё раз: у талантливых людей масса выгодных предложений. Нельзя сделать предложение и на этом успокоиться. Сделав предложение, шлите кандидату электронную почту, письма, звоните. Не теряйте с ним контакт на этой критической стадии. Если поступили новые предложения, возникли другие вопросы или осложнения, вы должны о них знать. Если вы не получаете ответа ещё несколько дней — все равно продолжайте и доведите дело до конца.</p><subtitle>Если вы упустили кандидата</subtitle><p>Принятие решения — процесс эмоциональный, здесь и мелочи могут сыграть определённую роль. Когда кандидат говорит «нет», убедитесь, что на то есть серьёзные причины, а не какие-то легко разрешаемые пустяки. Для этого нужно разобраться, почему предложение отклонено. Не успокаивайтесь, услышав о «лучшем предложении». Нужно понять, что лежит за этим ответом.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>У нас как-то был хороший кандидат на должность тестировщика, отказавшийся от нашего предложения по «семейным обстоятельствам». Поговорив с ним, мы выяснили, что он обещал свозить свою семью в диснеевский парк. Он думал, что у него не будет свободного времени из-за жёсткого графика, связанного с выпуском нашего продукта. Вообще-то он был прав — нам были нужны люди, готовые сразу приступить к работе и довести её до конца. Но, узнав причину отказа, мы обсудили ситуацию с руководством и согласились, что он — ценное дополнение к нашей команде и достоин того, чтобы учесть его «семейные обстоятельства»</emphasis></p><p><emphasis>В другом случае мы сделали предложение прекрасному разработчику, который затем решил продолжать работу над своим текущим проектом, так как в нём была нужда и он должен был с этим примириться. Мы, конечно, огорчились, но оценили его позицию и выразили надежду, что он свяжется с нами, завершив проект. Мы не пытались обсуждать с ним его обязательства, нельзя убеждать человека, чтобы он отказался от тех ценностей, ради которых мы его сами принимаем на работу. Вдруг, оказавшись в затруднительном положении, он снова нам позвонил, и мы взяли его на работе. Мы готовы были его ждать, уверенные, что он будет так же предан нам, как бывшему работодателю.</emphasis></p></section><section><title><p>Удерживание сотрудников</p></title><p>Набрав людей, важно удержать их компании. Есть три основные группы причин, по которым люди остаются у своего работодателя.</p><p>• <emphasis>Профессиональные</emphasis></p><p>Хорошие работники любят работать. Они очень гордятся своим делом и хотели бы видеть в нём что-то значительное. Люди должны знать, что их работа важна и по достоинству оценивается. Им нужно знать: их компания выделяется среди других и они внесли свою лепту её успех. Важно отдавать себе отчёт в наличии таких потребностей и обеспечить обратную связь как с отдельными людьми, так и с группами.</p><p>С другой стороны, даже если у вас важнейший проект в мире, надо время от времени давать сотрудникам возможность заниматься новыми вещами. Новые интересные задачи, новые коллеги и технологии, с которыми они столкнутся на новом месте, не позволят им потерять интерес к работе.</p><p>• <emphasis>Финансовые</emphasis></p><p>Исследования показывают, что деньги — не главная причина смены работы. Хотя, конечно, если у вас работают суперпрофессионалы, платить им нужно хорошо. Оплата должна включать базовую зарплату, премии за особые достижения и периодические выплаты, стимулирующие заинтересованность в долговременном успехе компании. Такая схема оплаты не даёт сотрудникам расслабляться и удерживает их, если акции компании растут.</p><p>Талантливые люди редко испытывают трудности с поиском высокооплачиваемой работы. Но если вы предлагаете больше среднего, люди считают, что вы их цените высоко, и даже более солидная зарплата в других местах становится для них не такой привлекательной. Риск потерять человека из-за денег будет меньше, если вы и другими способами демонстрируете, что вы его цените. Если же его интересуют только деньги, это, вероятно, не лучший выбор.</p><p>• <emphasis>Социальные</emphasis></p><p>Рабочее место, являющееся частью социальной среды, может чудесным образом влиять на удерживание сотрудника. Если люди общаются со своими коллегами и довольны рабочей обстановкой, очень маловероятно, что они захотят поменять работу (если при этом удовлетворены их профессиональные и материальные потребности). Нельзя недооценивать удобство офиса и мощность множества компьютеров, находящихся в распоряжении каждого члена коллектива. Добавьте сюда заботу о здоровье и отдыхе, и у вас — рецепт сплочённого коллектива.</p><subtitle>Методики удерживания сотрудников</subtitle><p>Лучший способ сохранить работников — уделять одинаковое внимание всем трём рассмотренным сферам. Хотя легче достичь превосходства в какой-то одной области, реальные выгоды компания получит, обеспечив баланс между всеми тремя. Вот некоторые рекомендации, как достичь такого баланса.</p><p>• <emphasis>Профессиональная сфера.</emphasis></p><p>— Убедитесь, что люди получают новые навыки и пробуют что-то новое.</p><p>— Люди должны знать, что они отвечают за свою работу.</p><p>— Люди должны осознавать важность своих продуктов и проектов.</p><p>— Хвалите людей как лично, так и публично.</p><p>— Чаще переводите людей из одной группы в другую, чтобы обеспечить их рост и взаимозаменяемость.</p><p>— Узнавайте о целях карьеры своих сотрудников и обеспечивайте их карьерный рост.</p><p>• <emphasis>Финансовые условия.</emphasis></p><p>— Зарплата и другие выплаты талантливым сотрудникам должны быть выше средних по отрасли.</p><p>— Выдавайте премии за выдающиеся достижения.</p><p>— Премируйте ведущих сотрудников акциями компании.</p><p>• <emphasis>Социальная сфера.</emphasis></p><p>— Прикрепляйте к новичкам старых сотрудников, чтобы они по-дружески помогали им прижиться в коллективе.</p><p>— Организуйте внеурочные мероприятия (спортивные игры, походы в кино).</p><p>— Заботьтесь о социальных контактах между членами коллектива.</p><p>— Поощряйте социальную активность как на рабочем месте, так и вне его, не рассчитывайте лишь на вечеринки по большим праздникам!</p></section><section><title><p>Типичные проблемы и их решение</p></title><p>Далее мы обсудим ряд типичных проблем и вопросов, возникающих при использовании описываемых здесь методик, а также их решения.</p><subtitle>Собеседование: проблемы и решения</subtitle><p>• <emphasis>Слабые методики и подходы</emphasis></p><p>Это очень распространённая проблема. Большинство интервьюеров или новички, или плохо справляются со своим делом. Люди, проводящие собеседование с кандидатами, должны иметь соответствующие знания и быть обучены (хоть <emphasis>неформально) — </emphasis>они должны знать, что и как делать. Если сотрудник оценивает кандидатов просто по интуиции и лишь пожимает плечами, когда его просят обосновать своё решение, вы кончите тем, что будете нанимать не тех людей и упускать достойных кандидатов.</p><p>• <emphasis>Плохо описанная вакансия</emphasis></p><p>Собеседование должно проводиться для конкретной вакансии (если только это не ознакомительное собеседование). Если вы не знаете функциональных обязанностей вакантного поста, вы получите совершенно разные мнения членов группы, проводящей собеседование, относительно приемлемости кандидата. Чёткое описание работ для всех вакансий должно быть доступно всем интервьюерам задолго до прихода кандидата</p><p>• <emphasis>Слишком много времени уделяется неквалифицированным кандидатам</emphasis></p><p>Не тратьте на кандидата больше времени, чем нужно. Совершенно нормально дать знать кандидату, что он не подходит. Продумайте способ досрочного завершения собеседования. Не тратьте своего времени и времени кандидата на собеседование, которое не приведёт к положительным результатам.</p><p>• <emphasis>Чрезмерная или недостаточная реклама собственных возможностей</emphasis></p><p>Некоторые организации не предоставляют о себе достаточных сведений. Кандидата интервьюируют так дотошно, что у него не остаётся возможности узнать о вакансии. У него остаётся масса вопросов, и он не знает, подходит ли ему эта вакансия. Другие организации слишком много себя рекламируют и по сути не интервьюируют кандидата. Вы должны знать сильные стороны компании и рассказать о них в подходящий момент, но не в процессе собеседования.</p><p>• <emphasis>Нереализованные возможности</emphasis></p><p>Вам нужно иметь пару людей, знающих, как довести работу с кандидатом до конца. Кандидат не должен уйти, не получив ответа на важные вопросы или не совсем понимая, что ему предлагается. У вас должен быть ответственный сотрудник, который может ответить на все вопросы, если кандидат не принял предложения. Он должен ориентироваться в широком круге проблем, включая видение будущего компании, возможности роста по службе и уметь сравнивать и противопоставлять альтернативные предложения.</p><p>• <emphasis>Медлительность</emphasis></p><p>Хороших кандидатов трудно найти. Если вы уверены, что нашли достойного, — действуйте быстро. Не стесняйтесь пригласить кандидата на интервью вечером или предложить прилететь на выходные. Будьте готовы провести собеседование в тот же день. Я не предлагаю спешить с собеседованием, но бывают обстоятельства, требующие быстрого принятия решения, в том числе во внеурочное время.</p><p>Дело нужно поставить так, чтобы вы могли сразу принять кандидата на работу. Время исключительно важно при поиске талантливых людей, и почти всегда вам придётся конкурировать с другими компаниями. Нет ничего неприятнее, чем найти прекрасного кандидата, а потом услышать, что он принял другое предложение, пока вы раскачивались.</p><subtitle>Сохранение сотрудников: проблемы и решения</subtitle><p>• <emphasis>Неправильный баланс</emphasis></p><p>Большинство проблем с удерживанием сотрудников связано с неправильным балансом профессиональных, финансовых и социальных факторов. Вы не сможете долго жертвовать чем-то одним в пользу другого. Нужно на регулярной основе обеспечивать баланс между профессиональной удовлетворённостью, денежным стимулом и социальной поддержкой. Не ждите, когда начнут возникать проблемы.</p><p>• <emphasis>Текучесть кадров</emphasis></p><p>Текучка существует всегда. Меняются личные обстоятельства и приоритеты. Люди уходят по причинам, которые вы не можете контролировать: родился ребёнок, нужно быть поближе к родным, далеко до работы… С другой стороны, текучка может указывать на серьёзные проблемы в коллективе или организации. Чтобы оставаться в курсе причин текучести кадров, беседуйте с людьми перед их увольнением и прислушивайтесь к их замечаниям. Если обнаруживается внутренняя проблема, спросите других сотрудников, разделяют ли они такую точку зрения. В больших организациях неплохо вести список причин увольнения сотрудников. Эти сведения помогут отслеживать тенденции и принимать соответствующие меры.</p></section></section><section><title><p>Глава 3</p><p>Организация проекта</p></title><section><p>Как бы ни были талантливы люди, они всё равно не смогут работать с максимальной эффективностью, если их не организовать правильно. Проекты часто страдают от недостатка организованности и неясностей в распределении ролей и обязанностей. Каждый должен знать свой манёвр в общем контексте проекта.</p><p>В этой главе мы подробно разберём модель организационной структуры, используемой в NuMega, а также рассмотрим роли, обязанности и навыки, необходимые участникам группы в рамках этой модели.</p></section><section><title><p>Модель организационной структуры компании NuMega</p></title><p>Программы, как правило, создаются коллективами, а не одиночками. Команда разработчиков — это группа людей с различными техническими навыками, работающих над реализацией общего проекта. Поскольку разработать ПО довольно сложно, в команде требуются специалисты с самыми разными навыками и способностями, необходимыми для создания продукта. Вот какие специалисты должны быть в группе:</p><p>• <emphasis>основной состав группы — </emphasis>специалисты, полностью занятые в создании нового программного продукта:</p><p>— менеджеры проекта;</p><p>— программисты;</p><p>— тестировщики;</p><p>— разработчики документации;</p><p>— инженерные психологи;</p><p>— технологи по разработке ПО;</p><p>• <emphasis>вспомогательная группа — </emphasis>специалисты, не занимающиеся созданием программ, но, тем не менее, играющие важную роль в реализации проекта:</p><p>— группа менеджмента и маркетинга продукта;</p><p>— специалисты по технической поддержке ПО;</p><p>— администраторы бета-тестирования.</p><p>Очень важно, чтобы перечисленные функциональные подразделения участвовали в работе над проектом с самого начала. Чем раньше люди смогут понять суть требований к продукту и принять участие в их критическом анализе, тем лучше подготовятся к исполнению собственной миссии и ощутят свой вклад в успех проекта. Кроме того, чтобы завершить создание продукта в срок, все перечисленные подразделения должны работать параллельно на протяжении всего цикла разработки. Решение этой задачи будет описано в главе 11 — там мы рассмотрим включение в график проекта взаимно скоординированных во времени промежуточных этапов.</p><p>С другой стороны, если при подборе кадров какие-либо функциональные подразделения будут не (недо-) укомплектованы, то реализовать такие важные условия разработки ПО, как глубокое понимание задач, синергизм в работе и постепенный прогресс, будет невозможно. Я не настаиваю на том, чтобы все подразделения были полностью укомплектованы к первому дню работы над проектом, но по крайней мере их представители (хочется надеяться, что это будут ведущие специалисты) должны работать над проектом с самого начала. Нельзя недооценивать как важность этого требования, так и трудность его реализации.</p></section><section><title><p>Управление проектом</p></title><p>В качестве примера структуры оптимальной системы управления небольшой компании я подробно остановлюсь на организации управления в NuMega, позволившей ей справиться с трудностями. Как и любой молодой компании (и большинству начинающих групп разработчиков), нам требовалось выполнить большую работу в сжатые сроки, при этом ресурсы были сильно ограничены. Мы знали: чтобы воспользоваться всеми преимуществами талантливых сотрудников, которых нам удалось привлечь с таким трудом, необходимо их эффективно организовать. Нужна такая структура организации, которая позволила бы оперативно реагировать на возникающие трудности, сводить к минимуму разного рода издержки и которую можно было бы расширить в дальнейшем. Чтобы реализовать сформулированные требования, мы решили задействовать простую модель структуры организации, в которой за все аспекты разработки продукта отвечает один менеджер проекта. В сферу его ответственности входит наблюдение за всеми программистами, тестировщиками, технологами и разработчиками документации, т.е. за основным составом группы. Важнее всего, что все способные сотрудники были собраны под началом одного менеджера.</p><p>Остальные сотрудники (группа технической поддержки, администраторы бета-тестирования, группа менеджмента и маркетинга продукта) не отчитывались перед менеджером проекта, но работали с ним в прямом контакте для решения своих проблем и получения всего необходимого для работы. Этот подход дал неплохие результаты, так как приоритетной обязанностью каждого из вспомогательных подразделений было решение конкретной задачи (анализ рынка, формирование ценовой политики, обработка входящих сообщений, реклама и т.д.) и не предполагало повседневного участия в разработке продукта. Поскольку же все подчинялись одному менеджеру проекта, взаимодействие функциональных подразделений стало заметно проще и понятнее.</p><p>Хотя избранная нами структура организации работала хорошо, применение следующих принципов способствовало дальнейшему повышению её эффективности.</p><p>• <emphasis>Гибкое использование ресурсов</emphasis></p><p>Менеджер проекта мог выделять нужные ресурсы и направлять группу специалистов для решения любой отдельной проблемы, устранения той или иной неполадки или поддержания какой-либо инициативы. Такая система позволила менеджеру проекта распределять ресурсы в соответствии с текущими внутренними приоритетами проекта и обеспечила полноту использования и оперативную балансировку ресурсов согласно быстро меняющимся потребностям проекта.</p><p>• <emphasis>Ответственность за распределение специализированных ресурсов</emphasis></p><p>Все ресурсы находились в руках его менеджера, а команда в полном составе работала над проектом с первого и до последнего дня. Таким образом, была группа людей с единым набором приоритетов, работавших над решением единой задачи и под руководством одного человека. Такая структура позволяла привлечь каждого сотрудника к непосредственному участию в проекте уже на начальных этапах работы, в результате каждый в большей мере испытывал чувство ответственности и причастности к достигнутым результатам. Люди лучше представляли себе все особенности и ограничения проекта, а также причины тех или иных решений, что позволяло лучше спланировать проект и организовать тестирование, а также обеспечить проект более качественной документацией.</p><p>• <emphasis>Централизованное принятие решений</emphasis></p><p>Поскольку проект целиком находится в ведении одного менеджера, он может оперативно принимать критически важные решения, разрубая «Гордиевы узлы», когда не удалось достичь согласия.</p><p>• <emphasis>Более чёткое взаимодействие</emphasis></p><p>Каждый, у кого возникают вопросы или трудности, может обсудить их с менеджером проекта. Таким образом, простая и понятная схема взаимодействия участников позволяла эффективно устранять затруднения, возникающие у участников как основной, так и вспомогательной групп.</p><p>• <emphasis>Инициативная ответственность</emphasis></p><p>Менеджер проекта — это не просто управляющий, но один из тех, кто заинтересован в успехе продукта. Он должен быть в курсе конъюнктуры и тенденций рынка, а также чётко представлять ценность функций программы. Без этих знаний он не сможет оперативно оценивать ход реализации ПО и обеспечить выполнение работы на должном уровне. Менеджер проекта работает в одной упряжке с менеджером продукта, формулирующим требования рынка и курирующим экономические аспекты создаваемого продукта. Оба вносят свой вклад во всех областях: в формирование политики лицензирования, ценообразование, продвижение и сбыт продукта. В конечном счёте они вместе отвечают за успех продукта и наделены полномочиями принимать ключевые решения. Обладая большой властью, они могут быстро принимать нужные решения. В то же время участники команды, зная, что они работают непосредственно с теми, кто принимает решения, в курсе их идей и уверены в том, что их работа не просто нужна, но имеет решающее значение для успеха проекта.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Обычно в NuMega самое важное собрание, посвящённое проекту, — вводное. Всем участникам проекта, собравшимся в одной комнате, говорили, что продукт может быть создан только с участием каждого из них — все должны посвятить себя реализации проекта. Пока проект не будет отправлен заказчику, каждый должен выполнять свои обязанности. Если проект будет успешным и заказчик его одобрит, это будет результатом общих усилий команды, а если проект будет сорван — опять же в этом будут виноваты все. Методика, в рамках которой команда получала прямые полномочия, позволяющие ей принимать большинство решений, необходимых для работы, приносила восхитительные результаты.</emphasis></p><empty-line/><subtitle>Ведущие специалисты</subtitle><p>Мы также назначили ведущих специалистов в каждом из функциональных подразделений. Ведущий специалист является экспертом, возглавляющим работу во вверенной ему области. На протяжении всего цикла он очень тесно сотрудничает с менеджером и ведущими специалистами других подразделений. Ведущие специалисты играют важную руководящую роль, управляя разрешением проблем и принятием решений во вверенных им ключевых областях. Такая система позволила без труда увеличить число сотрудников функциональных подразделений, поскольку их возглавлял человек, управляющий созданием данной части продукта. Связи между менеджером проекта и ведущими специалистами функциональных подразделений показаны ниже (рис. 3-1).</p><empty-line/><image l:href="#pic31.jpg"/><p>Рис.3-1. Связи между менеджером проекта и ведущими специалистами функциональных подразделений.</p><p>Поскольку мы нанимали высококвалифицированных и опытных специалистов, они могли работать почти без надзора менеджера. Их нужно было лишь познакомить с обязанностями и планом. Важнее всего, что такая модель позволила держать ключевые ресурсы под контролем одного человека — менеджера, который непрерывно был в курсе повседневной работы группы.</p></section><section><title><p>Роли и обязанности</p></title><p>Рассмотрим основные роли и обязанности лидеров функциональных подразделений, участвующих в создании продукта.</p><subtitle>Менеджер проекта</subtitle><p>Совершенно ясно, что менеджер играет ключевую роль в реализации проекта. Его функционал включает следующие многочисленные роли и обязанности.</p><p>• <emphasis>Подбор кадров и управление ими</emphasis></p><p>Менеджер проекта отвечает за создание команды и управление её составом. Он также курирует кадровое обеспечение, планирование карьеры, кадровую политику, анализ и проверку работы сотрудников и поддержание «боевого духа» группы. В его обязанность также входит найм новых сотрудников, повышение мастерства и развитие навыков специалистов, а также поддержание мотивации и целенаправленной деятельности людей во время работы над проектом.</p><p>• <emphasis>Формулирование и исполнение плана проекта</emphasis></p><p>Формулированием и исполнением плана проекта руководит менеджер проекта. Он подбирает группу специалистов, формулирующих и согласовывающих требования, а также отслеживающих их выполнение. Когда список требований готов, менеджер составляет план, регламентирующий все действия, необходимые для реализации проекта: программирование, тестирование, разработку документации, работу технологов по разработке ПО и инженерных психологов. План также учитывает другие ключевые аспекты создания продукта, а именно: составление графика работы, реализацию технологии программирования, подбор кадров, а также неопределённости и риск. Это не значит, что все решения принимает только менеджер проекта, но именно он отвечает за то, чтобы довести создание всех частей продукта до конца во взаимодействии с ключевыми участниками проекта, и обязан донести общий план до каждого участника группы. Подробнее все эти вопросы мы рассмотрим во второй части книги.</p><p>При реализации функций ПО во время разработки постоянно приходится идти на компромисс. Именно менеджер проекта отвечает за то, чтобы соответствующие решения принимались своевременно и были согласованы с командой, которая должна быть в курсе принятых решений. Если корректировки приведут к коренным переменам в направленности продукта, он должен довести решение и все его последствия до сведения каждого, кого оно затрагивает.</p><p>Поскольку менеджер проекта не только отвечает за реализацию функций продукта, кадровое обеспечение и балансировку ресурсов проекта, но и курирует график реализации всего проекта, именно он отвечает за соблюдение графика работы над проектом и обязан вносить соответствующие коррективы в случае возникновения проблем.</p><p>Менеджер проекта создаёт главный график работ на основе сведений, поданных всеми участниками проекта. Как правило, в соответствии с этим графиком работа над проектом подразделяется на ряд промежуточных этапов и базовых уровней. Менеджер проекта должен непрерывно следить за исполнением графика, вносить нужные изменения и сообщать о них группам разработчиков и другим группам, в сотрудничестве с которыми ведётся работа (группы менеджмента, технической поддержки и администраторов бета-тестирования), а также верхнего эшелона управления. Подробнее мы поговорим о планировании в главе 11.</p><p>• <emphasis>Руководство командой</emphasis></p><p>Менеджер проекта отвечает за плавное и эффективное исполнение разработки продукта. Менеджер проекта устраняет возникающие препятствия и обеспечивает всё необходимое для успешной работы команды. Он должен определять проблемные области, работать над ускорением решения проблем и поддерживать команду в состоянии сосредоточенности и гармонии. Он также должен быть готов выступить в роли инструктора или наставника, обладающего достаточными знаниями и опытом в разных областях, чтобы оценить успехи команды и при необходимости помочь ей.</p><p>• <emphasis>Обеспечение связи между подразделениями</emphasis></p><p>Менеджер проекта — главное связующее звено между разработчиками и группой менеджмента и маркетинга. Он отвечает за сбор пожеланий в этих группах и воплощение их в плане проекта. Во время выполнения проекта он также отвечает за доведение возникших трудностей или изменений в плане проекта до сведения менеджера продукта и менеджера по маркетингу. Кроме того, проанализировав планы менеджмента и маркетинга, менеджер продукта должен дать свой отзыв о них.</p><p>Менеджер проекта также является главным каналом связи между группами разработчиков, технической поддержки и администраторов бета-тестирования. Он должен решать любые критические проблемы, возникающие как во время тестирования продукта клиентами (бета-тестирования), так и после выпуска;</p><p>• <emphasis>Обеспечение готовности продукта</emphasis></p><p>Менеджер проекта также отвечает за создание максимально завершённого и качественного продукта. Таким образом, ответственность за достижение всех целей, поставленных перед программистами, разработчиками документации и инженерными психологами ложится в конечном счёте на плечи менеджера проекта.</p><subtitle>Программисты</subtitle><p>Можно выделить три основных категории технических специалистов: ведущий разработчик (программист), ведущий программист, отвечающий за реализацию определённой функции и рядовой программист (рис. 3-2).</p><image l:href="#pic32.jpg"/><p>Рис. 3-2. Связи между ведущим разработчиком, ведущими программистами, ответственными за реализацию определённых функций ПО, и рядовыми программистами.</p><subtitle>Ведущий разработчик</subtitle><p>Это главный специалист по разработке ПО. Эту должность, как правило, занимает один человек. Поскольку он играет ключевую роль в разработке ПО, занимающий эту должность специалист должен быть достаточно зрелым и квалифицированным, чтобы справиться со сложными техническими и кадровыми проблемами, постоянно возникающими во время цикла разработки. В число его обязанностей входит:</p><p>• наблюдение за соблюдением архитектурных и технических спецификаций продукта;</p><p>• подбор ключевых технологических инструментов и стандартов;</p><p>• диагностика и разрешение всех технических проблем;</p><p>• выполнение роли технического инструктора и консультанта для участников проекта;</p><p>• наблюдение и контроль за работой групп разработчиков документации, тестировщиков и технологов;</p><p>• мониторинг состояния (ведение списка обнаруженных ошибок);</p><p>• подбор инструментов разработки, метрик и стандартов и наблюдение за их использованием;</p><p>• ну и, конечно, программирование, программирование и ещё раз программирование.</p><subtitle>Ведущие программисты, отвечающие за реализацию отдельных функций</subtitle><p>Отвечают за реализацию отдельных функций продукта, часто на основе конкретной технологии. Обычно определение функций формулируют довольно широко, например, «интеграция с IDE» или «разработка API доступа к БД». Обязанностями ведущих программистов, отвечающих за создание отдельных функций ПО, являются:</p><p>• согласование архитектурных вопросов с коллегами, ответственными за разработку других функций;</p><p>• формулирование требований к функциям и их критический анализ;</p><p>• проектирование функций;</p><p>• снабжение тестировщиков и разработчиков документации техническими материалами;</p><p>• ну и, конечно, программирование, программирование и ещё раз программирование.</p><subtitle>Рядовые программисты</subtitle><p>Работают над реализацией определённой функции ПО обычно под руководством ведущего программиста, ответственного за эту функцию. Они отвечают за реализацию конкретных аспектов этой функции, например, за «интеграцию в IDE окон X, Y и Z» или «написание для API баз данных методов create, update и delete». В круг их обязанностей входит:</p><p>• реализация функции;</p><p>• её тестирование;</p><p>• исправление ошибок в реализованной функции;</p><p>• помощь техническим писателям в документировании реализованной функции;</p><p>• помощь тестировщикам в испытаниях этой функции.</p><subtitle>Тестировщики</subtitle><p>Отвечают за составление и исполнение плана тестирования программы, создаваемой в рамках проекта. Чтобы обеспечить истинное партнёрство между теми, кто пишет код и теми, кто его тестирует, роли и обязанности группы тестировщиков должны быть «параллельны» обязанностям разработчиков.</p><p>Традиционно группы тестировщиков и разработчиков функционируют раздельно, обладая независимыми полномочиями в отношении качества ПО, иначе велика вероятность того, что события пойдут по сценарию хорошо известной сказки про лису, которой доверили охранять курятник. С другой стороны, наличие группы тестировщиков со своим менеджером, обладающим равными полномочиями с менеджером проекта, может привести к конфронтации. Со временем группы могут отдалиться друг от друга, и между ними могут возникнуть натянутые отношения, отравляющие любые начинания.</p><p>В NuMega удалось избежать обеих проблем, передав право окончательного решения вопросов о качестве ПО в руки менеджера проекта. Он должен предоставить качественный продукт, и именно с него спросят за любые проблемы с продуктом. Принимая решение о готовности продукта, ему приходится полагаться на результаты испытаний, проведённых группой тестировщиков. Такая структура организации (рис. 3-3) позволяет группе тестировщиков оставаться независимой, так как она является самостоятельным подразделением под руководством своего ведущего специалиста. Однако, будучи подотчётными тому же менеджеру, что и разработчики, они ощущают, что их воспринимают так же, как любых других участников группы, и обращаются с ними соответственно. Подробнее о тестировании будет сказано в главе 6.</p><image l:href="#pic33.jpg"/><p>Рис. 3-3. Связи между группами разработчиков и тестировщиков.</p><subtitle>Ведущий тестировщик</subtitle><p>Отвечает за организацию и исполнение тестирования ПО в период разработки. Он сам должен обладать хорошими навыками тестирования и быть способен возглавить других тестировщиков и направить их усилия в нужное русло. Его обязанности таковы:</p><p>• <emphasis>Составление плана тестирования продукта</emphasis></p><p>План тестирования регламентирует работы по испытанию программы, т.е, что, как и когда будет протестировано. Ведущий тестировщик также занимается решением дополнительных проблем, обеспечением возникающих потребностей и необходимых ресурсов.</p><p>• <emphasis>Исполнение плана тестирования</emphasis></p><p>Ведущий тестировщик отвечает за исполнение плана тестирования на протяжении всего цикла разработки. Он сравнивает результаты тестирования продукта со спецификациями базовых уровней и промежуточных этапов, определённых в графике разработки продукта, а также следит за тем, чтобы тестирование новых функций программы проводилось своевременно.</p><p>• <emphasis>Автоматизация испытаний</emphasis></p><p>Управление автоматизацией наиболее критических тестов согласно плану с целью ускорить тестирование. Испытание готовит и проводит группа, но ответственность за проведение испытания лежит на ведущем тестировщике.</p><p>• <emphasis>Проведение регрессивного тестирования</emphasis></p><p>Ведущий тестировщик следит, чтобы после каждой сборки программы проводилось её регрессивное тестирование. Лучше проводить эти тесты (известные также как базовые тесты) ночью, чтобы их результаты были готовы к утру, Ведущий тестировщик отвечает за ежедневный анализ результатов и регистрацию обнаруженных ошибок в системе слежения за ошибками.</p><p>• <emphasis>Выбор инструментов, метрик и стандартов для тестирования</emphasis></p><p>Во время реализации проекта ведущий тестировщик отвечает за выбор и использование инструментов, метрик и стандартов для тестирования, т.е, делает то же, что и ведущий разработчик для своей группы. Так, ведущий тестировщик отвечает за целостность данных в системе слежения за ошибками аналогично тому, как ведущий разработчик отвечает за целостность данных в системе управления исходным текстом.</p><subtitle>Инженер по автоматизации</subtitle><p>В основном занимается созданием автоматизированных тестовых заданий согласно плану. Этот специалист, как правило, обладает большим навыком работы с инструментами для автоматизации тестирования, написания сценариев и часто программирования. Перед инженерами ставится задача по автоматизации тестирования набора функций программы, и они концентрируются на тестировании некоторых частей продукта, работу которых можно описать количественно. Это позволяет им тесно сотрудничать с ведущими специалистами, отвечающими за разработку этих функций. Круг обязанностей инженера по автоматизации более узкий в сравнению с другими участниками группы, так как он должен обеспечить автоматизацию тестирования той или иной функции лишь после завершения программирования. К его обязанностям относятся:</p><p>• планирование испытаний;</p><p>• автоматизация испытаний;</p><p>• оценка и выбор инструментальных средств.</p><subtitle>Рядовой тестировщик</subtitle><p>Отвечает за исполнение плана тестирования, составленного ведущим тестировщиком. Обычно тестировщику приходится играть роль пользователя программы, и он должен знать её функции, как свои пять пальцев. Он должен быть посвящён во все секреты конструкции программы и быть способным провести тестирование пользовательского интерфейса для его подгонки и шлифовки. В круг основных обязанностей этого специалиста входит:</p><p>• тестирование программы установки, всех функций и пользовательского интерфейса согласно плану тестирования;</p><p>• проведение автоматизированных испытаний;</p><p>• регистрация результатов автоматизированных испытаний и анализ обнаруженных неполадок;</p><p>• окончательное подтверждение устранения ошибки;</p><p>• подготовка среды для испытаний.</p><subtitle>Группа разработчиков пользовательской документации</subtitle><p>Обеспечивает пользователя справочными материалами: печатной документацией, электронной справочной системой, обучающими программами и карточками быстрой справки.</p><subtitle>Ведущий разработчик пользовательской документации</subtitle><p>Отвечает за составление плана создания документации для всего проекта. Опираясь на своё знание продукта и потребностей пользователей и принимая в расчёт доступные ресурсы, он составляет план, регламентирующий виды и сроки создаваемой документации.</p><p>Ведущий разработчик пользовательской документации отвечает за определение стандартов документации (и участвует в их создании) и следит, чтобы в продукте были отражены самые последние изменения в правилах и технологиях написания технической документации.</p><subtitle>Рядовой разработчик пользовательской документации</subtitle><p>Помимо написания и производства документации, группа разработчиков пользовательской документации отвечает за удобство в работе и качество ПО. Часто недостатки ПО заметны прежде всего именно техническому писателю, так как, работая с продуктом, ему приходится ставить себя на место пользователя. Приведу пару примеров:</p><p>• Поскольку разработчик пользовательской документации создаёт руководство, описывающее использование продукта, часто именно он первым обнаруживает несогласованности, проблемы с функционированием продукта и недостатки в реализации функций. Нет ничего необычного, когда технический писатель заявляет: «Да, на собрании, посвящённому анализу спецификаций, у меня никаких вопросов не возникло. Но теперь, когда я начал писать руководство пользователя, мне ясно, что пользователю придётся выполнить целых десять действий, чтобы решить эту задачу, — чепуха какая-то!» Таким образом, он на ранних стадиях цикла разработки выполняет весьма ценную параллельную проверку удобства использования программы и даёт отзывы, позволяющие скорректировать недочёты.</p><p>• Разработчик пользовательской документации должен работать с программой практически ежедневно, чтобы точно задокументировать новые функции и идти в ногу с изменениями, вносимыми в программу. Регулярная работа с продуктом позволяет обнаружить проблемы с качеством на ранних стадиях цикла разработки, когда решать их ещё не так трудно. Хотя разработчики документации не могут заменить тестировщиков, они пытаются работать с фрагментами программы, собранными вместе, поэтому они могут обнаружить ряд важных ошибок, которые в противном случае всплывут гораздо позже. В этом смысле разработчик документации проводит дополнительную проверку качества продукта и часто даёт весьма реалистичную оценку его качества.</p><subtitle>Инженерные психологи</subtitle><p>Впечатление, которое оставит продукт у пользователя, критически важно для его успеха на рынке. Интерфейс, документация, упаковка — всё должно работать на то, чтобы создать у клиента положительное впечатление о продукте.</p><p>Мы в NuMega всегда были убеждены, что именно первые 20 минут общения с нашим продуктом определяют, примет ли его пользователь и будет ли продолжать с ним работать. Это явление получило название «первоначальное впечатление от работы с продуктом». Если продукт не оставил у пользователя положительного впечатления и не помог ему легко и быстро решить свои проблемы, маловероятно, что этот продукт будет регулярно использоваться или будет по-настоящему ценным для потребителя.</p><p>Инженерные психологи помогают справиться с этими проблемами. Ведущий специалист по инженерной психологии отвечает за перевод требований к проекту в фундаментальные задачи, которые должен решать пользователь, и далее в модель пользовательского интерфейса. Эти факторы оказались весьма существенными для организации оптимизации и определения других приоритетных направлений работы команды. Так, тестировщики концентрируют свои усилия на проверке ключевых задач, определённых группой инженерных психологов, а разработчики документации будут следить за тем, чтобы этим задачам было уделено наибольшее внимание в учебниках и руководстве пользователя. Эти задачи, определяющие основную ценность предлагаемого продукта, непременно нужно завершить в срок и выделить для этого достаточно времени.</p><p>Этот момент имеет решающее значение: все участники группы должны знать, какие задачи наиболее важны для пользователя и как они должны быть реализованы в программе. Если кому-то в группе эти задачи будут неизвестны, вся группа рискует погрязнуть в бессмысленной работе. Приходилось ли вам видеть, как разработчики и тестировщики корпят над явно второстепенной функцией, когда главные функции программы работают плохо или вовсе не работают; или группы, завязшие в бесконечных спорах и конфликтах о пользовательском интерфейсе на завершающих этапах бета-тестирования? Скорее всего, в таких группах отсутствует единое понимание приоритетных потребностей клиента, и способ их реализации там никогда заранее не обговаривали. Основные принципы работы специалистов по инженерной психологии рассматриваются в главе 10.</p><p>Специалист по инженерной психологии должен:</p><p>• транслировать формулировки требований в ключевые задачи;</p><p>• разрабатывать дизайн пользовательского интерфейса (макеты диалоговых окон и т.д.) для решения этих задач;</p><p>• тестировать разработанный дизайн и согласовывать его с командой;</p><p>• определять, как сформировать положительное первоначальное впечатление от продукта;</p><p>• проводить подгонку и доводку пользовательского интерфейса;</p><p>• работать с заказчиком после выпуска ПО.</p><subtitle>Технологи по разработке ПО</subtitle><p>Обеспечивают работу базовых служб, необходимых для поддержания работоспособности принятой модели разработки ПО. Эту работу должны выполнять соответствующие специалисты или сами разработчики, даже если для этого придётся продлить календарный план. Не впадайте в самообман, думая обойтись без этой работы: выпустить ПО вовремя без неё не получится. Подробнее о работе технологов по разработке ПО см. главу 7.</p><p>В общем случае у технолога по созданию ПО три основные обязанности:</p><p>• <emphasis>Создание и сопровождение подходящей среды для сборки продукта</emphasis></p><p>Сборка программы — необходимый первый шаг, который должен быть завершён как можно раньше. Ежедневная сборка программы — ключ к успеху проекта, без неё невозможно воплотить многие концепции, изложенные в этой книге.</p><p>• <emphasis>Создание и сопровождение процедуры установки</emphasis></p><p>Чтобы извлечь все выгоды частой сборки программы, нужно, чтобы каждая новая сборка устанавливалась автоматически. Кроме того, установочную процедуру требуется сопровождать и обновлять по ходу цикла разработки, а также следить, чтобы для выполнения этой задачи было выделено достаточно ресурсов.</p><p>• <emphasis>Сопровождение и администрирование систем управления исходным текстом</emphasis></p><p>Важно, чтобы за сопровождение системы управления исходным текстом постоянно отвечал один и то же специалист. Об инструментах для управления исходным текстом см. главу 4.</p><subtitle>Группа менеджмента и маркетинга продукта</subtitle><p>С точки зрения технических подразделений, эта группа играет две роли; первая — сбор информации, а вторая — её выдача.</p><p>В рамках первой роли группа менеджмента и маркетинга продукта определяет приоритетные сегменты рынка, экономические и потребительские требования к продукту. Наличие у разработчиков ясных, сжатых, реальных и обоснованных экономических требований к продукту имеет решающее значение для его успеха. В дополнение к сбору сведений о необходимой функциональности продукта в обязанности этой группы входит формулирование требований к комплектности продукта, установочной программе, лицензированию и документированию.</p><p>С другой стороны, группа менеджмента и маркетинга помогает техническим подразделения представить продукт за пределами компании. Сюда относится реклама, обучение и оснащение необходимыми средствами специалистов по сбыту, аналитические совещания, пресс-релизы и брифинги, а также новости, публикуемые в Web.</p><p>Технические группы полагаются на группу менеджмента и маркетинга в распространении информации о своей работе; поддержка этой группы необходима, чтобы начать проект и обеспечить его успех на рынке. Вся работа технических специалистов пойдёт прахом, если специалисты по маркетингу не смогут сделать так, чтобы программный продукт заметили на рынке. Сотрудничество и командный дух в работе этих подразделений имеет решающее значение. Чем теснее они сотрудничают, чем в большей степени они единомышленники и чувствуют себя единым целым, тем больше шансов, что коррективы будут вноситься быстро и эффективно, повышая тем самым шансы на успех.</p><p>Между прочим, с отправкой программы заказчику работа над проектом не заканчивается. Проект можно считать завершённым, лишь когда продукт принесёт запланированную прибыль и решит поставленные перед ним экономические задачи. В конечном счёте успех определяется не фактом сдачи проекта, но завоеванием рынка.</p><subtitle>Группа технической поддержки</subtitle><p>Специалисту по технической поддержке, наверное, приходится чаще всех контактировать с клиентами после выхода продукта. Он изо дня в день является представителем группы разработчиков перед клиентами. Этот специалист играет очень важную и ценную роль не только для клиентов, но и для разработчиков. В частности, разработчики рассчитывают на помощь группы технической поддержки в решении следующих задач:</p><p>• формулирование требований к функциям программы с целью облегчения её технической поддержки в дальнейшем;</p><p>• привлечение внимания разработчиков к важным проблемам с качеством и реализацией функций во время бета-тестирования продукта и после его выхода;</p><p>• предоставление статистики поступающих обращений за технической поддержкой (упорядоченной по типу и степени серьёзности проблемы, а также по числу обращений) и демонстрация необходимости исправлений или изменений программы;</p><p>• помощь в решении проблем с пользовательским интерфейсом путём проверки ранних версий (альфа-версий) продукта, при заминках с тестированием и при исправлении ошибок — здесь группа технической поддержки выступает в роли независимого эксперта.</p><p>Чтобы справиться с этими задачами, следует назначить ведущего специалиста по технической поддержке разрабатываемого продукта. У него должны быть тесные связи с менеджером проекта и ведущими специалистами. Он будет участвовать в создании продукта с начала и до конца.</p><p>Во время разработки программы ведущий специалист по технической поддержке имеет доступ к исходным файлам, внутренней документации, планам и графикам. После отправки ПО заказчику он занимается решением неотложных проблем совместно с другими ведущими специалистами и регулярно предоставляет отчёты об успехах продукта в отрасли, подкреплённые данными, характеризующими продукт как с положительной, так и с отрицательной стороны.</p><p>Нельзя недооценивать важность группы технической поддержки. Она входит в состав технических подразделений и должна полностью интегрироваться в проводимую ими работу. Хорошая техническая поддержка позволяет преодолеть все недостатки продукта, обнаруженные после его выхода, и существенно уменьшить недовольство клиентов продуктом (если оно будет иметь место).</p><subtitle>Администратор программы бета-тестирования</subtitle><p>Отвечает за планирование, управление и исполнение программы бета-тестировaния. Хорошо проведённая программа бета-тестирования способствует успеху продукта, обеспечивая поступление отзывов о нём из реального мира. Важность бета-тестирования столь велика, что я посвятил этому вопросу целую главу. Но пока просто рассмотрим основные обязанности администратора программы бета-тестирования:</p><p>• поиск, проверка квалификации и привлечение кандидатов в бета-тестеры;</p><p>• распространение инструкций и ПО среди бета-тестеров;</p><p>• рассылка кандидатам в бета-тестеры анкет и других необходимых материалов;</p><p>• опубликование результатов бета-тестирования внутри группы;</p><p>• постепенное усовершенствование процесса бета-тестирования.</p></section><section><title><p>Типичные проблемы и их решение</p></title><p>Далее обсуждается ряд типичных проблем и вопросов, возникающих при использовании описываемых здесь методик, а также их решения.</p><p>• <emphasis>Слишком расплывчатый или, наоборот, чересчур жёстко определённый круг обязанностей</emphasis></p><p>Даже самым талантливым людям нужно объяснять их роли и обязанности. Они должны представлять, что от них требуется, чтобы знать, чему посвятить своё время. Формулировки обязанностей должны быть подробными и ориентированными на решение тех или иных задач. Но не переусердствуйте с этим, иначе эти формулировки станут слишком формальными и жёсткими. Вряд ли нужно, чтобы участники группы лишь цитировали описание их задания, когда пора уже выпускать продукт. Главное — избежать основных просчётов при исполнении проекта, а не пытаться управлять всем и всеми, даже в мелочах (см. описание обязанностей специалистов, приведённое в этой главе);</p><p>• <emphasis>Дисбаланс подразделений</emphasis></p><p>Одно лишь наличие модели, которая поощряет равновесие навыков и опыта специалистов различных подразделений не означает, что обеспечение проекта кадрами осуществлялось как надо. Постоянно следите за балансом ресурсов функциональных подразделений проекта. Например, хватает ли в группе тестировщиков для реализации проекта? Бессмысленно держать 4-5 тестировщиков на 100 разработчиков, даже если первые обладают необходимыми навыками. Отношение числа разработчиков к числу тестировщиков критично для проекта и должно быть сбалансировано. Значение этого отношения зависит от потребностей проекта, но большинство организаций стремится поддерживать его между 2:1 и 4:1. Даже если не соблюдать такое отношение, тестирование всё равно придётся проводить, только в этом случае оно займёт больше времени.</p><p>• <emphasis>Недостаток масштабируемости</emphasis></p><p>Один из потенциальных недостатков модели организации проекта, описанной в этой главе, — слабая масштабируемость. При расширении числа участников проекта, скажем с 20 до 100, единственного менеджера уже будет недостаточно для работы проекта. К счастью, у этой проблемы есть два решения.</p><p>Первое — традиционное — подразумевает наращивание числа ведущих специалистов: разработчиков, тестировщиков, технических писателей и т.д. В отношении вверенных им групп они берут на себя значительную часть обязанностей, выполняемых менеджером проекта. Обычно это решение даёт неплохие результаты, особенно если проект остаётся однородным, т.е. все 100 человек работают над созданием одного и того же продукта. При наличии квалифицированных менеджеров эта модель может давать хорошие результаты, даже если организация становится очень большой.</p><p>Второй подход — создать несколько групп с вышеописанной структурой организации, небольшие или средние по размеру. Это особенно хорошо работает, когда в рамках проекта ведётся разработка независимых программ, например, двух продуктов, редакций или независимых компонентов одного продукта. Для работы над каждой из независимых задач можно выделить небольшое число людей и обойтись даже меньшей, чем показанная здесь, моделью. Сформировав несколько небольших групп, можно решить проблему с масштабируемостью, но при этом возникают другие проблемы, присущие этой модели. Так, организацию из 100 человек можно разбить на независимые группы по 6-7 человек, но они не смогут в полной мере задействовать в совместной работе инструменты, стандарты, выделенные средства, наработанные процедуры и информацию.</p><p>Один из наилучших способов справиться с этой задачей — назначить для каждого функционального подразделения (программистов, тестировщиков, технологов, разработчиков документации, инженерных психологов) квалифицированного эксперта, который возглавит процесс диагностики и разрешения общих проблем. К их числу можно отнести выбор общих инструментов для тестирования, создание общей испытательной лаборатории, определение стандартов документации, практичности ПО и многие другие вопросы. Эксперт в данной области работает со всеми группами. участвующими в решении общих проблем и реализует политику, повышающую производительность труда каждой группы. В некотором роде такая организация напоминает концепцию средневековых гильдий. Например, если все банкиры какого-либо города хотели сделать местную торговлю более эффективной, они могли сформировать гильдию банкиров, чтобы совместно обсуждать способы улучшения и активизации банковской деятельности. Аналогичный подход годится для организации тестирования, создания документации, технологии разработки ПО и т.д. При наличии ведущих специалистов с солидным опытом работы в той или иной области и сильным руководством такую модель организации вполне можно задействовать в компании.</p></section></section><section><title><p>Глава 4</p><p>Ранжирование сотрудников и корпоративная культура</p></title><section><p>Ранжирование позволяет оценить эффективность отдельного сотрудника по размеру вклада и его значению для организации, не отрицая важности работы и личного вклада других участников группы. В основе оценки значения индивидуума — его вклад, а не выполняемые им обязанности или положение в иерархии компании.</p><p>Часть этой главы посвящена такому понятию, как корпоративная культура компаний, занятых в разработке ПО. Производительность труда команды и способность своевременно выпустить ПО зависит от корпоративной культуры труда не меньше, чем от любого другого фактора.</p></section><section><title><p>Ранжирование</p></title><p>Само по себе понятие рейтинга не ново. Одни из примеров — спортивные команды, возводящие самых результативных спортсменов в ранг «привилегированных». Их значение для команды настолько велико, что с ними заключаются контракты на особых условиях. В некоторых организациях, занятых в создании ПО, рейтинг воплощён в системе должностных титулов. Например, используют такие приставки к названию должности, как «специалист первого (или второго) ранга», «старший» или «главный» специалист. Во всех примерах ранг служит для решения важных кадровых вопросов.</p><subtitle>Правила ранжирования</subtitle><p>Правила ранжирования должны быть просты, не стоит чрезмерно усложнять их, чтобы не посвящать расчёту ранга большую часть своего времени. Как говорит мой опыт, проще всего вести ранжирование, приписывая сотрудников к одному из кругов: внутреннему, среднему или внешнему.</p><subtitle>Внутренний круг</subtitle><p>Его составляют сотрудники, наиболее важные для компании. Любой хороший руководитель или ведущий специалист должен знать, кто из участников команды вносит наибольший вклад и на кого можно всегда положиться. Эти люди — движущая сила проекта (а часто и всего бизнеса). Их участие имеет стратегическое значение для успеха работы команды, поэтому их нужно соответствующим образом выделять и поощрять.</p><p>Как правило, внутренний круг составляют самые старшие по должности и наиболее одарённые участники коллектива, обладающие наибольшим доверием. На рабочих собраниях они пользуются большим авторитетом при выборе стратегии, определении направленности продукта и решении других важных для компании вопросов. Возглавляя функциональные подразделения, они олицетворяют собой мастерство и опыт и могут «сделать игру» в самые сложные моменты. Эти люди в полной мере ощущают ответственность за создание продукта и делают всё возможное для его успеха. Они не раз выручали группу в прошлом и не раз сделают это в будущем.</p><subtitle>Средний круг</subtitle><p>Включает перспективных сотрудников. Эти люди могут быть не столь одарёнными, как члены внутреннего круга, и не иметь их навыков. Однако они очень важны для успеха проекта. Как правило, недостаток опыта по сравнению с людьми внутреннего круга компенсируется у них неуёмным энтузиазмом, заинтересованностью, большим потенциалом роста и амбициями.</p><p>Здесь также можно встретить людей, которые работают неплохо, но обычно не демонстрируют исключительных качеств. Они стабильны, надёжны и последовательны, но их никак нельзя назвать выдающимися. Создание текущей версии продукта во многом зависит от их способностей, однако их нельзя считать «ключевыми игроками».</p><subtitle>Внешний круг</subtitle><p>Внешний круг по большей части состоит из людей, новых для организации, которые ещё не оправдали ожиданий в полной мере. Какими бы многообещающими ни казались новые работники, пока они всё равно остаются неизвестными и неиспытанными. Нужно дать им время, чтобы влиться в работу организации и доказать свои способности делом.</p><p>Людей внешнего круга можно без особого труда заменить. Их внезапный уход из организации не будет иметь стратегических последствий для её успеха.</p><subtitle>Для чего нужно ранжирование?</subtitle><p>С помощью ранжирования легче распределить ограниченные ресурсы и решить, перед кем открыть новые возможности. Кроме того, оно помогает позаботиться о людях, внёсших наибольший вклад в успех организации, и избежать увольнения сотрудников, играющих ключевые роли в создании ПО. Обсудим некоторые области применения ранжирования.</p><p>• <emphasis>Поощрение заслуженных сотрудников</emphasis></p><p>Ранжирование позволяет отметить заслуженных сотрудников. Если специалист-«суперзвезда» пять лет трудился на благо группы, то факт принадлежности этого человека к внутреннему кругу и особого отношения к нему важен не только для него, но и для других членов группы. Он свидетельствует о том, что организация видит личный вклад сотрудника, благодарна за него и вклад других людей со временем также заслужит признание.</p><p>• <emphasis>Распределение привилегий и ограниченных ресурсов</emphasis></p><p>Когда в компании появляются новые привилегии и ресурсы, которые нельзя разделить поровну, возникает вопрос: кому отдать предпочтение? Хорошая мысль — определить достойных по их рангу. Неважно, что это будет: захватывающие исследования новой технологии, посещение выставки, собственный кабинет или встреча с клиентом на Гавайях, — ранжирование даёт упорядоченный список авторов наибольшего вклада в успехи компании, которые будут первыми кандидатами на получение привилегий.</p><p>Значит ли это, что все блага будут доставаться лишь людям внутреннего круга? Вовсе нет. Если все работники внутреннего круга уже обеспечены, а некоторая привилегия имеет особое значение для другого работника, наверное, разумно было бы отдать ему эту привилегию. Важно, чтобы все привилегии не доставались лишь одному кругу — вместе с членами внутреннего круга что-то должны получать и люди среднего и внешнего кругов. И всё же основной принцип остаётся в силе: достойны заботы лишь те, кто заботится об успехе продукта.</p><p>• <emphasis>Планирование денежных компенсаций</emphasis></p><p>Рейтинг также помогает спланировать повышения зарплаты, денежные и другие премии. Несомненно, наибольшее внимание при этом надо уделять людям внутреннего круга, чтобы выразить им благодарность за большой вклад в дело компании. Возможно, их следует внести в список на получение премий или подарков, а может быть, и в оба списка. Что бы вы ни выбрали, важно компенсировать затраченные усилия, чтобы люди видели признание их достижений.</p><p>Во вторую очередь следует позаботиться о членах среднего круга и наконец — о людях внешнего. Помните: слова «во вторую, и „в последнюю“ очередь вовсе не означают, что размер компенсации должен быть равным или меньше рыночного уровня. Вы не пытаетесь наказать людей внешнего круга, просто размер их вознаграждения не так велик, как у других. Сам факт, что повышение качества работы открывает доступ к более высокой компенсации, должен быть стимулирующим.</p><p>• <emphasis>Планирование кадровой политики</emphasis></p><p>Один мудрец как-то сказал мне, что текучесть кадров подобна ветру: не беда, если он сорвёт большую часть листьев (т.е. если уйдёт много людей внешнего круга): пройдёт немного времени, и они вырастут снова. Намного хуже, если ветер повредит ветви (средний круг) или ствол (внутренний круг) — их трудно восстановить и они долго растут. Мораль проста: если компанию покидают люди среднего и внутреннего кругов — это признак серьёзной проблемы, которую нужно решить. Ранжирование помогает разобраться, где появилась текучка и какой ущерб она наносит группе.</p><subtitle>Некорректное использование ранжирования</subtitle><p>Некорректное ранжирование может привести к расколу и конфронтации в коллективе. Старайтесь избежать в этом вопросе лицемерия, ханжества и высокомерия. Когда люди слишком важничают и перестают понимать необходимость личного вклада для всеобщего успеха, не замедлят появиться самые разные проблемы. Помните: выделяя и вознаграждая чей-либо вклад, важно не вызвать зависти и вражды остальных участников коллектива.</p><subtitle>Привилегии и ответственность</subtitle><p>Большие привилегии означают и более высокую ответственность. В случае ранжирования как никогда верна старая поговорка: «положение обязывает». Не допускайте, чтобы привилегии, которыми наделены сотрудники в соответствии с их рангом, были больше возложенной на них ответственности. Если что-то одно начинает перевешивать, жди проблем, малых и не очень.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>В NuMega мы в шутку называли наших инженеров «богами», «полубогами» и «учениками богов». Хотя все работники компании были по крайней мере хорошими, а большинство — отличными специалистами, не все вносили одинаковый вклад в дело компании.</emphasis></p><p><emphasis>Чем больше вклад сотрудника, тем больше у него было возможностей и свободы. Но взамен от них ожидали новых идей и способности возглавить остальных, при необходимости направить их усилия и помочь советом. Поскольку большинство наших «cуперзвезд» были не только талантливы, но и скромны, признание их вклада редко вызывало у других отрицательные эмоции.</emphasis></p><empty-line/><subtitle>Когда люди меняются</subtitle><p>Что происходит, когда член внутреннего круга начинает вести себя, как член внешнего? Или наоборот, когда новичок поражает всех качеством своей работы?</p><p>В первом случае лучше всего обсудить возникшие проблемы с этим человеком, представив ему конкретные факты в подтверждение снижения эффективности его труда. Часто такое обсуждение позволяет выявить источник проблемы: может, это упадок сил или какие-то личные проблемы? Вооружившись этим знанием, можно попробовать сразу же решить эту проблему с большими шансами на успех.</p><p>Во втором случае похоже, что вы наткнулись на «суперзвезду». Во-первых, важно убедиться, что продемонстрированные незаурядные результаты стабильны. Не стоит спешить с выводами, обычно лучше подождать конца цикла разработки. «Суперзвёзды» не вспыхивают на миг, но продолжают «светить» и постоянно проявляют себя. Если новый сотрудник продолжает демонстрировать выдающиеся результаты, следует с радостью принять его во внутренний круг.</p><subtitle>К чему стремиться</subtitle><p>Естественно, конечная задача — перевести всех работников во внутренний круг. Самый лучший исход, которого можно желать — это формирование стабильной команды, состоящей сплошь из людей внутреннего круга. Не следует искусственно ограничивать число людей внутреннего круга. Обычно во внутреннем круге меньше сотрудников, чем в среднем, а в среднем — меньше, чем во внешнем. И всё же не следует насильственно поддерживать такое распределение — оно должно отражать реальный вклад участников группы.</p></section><section><title><p>Корпоративная культура</p></title><p>Понятие «культура» в приложении к созданию программ включает ряд определённых черт и понятий, влияющих на процесс разработки ПО. Культура формируется прежде всего принципами и действиями руководящего звена организации. Со временем культура растёт или приходит в упадок в зависимости от прошлых успехов и неудач группы, реакции на возникающие проблемы и способности решать поставленные задачи. Эти факторы в конечном счёте определяют самооценку группы. Она может быть любой: участники группы могут считать себя специалистами высшего пилотажа, создающими замечательные продукты, или страдальцами, еле справляющимися со своей работой.</p><subtitle>Почему культура так важна?</subtitle><p>Как и у индивидуума, так и у команды должно быть представление о предназначении, важности, уровне мастерства и способности решить поставленную перед ней задачу. Если самооценка команды высока, её мотивация и работоспособность достаточны, чтобы с высокой производительностью труда создавать высококачественные продукты. И наоборот, если самооценка низка, команда будет работать ниже своих способностей, даже если она состоит из талантливых людей! В определённом смысле культура может как повышать, так и снижать общую работоспособность коллектива.</p><p>Высокая культура разработки ПО, в частности, имеет огромное значение при освоении новых возможностей или для выхода из затруднительной ситуации. Если в компании развита культура создания качественных продуктов, весьма вероятно, что внутреннее стремление и приверженность к этой практике не иссякнут и в будущем.</p><p>С другой стороны, низкая культура лишь осложняет и без того трудную ситуацию. Допустим, команда, в которой никогда не воспитывалась культура быстрой реакции на внешние события, оказалась в ситуации, требующей немедленных действий. В этом случае успех попытки быстро отреагировать на событие представляется весьма сомнительным; такой группе, возможно, даже не стоит и пытаться сделать это.</p><subtitle>Как воспитать корпоративную культуру?</subtitle><p>Лучший способ создать и воспитать корпоративную культуру — начать с приверженности определённым принципам и культивирования некоторых манер поведения, после чего группа какое-то время должна работать по новым правилам. Действия группы в соответствии с этими принципами и будут факторами, формирующими её культуру.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p>Воспитывая корпоративную культуру NuMega, мы специально предпринимаем ряд конкретных действий.</p><p>• <emphasis>Чётко определяем, кто мы и какие цели преследуем</emphasis></p><p>Нам совершенно ясно, кто мы и что должны делать. Звучит довольно просто, да? Но на деле это не так просто, как кажется.</p><p>Мы стремимся создавать лучшие в мире средства разработки, в частности инструменты, которые помогают разработчикам отлаживать программы и устранять в них неполадки. Мы также знаем, что любые методы достижения этой цели автоматически попадают в наше поле зрения. Мы должны разобраться в них, перенять и применять их лучше, чем кто-либо другой.</p><p>• <emphasis>Культивируем элитарность</emphasis></p><p>Строгий отбор при приёме на работу позволяет многим считать привилегией принадлежность к числу технических специалистов нашей компании. Культивирование окружения, построенного на привилегиях, позволяет поддерживать высокий боевой дух и снижать текучесть кадров. Элитарность позволяет воспитать такие черты культуры, как приверженность общему делу, стремление делать заметные вещи и участвовать в решении нестандартных задач.</p><p>• <emphasis>Отмечаем успехи и помним свою историю</emphasis></p><p>Со временем в компании сформировалась история выпуска замечательных продуктов, успешных как в техническом, так и в экономическом отношении. «Отцы-основатели» постоянно приводят эти успехи в качестве примеров на собраниях и неформальных встречах. Все следят за тем, чтобы каждый новичок знал историю и путь развития компании. Это стимулирует формирование культуры стремления к успеху, создания замечательных продуктов и заставляет быть экспертом в выбранной нами области.</p><p>Эти принципы имеют большое значение, ибо история компании влияет на формирование культуры. Обязательно отмечайте успехи и передавайте историю компании новым работникам.</p><p>• <emphasis>Поддерживаем дух соперничества</emphasis></p><p>Ставя цель перед коллективом, мы чётко определяем правила соревнования и относимся к поставленным целям, как к врагам, после чего, «сомкнув ряды», атакуем их. Цель соревнования очень чётко обозначена и пронизывает предметы наших многочисленных обсуждений и размышлений. Порой обсуждения проходят так оживлённо, что мысли переливаются через край, принимая причудливые формы; чего стоят те трюки, которые творят разработчики. Наглядевшись на это, я понял: эта команда сделает всё возможное и невозможное, чтобы добиться успеха, и нам удалось сформировать замечательную культуру соперничества.</p><p>• <emphasis>У нас свои способы отдохнуть и весело провести время</emphasis></p><p>У работников технических компаний есть два удовольствия: возможность от души повеселиться и разные способы отдохнуть от повседневных забот. У нас куча всяких вещиц: футболок, рекламных материалов с выставок, бесплатных обедов, кроме того, «NuMega specials» (пицца с поджаренным луком, чесноком и жгучим «чили»), самодельные площадки для гольфа и велосипедные дорожки прямо в помещениях компании. Всё это формирует атмосферу исключительности и веселья. Мы знаем, что это очень нетипично, но это нам и нравится!</p><p>• <emphasis>Не прячем своих разработчиков от клиентов</emphasis></p><p>В NuMega искренне убеждены, что разработчиков не следует прятать от клиентов. Проще всего попросить их присутствовать на стенде компании на какой-нибудь выставке. Там они смогут не только отдохнуть от работы, но и попадут на передний край общения с клиентами, смогут ответить на их вопросы, получить новые идеи и услышать о созданных ими продуктах как хорошее, так и плохое.</p><p>Такие выставки поднимают боевой дух разработчиков до небес, поскольку каждый из них получает сведения о потребностях клиентов из первых рук. Таким образом удаётся наладить живую связь между теми, кто создаёт программы, и теми, кто ими пользуется.</p><subtitle>***</subtitle><p>Немного конкретизируем изложенное выше. Первый этап формирования культуры — определение приоритетных ценностей. Какие ценности заложены в культуре вашей компании в данный момент? Какие ценности должны быть воплощены в будущем? Подумайте, можно ли сказать, что ваша команда:</p><p>• ценит выполненную вовремя работу?</p><p>• ценит техническое превосходство?</p><p>• ценит высокое качество?</p><p>• ценит даже минимальный вклад?</p><p>• поощряет риск?</p><p>• поощряет исключительную производительность труда?</p><p>• проявляет благородство?</p><p>• небезразлична к социальным проблемам?</p><p>• считает, что каждый должен принимать участие в тестировании продукта?</p><p>• оперативно реагирует на внешние угрозы?</p><p>• считает, что тестирование практичности программы имеет решающее значение?</p><p>• считает сверхурочную работу обычным делом при отставании от графика?</p><p>Следующий этап — выбор действий, формирующих корпоративную культуру. Какие препятствия вы сможете преодолеть при этом, какие решения сможете принять, какие проблемы затронуть и на какие конфронтации пойти ради воспитания необходимой культуры? Подумайте об этом и приготовьтесь последовательно воплощать принятое решение. Помните: в конечном счёте культура все равно возникает, пытаетесь вы направлять её формирование или нет.</p><subtitle>Корпоративная культура и технологические приёмы</subtitle><p>Другой аспект культуры состоит в использовании и освоении внутренних технологических приёмов. Характерной чертой некоторых культур является наличие множества технологических приёмов разработки, в то время как у других их почти нет. Молодые компании часто неохотно осваивают новые технологические приёмы, тогда как в более крупных организациях без них не обходится ни одно задание. По мере роста группы следует подумать о том, как вы собираетесь осваивать новые технологические приёмы. Какие типы приёмов необходимы, а без каких можно обойтись? Как не впасть в крайность, пустив всю работу на самотёк или изнурив себя разными правилами и положениями?</p><p>Вот некоторые правила, которых полезно придерживаться при росте организации:</p><p>• <emphasis>Взвешивайте затраты на внедрение технологических приёмов и пользу от них</emphasis></p><p>Необходимо сразу распознавать ситуации, когда добавление нового приёма не принесёт пользы. Польза от каждого дополнительного этапа или процесса должна окупать затраты на его внедрение. Порой это трудно выяснить сразу, и в сомнительных случаях лучше отказаться от внедрения новшества.</p><p>Если вы чувствуете, что новый процесс необходим, важно знать, как его внедрить. Новые технологические приёмы приносят наилучшие результаты, когда они чётко определены, а их внедрение сулит очевидную выгоду (обеспечивая реальные и измеримые результаты) и не встречает сопротивления коллектива. Если новый приём соответствует этим критериям, велик шанс, что его можно будет с успехом использовать.</p><p>С другой стороны, если приём описан туманно, не имеет очевидной ценности или команда не принимает его, следует ещё раз спросить: а нужен ли он? Я не имел в виду, что следует вовсе отказаться от его внедрения, просто нужно быть уверенным, что выгода от внедрения перевесит затраты. Также неплохо было бы проработать проблемы, которые могут встретиться на пути внедрения нового приёма. Не следует спешить с добавлением новых приёмов, но как только исчезли последние сомнения в их необходимости, следует без колебаний приступать к внедрению.</p><p>• <emphasis>Прежде, чем внедрять новые приёмы, нужно извлечь максимум из имеющихся</emphasis></p><p>Один из самых обескураживающих аспектов разработки ПО — внедрение новых приёмов, в то время как команда не полностью использует все возможности имеющихся. В вашей команде так быть не должно. За правильное использование имеющихся приёмов отвечают менеджеры и ведущие специалисты. Можно потерять доверие участников команды, санкционируя добавление новых технологических приёмов и игнорируя те, что уже есть. Если обнаружится, что ни один из имеющихся документированных приёмов не используется полностью, созовите собрание группы и решите, представляют ли они ценность. Да — оставьте их и используйте «на все сто». Нет — избавьтесь от лишних технологических приёмов. Что толку держать приёмы, развесив их по стенам, как картины? Они только портят интерьер.</p><p>Суть в следующем: нужно внедрить минимальный набор технологических приёмов, необходимый для выполнения работы и следить за тем, чтобы группа освоила их в совершенстве. Не следует осваивать новые приёмы, если вы сами не уверены, что они будут задействованы в полной мере. Группа должна знать: уж если вы решили что-то сделать, то сделаете это непременно.</p><p>• <emphasis>Взвешивайте потребности отдельного специалиста и всей команды</emphasis></p><p>Обычно новые приёмы осваиваются, чтобы удовлетворить потребности всей команды. Однако порой новые приёмы вводятся, лишь чтобы облегчить жизнь нескольким людям или даже одному человеку. В этих случаях надо тщательно проанализировать все затраты и выгоды. Если для внедрения этого приёма придётся просить группу сделать что-то сверх запланированного с существенными затратами, нужно быть уверенным, что польза для немногих участников группы стоит затрат, на которые придётся пойти остальным. Если они несоизмеримы, от нового приёма следует отказаться, в противном случае надо разъяснить причины всем, кого коснётся внедрение нового приёма и кому придётся вкладывать в него своё время и силы, чтобы обеспечить его стопроцентное использование.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Как-то раз в NuMega было предложено при регистрации каждой ошибки сопровождать её сведениями о программно-аппаратной конфигурации компьютера, на котором она была обнаружена. Предложение должно быть полезным для тех, кто смог бы легче находить определённые типы ошибок с его помощью и прекрасно подходит для разнородных сред или в случае команд, где разработчики рассредоточены. Однако это стало бы настоящим препятствием для остальных участников группы, которым приходится вводить информацию вручную и без ошибок. Но нашу среду нельзя назвать ни разнородной, ни географически рассредоточенной.</emphasis></p><p><emphasis>Представляет ли новый приём ценность для компании? Иногда — да, когда дополнительная точная информация позволит легче устранять ошибки, но число таких ошибок не превышает 5-10 в месяц. Однако затраты на ввод этой информации, который должны были выполнять 15 человек на протяжении всего внутреннего цикла разработки (особенно когда приходилось регистрировать до 10 ошибок в день), не стоили потенциальной пользы. Кроме того, большинство ошибок воспроизводилось на любой машине, в противном случае было нетрудно связаться с офисом, откуда поступило сообщение об ошибке, и выяснить необходимую информацию о конфигурации.</emphasis></p><p><emphasis>Отвергнув это предложение и множество ему подобных, нам удалось поддерживать накладные расходы низкими и в полной мере задействовать имеющийся арсенал технологических приёмов.</emphasis></p></section><section><title><p>Типичные проблемы и их решение</p></title><p>Далее обсуждается ряд типичных проблем и вопросов, возникающих при использовании описываемых здесь методик, а также их решения.</p><subtitle>Проблемы с ранжированием</subtitle><p>• <emphasis>Не держите ранжирование в секрете</emphasis></p><p>Не скрывайте факт, что в компании ведётся ранжирование сотрудников, хотя вывешивать транспарант с рангами на виду у всех тоже не стоит. Людям важно знать, что их личный вклад востребован, будет оценен по достоинству и его учтут при распределении различных привилегий и компенсаций.</p><p>• <emphasis>Не затрудняйте переход из одного круга в другой</emphasis></p><p>Не стройте искусственных преград между внешним, средним и внутренним кругами. Единственным способом перехода в высшие круги должно быть повышение личного вклада, а единственной причиной перевода в низшие — недостаточный вклад. Кроме того, обязательно нужно отмечать стабильные результаты переводом из внешнего круга в средний, а хроническое снижение качества работы — переводом из внутреннего круга во внешний.</p><p>Как сказано выше, при переходе работника из одного круга в другой непременно нужно обсудить это с ним. Позитивные переходы должны быть отмечены и поощрены. Негативные переходы тоже следует отметить и обсудить с глазу на глаз.</p><p>• <emphasis>Не заводите фаворитов</emphasis></p><p>Не допускайте использования рангов для определения фаворитов и не путайте его со средством вознаграждения любимчиков. Ранг должен быть основан исключительно на личном вкладе работника. Если ваш друг из группы не вносит вклад наравне с остальными, он не должен участвовать в получении благ наравне с остальными, и точка. Если вы не в состоянии пойти на такое решение, следует вовсе отказаться от ранжирования.</p><p>• <emphasis>Играйте честно</emphasis></p><p>Некоторые считают ранжирование сплошным обманом. Причина может быть в том, что ранее этим людям уже приходилось сталкиваться с некорректным использованием ранжирования (см. обсуждение фаворитизма выше). Но с другой стороны, ранжирование никогда не бывает честным, если под честностью понимать уравниловку. Ранжирование призвано не уравнять всех, но помочь при распределении ресурсов на основе размера личного вклада, отметить выдающиеся достижения и стимулировать дальнейшие успехи. В мире, где ресурсы ограничены, нужно найти способ распределения ресурсов, и, вероятно, нет ничего лучше, чем распределение на основе вклада в создание продукта или работу коллектива.</p><subtitle>Проблемы с культурой</subtitle><p>• <emphasis>Культуру можно изменить</emphasis></p><p>Одна из самых серьёзных проблем с культурой — в ощущении её неизменности. Корпоративная культура больших коллективов и компаний кажется особенно непоколебимой. Хотя изменить культуру может быть трудно, это вполне возможно, если руководство всерьёз на это решилось. Кроме того, в отдельных подразделениях часто складывается собственная микрокультура, созданная в рамках корпоративной культуры, изменить которую сравнительно легко.</p><p>• <emphasis>Если организация растёт</emphasis></p><p>По мере роста организации очень важно прививать корпоративную культуру новым работникам. Особенно часто быстрый рост штата отмечается в начинающих компаниях, поэтому там следует особенно тщательно следить за сохранением основных корпоративных ценностей. Для этого следует не забывать о таких вопросах:</p><p>— кто мы?</p><p>— чем мы занимаемся?</p><p>— почему мы делаем своё дело лучше, чем кто-либо другой?</p><p>— чем мы отличаемся от других?</p><p>— что мы ценим?</p><p>Проследите, чтобы все работники компании знали ответы на эти вопросы и эти знания передавались новичкам. Будет ли это собрание с участием участника группы администраторов или просто обсуждение коллегами по команде — вопросы культуры непременно следует обсуждать в открытую и со всей серьёзностью, которой они заслуживают.</p></section></section><section><title><p>Глава 5</p><p>Инструментальные программы</p></title><section><p>В компании NuMega мы использовали лишь те инструментальные программные средства, которые были жизненно необходимы для нашей работы и вписывались в наш стиль работы. Из всех доступных инструментов мы больше всего применяли и полагались на систему управления исходным кодом и систему устранения проблем и неисправностей (поиска «жучков»). Возможность приспосабливать эти продукты к нашим нуждам позволила ускорить работу — вся команда использовала их почти каждый день.</p></section><section><title><p>Средства управления исходным кодом</p></title><p>Ваш исходный код — это второй наиболее важный актив проекта, после людей, конечно. Следовательно, во всех проектах, связанных с разработкой ПО, даже в тех, где задействован всего один человек, должна быть обеспечена целостность исходного кода. В течение цикла разработки вам потребуется проверять, обновлять, контролировать и пересматривать изменения в исходном коде. С ростом количества людей, работающих над проектом, и сложности проекта эти требования станут ещё более критичными. Мы рассмотрим основные возможности программного обеспечения по управлению исходным кодом и обсудим некоторые простые приёмы, позволяющие максимально увеличить его полезность.</p><subtitle>О чём пойдёт речь</subtitle><p>Продукты по управлению исходным кодом хранят файлы с кодом, отслеживают их версии, управляют файлами, составляющими проект, и предоставляют следующие функции.</p><p>• <emphasis>Хранение файла и его прошлых, настоящих и будущих версий</emphasis></p><p>Система управления исходным кодом будет обслуживать все порученные ей версии файлов. Она сможет выдать любую версию файла, размещённую в системе. Эта возможность необходима, если вы собираетесь строить приложение на основе предыдущих версий, и особенно важна при одновременном создании нескольких версий одной программы.</p><p>• <emphasis>Отслеживание истории изменений для каждого файла</emphasis></p><p>При любых изменениях в файлах система управления исходным кодом внесёт нужные сведения в историю изменений: дату, время, пользователя и обычно небольшое примечание пользователя о природе изменения и его масштабе. Часто эти комментарии — единственное, чем вы располагаете. (Эта информация поможет новым разработчикам втянуться в проект.)</p><p>• <emphasis>Группирование файлов</emphasis></p><p>С ростом сложности проекта возникает необходимость группировать файлы: по назначению (например, по подпроектам или подсистемам) или по функциям (например, тестовые задания, спецификации и документация). </p><p>• <emphasis>Маркировка файлов, связанных с конкретным выпуском программного продукта</emphasis></p><p>Система управления исходным кодом позволит пользователям пометить определённые версии файлов всего проекта/подпроекта. Это позволяет чётко маркировать или идентифицировать файлы, составляющие определённый выпуск ПО. </p><p>• <emphasis>Блокировка и разблокировка файлов</emphasis></p><p>В процессе разработки доступ к рабочему набору файлов требуется более чем одному человеку. Если какой-то файл не используется кем-то ещё, система управления исходным кодом заблокирует файл и выдаст его пользователю для работы. Это действие предотвратит изменение и возможную порчу файла другими пользователями. Когда тот, кому выдан файл, завершит свою работу и возвратит файл в систему, файл будет разблокирован, и появится возможность доступа и выдачи этого файла другим пользователям. Иногда двум разработчикам необходимо одновременно редактировать один файл. Для таких случаев имеется возможность обойти блокировку файла, но тогда координировать все изменения придётся вам. Наиболее изощрённые продукты по управлению исходным кодом обеспечивают множественную выдачу файлов, автоматически совмещая изменения, сделанные в двух файлах. Однако это может быть опасно, так что большинство разработчиков выполняют операции по слиянию вручную (контролируют этот процесс).</p><subtitle>Что туда входит</subtitle><p>Удобное расположение всех файлов и информации, связанной с проектом — это страшная (но излечимая) головная боль при разработке ПО. В NuMega не было времени создавать обширную инфраструктуру или сложные процессы для поддержки грамотного документооборота. Поэтому мы решили просто поместить все файлы и документы проекта в систему управления исходным кодом. Это были:</p><p>• исходные файлы;</p><p>• файлы заголовков;</p><p>• файлы библиотек;</p><p>• сценарии компоновки;</p><p>• результаты компиляции;</p><p>• результаты компоновки;</p><p>• инструменты и файлы для установки программ;</p><p>• инструменты и файлы для тестирования;</p><p>• спецификации проекта;</p><p>• планы проекта (ПО, документации и тестирования);</p><p>• пользовательская документация;</p><p>• тестовые задания и сценарии;</p><p>• тестовые модули разработчиков.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Мы думали, что поместили все нужные файлы в систему управления, однако забыли о тестовых модулях, созданных разработчиками. Тестовые модули — это короткие программы для проверки функциональности продукта. Разработчики запускают их в процессе разработки, чтобы убедиться, что программа все ещё работает. Тестовые модули особенно полезны при добавлении новых возможностей и исправлении ошибок. Разработчики со стажем имеют в своём арсенале десятки маленьких программ, осуществляющих проверку различных условий и вариантов, эти программки никогда не входят в официальные планы тестирования. Если бы эти тесты хранились централизованно, например, в системе управления исходным кодом, мы бы могли запускать их автоматически как часть нашего набора тестов контроля качества. Кроме того, эти тесты могли бы снизить риск добавления новых ошибок неопытными программистами, работающими над хрупкими или сложными частями кода.</emphasis></p><p><emphasis>Заметим, что в систему управления исходным кодом мы поместили всё, что можно было представить, а не только исходный код. Если что-то использовалось в проекте или относилось к проекту, мы помещали это в систему.</emphasis></p><empty-line/><subtitle>Зачем это нужно</subtitle><p>При помещении всех файлов проекта в систему управления исходным кодом вы получаете большие преимущества. Во-первых, неважно, что это за файл и когда вы подключились к работе над проектом, — вы почти наверняка найдёте нужный файл в системе управления исходным кодом, а это весьма ценно. Разработчик сможет найти планы тестирования, технический писатель — функциональные спецификации, а новый сотрудник — нужную информацию без предварительного знакомства с историей создания проекта. Во-вторых, храня все файлы проекта в системе управления исходным кодом, вы сможете использовать функции маркировки и блокирования файлов, управления версиями и ведения истории.</p><p>Например, в NuMega была возможность отслеживать изменения в планах, тестовых сценариях и документации для всего проекта. К тому же мы могли помечать целые наборы тестовых сценариев и пользовательской документации для каждого внутреннего этапа и для каждого основного или неосновного выпуска. Мы могли с точностью до символа воссоздать все файлы (не только файлы исходного кода) любого выпуска в истории проекта.</p><p>Особо отмечу включение в систему NuMega средств сборки: компиляторов, компоновщиков, заголовков и т.д. Чёткое управление этими средствами критично для обслуживания сборочной среды проекта. Официальная сборочная среда была всегда доступна в системе управления исходным кодом. Все разработчики и машины, на которых собирался проект, должны были использовать один и тот же набор файлов. Без исключений.</p><p>Так как для сборки продукта мы не полагались на локальные файлы (не содержащиеся в системе управления версиями), мы задействовали идентичную сборочную среду во всём проекте. Этот простой подход сэкономил нам немало времени. До применения такой системы мы постоянно сталкивались с проблемами при сборке из-за несовместимости между компиляторами разработчиков или искали труднонаходимые ошибки во время выполнения, вызванные несоответствием библиотек или заголовков.</p><p>И последнее (но не менее ценное) преимущество — централизация файлов в системе управления исходным кодом обеспечивает простое резервное копирование всего проекта. Одной командой мы могли создать резервную копню или просто скопировать весь проект на другой диск или другую машину.</p><subtitle>Каковы их технологические возможности</subtitle><p>Помимо функциональных возможностей, описанных ранее, команда в NuMega нуждалась в поддержке пяти жизненно необходимых технологических возможностей. Хотя они специфичны для наших продуктов и компании, многие из них стандартны для большинства проектов в отрасли. Это:</p><p>• управление разработкой нескольких редакций продукта;</p><p>• управление разработкой нескольких версий одной редакции;</p><p>• применение общих компонентов, как в рамках одного, так и нескольких проектов компании;</p><p>• компоновка продукта на основе самого свежего набора файлов с исходным кодом (или на основе другого набора исходных файлов);</p><p>• поддержка локальных сборок для отдельных разработчиков.</p><subtitle>Как ими управлять</subtitle><p>Одна из главных задач в управлении проектом по разработке ПО — это контроль сложности проекта. Труднее всего справляться с исходным кодом и управлением конфигурацией. Хотя наше решение было не идеальным, оно все равно работало и помогло нам без особых проблем укладываться в сроки.</p><p>Мы использовали систему управления исходным кодом Visual Source Safe (VSS) компании Microsoft. Она предоставляет нужные нам основные функции, и у неё отличная цена — как раз для начинающего бизнеса. Хотя обсуждение VSS выходит за рамки этой книги, я расскажу о том, как мы приспособили этот продукт под наши нужды.</p><subtitle>Основы структуры</subtitle><p>Мы структурировали наши проекты по двум простым элементам: частям и продуктам. <emphasis>Часть — </emphasis>это компонент, используемый для компоновки программного <emphasis>продукта. </emphasis>Частями могут владеть разработчики, не являющиеся членами команды, работающей над проектом. Они могут обновлять свои части по собственному (однако согласуемому) графику, отличному от графика всего проекта. Продуктом являлся конечный пакет, продаваемый пользователям. Он складывался из уникальных для этого продукта частей и файлов. Храня в одном месте части и продукты, мы могли собирать различные редакции наших программ и одновременно поддерживать несколько параллельных направлений в разработке. Например, возможность выпускать исправления или пакеты обновлений, продолжая направлять все силы на разработку нового кода, была необходима и для поддержки, и для получения прибыли от следующих продуктов.</p><subtitle>Структура и использование хранилища исходного кода</subtitle><p>Все файлы, используемые при разработке наших продуктов, были рассортированы по трём папкам:</p><p>• Product Name — для файлов, относящихся к продукту;</p><p>• Environment — для файлов среды разработки;</p><p>• Imports — для сторонних файлов.</p><p>Папка Product Name содержала создаваемые нами файлы, необходимые для сборки, тестирования и написания документации к продукту (табл. 5-1). В ней были подкаталоги Branch для каждого варианта, над которым мы работали. В подкаталоге Parts хранились стандартные и совместно используемые компоненты, включаемые в продукт. И, наконец, для каждой редакции продукта имелся подкаталог Product. В каждой папке Product содержались необходимые для продукта части. Чтобы эта структура работала, нужно строго соблюдать соглашения об именах и не нарушать структуру. Координация изменений в частях и продуктах также была критичной.</p><subtitle>Табл. 5-1. Примерная структура папки «Product Name».</subtitle><p><emphasis>$/Product_Name/</emphasis> — Файлы, относящиеся к продукту</p><empty-line/><p><emphasis>$/Product_Name/Branch/</emphasis> — Различные направления в разработке</p><empty-line/><p><emphasis>$/Product_Name/Parts/</emphasis> — Совместно используемые файлы, входящие в продукт</p><p><emphasis>$/Product_Name/Parts/Src/</emphasis> — Исходный код для Parts (при необходимости совместно используется с/Products/Src)</p><p><emphasis>$/Product_Name/Parts/Doc/</emphasis> — Исходные файлы документации</p><p><emphasis>$/Product_Name/Parts/Help/</emphasis> — Исходные файлы справочной системы</p><p><emphasis>$/Product_Name/Parts/Install/</emphasis> — Исходный код программы установки</p><p><emphasis>$/Product_Name/Parts/Patch/</emphasis> — Исходный код вставок</p><p><emphasis>$/Product_Name/Parts/Setup/</emphasis> — Исходный код установщика</p><p><emphasis>$/Product_Name/Parts/Samples/</emphasis> — Исходный код с примерами</p><p><emphasis>$/Product_Name/Parts/Tests/</emphasis> — Исходный код тестов, тестовые задания и т.д.</p><empty-line/><p><emphasis>$/Product_Name/Product/</emphasis> — Редакции продукта Product Name (по одной папке на каждую редакцию)</p><p><emphasis>$/Product_Name/Product/Output/</emphasis> — Область для программ, созданных в других проектах</p><p><emphasis>$/Product_Name/Product/Src/</emphasis> — Исходный код продукта (при необходимости совместно используется с /Parts/Src)</p><p><emphasis>$/Product_Name/Product/Doc/</emphasis> — Файлы документации к продукту (совместно используется с /Parts/Doc)</p><p><emphasis>$/Product_Name/Product/Help/</emphasis> — Файлы справочной системы продукта (совместно используется с /Parts/Help)</p><p><emphasis>$/Product_Name/Product/Imports/</emphasis> — Импорт (совместно используется с /Imports)</p><p><emphasis>$/Product_Name/Product/Install/</emphasis> — Файлы для установки продукта (используется с /Parts/Install)</p><p><emphasis>$/Product_Name/Product/Samples/</emphasis> — Примеры для продукта (совместно используется с /Parts/Samples)</p><p><emphasis>$/Product_Name/Product/Tests/</emphasis> — Тестовые задания, тестовые сценарии (совместно используется с /Parts/Tests)</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Когда я пришёл в NuMega, для одного из продуктов было создано три каталога по именам разработчиков: Frank, Bill и Matt. Так как каждый работал над своим собственным кодом, они могли вносить изменения, не повреждая чужих файлов. Однако там было мало общего кода (одна большая структура данных для основных подсистем). Но это работало! Дальше нам нужно было увеличить команду разработчиков, и мы уже не могли обойтись без системы управления исходным кодом. Такая система позволила усложнить проект, удерживая его под контролем. Без неё я просто не могу представить ПО для разработчиков.</emphasis></p><empty-line/><p>В папке Environment ($/Env) хранятся файлы, используемые командой разработчиков, но не являющиеся частью конечного продукта. Это все, начиная с инструментов и утилит и заканчивая стандартами создания кода и шаблонами для проекта. Папка Environment содержит файлы среды, описывающие среду с точки зрения разработчика, а также с точки зрения тестирования и документации. В NuMega мы хотели создать общую среду для команд разработчиков, и потому для этой цели мы создали специальный раздел в хранилище исходного кода. Вот примерный список подкаталогов, которые могут быть в этом разделе хранилища исходного кода (табл. 5-2):</p><empty-line/><subtitle>Табл. 5-2. Примерная структура папки Environment.</subtitle><p><emphasis>$/Env/Dev/</emphasis> ПО среды разработки и инструментальных средств</p><p><emphasis>$/Env/Dev/Bin</emphasis> Исполняемые модули (подкаталог для каждого инструмента)</p><p><emphasis>$/Env/Dev/Src</emphasis> Исходный код для этих инструментов (подкаталог для каждого)</p><p><emphasis>$/Env/Dev/Doc</emphasis> Документация для этих инструментов (подкаталог для каждого)</p><p><emphasis>$/Env/Dev/Etc</emphasis> Прочие файлы</p><empty-line/><p><emphasis>$/Env/Test/</emphasis> Инструментальные средства и файлы для тестирования</p><p><emphasis>$/Env/Test/Bin</emphasis> Исполняемые модули</p><p><emphasis>$/Env/Test/Src</emphasis> Исходный код и документация для этих инструментов</p><p><emphasis>$/Env/Test/Doc</emphasis> Документация по среде тестирования</p><p><emphasis>$/Env/Test/Etc</emphasis> Прочие файлы</p><empty-line/><p><emphasis>$/Env/Documentation/</emphasis> Документация по среде проекта</p><p><emphasis>$/Env/Documentation/Templates</emphasis> Шаблоны проекта, шаблоны документации и справочники по стилям</p><p><emphasis>$/Env/Documentation/Plans</emphasis> Планы и спецификации проекта, тестовых заданий и документации</p><p><emphasis>$/Env/Documentation/Process</emphasis> Технологические документы проекта</p><empty-line/><p><emphasis>$/Env/Etc</emphasis> Прочие файлы, не вошедшие в предыдущие категории</p><empty-line/><p>В папке Imports ($/Imports) хранились файлы или наборы инструментов из сторонних продуктов (табл. 5-3). Сами сторонние продукты в этой папке не содержались, там были только библиотеки и заголовки. В результате в разделе Imports проводилось совсем немного изменений. Однако так как эта область использовалась для хранения различных версий сторонних продуктов, было очень важно не вносить никаких изменений без чёткого осмысления, полного тестирования и учёта связей с элементами, на которые эти изменения могли бы подействовать.</p><subtitle>Табл. 5-3. Примерная структура папки Imports.</subtitle><empty-line/><p><emphasis>$/Imports/RogueWave</emphasis> Библиотеки и заголовки RogueWave</p><p><emphasis>$/Imports/ObjectSpace</emphasis> Библиотеки и заголовки ObjectSpace</p><p><emphasis>$/Imports/Visual С</emphasis> Результаты компиляции, библиотеки и заголовки Visual С</p><p><emphasis>$/Imports/Install Shield</emphasis> Библиотеки и заголовки Install Shield</p><p><emphasis>$/Imports/Прочие</emphasis> Папки для каждого инструмента или библиотеки сторонних производителей</p><subtitle>Компоновочная система</subtitle><p>В NuMega мы писали сценарий сборки продукта на выделенной «компоновочной машине». Сценарий должен был выбирать нужные для сборки продукта файлы из системы управления исходным кодом. Эта информация включала как сами средства компоновки, так и исходные файлы, библиотеки, заголовки и другие необходимые компоненты. Для ведения процесса компиляции мы выбрали Nmake — популярное средство управления компоновкой. Nmake сначала собирает все части продукта, а затей компонует окончательные исполняемые файлы продукта.</p><p>Сценарий компоновки в качестве входных данных принимал метку сборки, позволяло нам создать определённые версии продукта. Так как мы маркировали и отбирали и средства сборки, и файлы продукта, то таким образом мы гарантировали надёжность сборочной среды. Сценарии компоновки также использовали стандартные переменные окружения и макросы, так что мы собирали все части и продукты посредством одного вызова. То, что наша компоновочная машина и разработчики использовали одни и те же сценарии компоновки, позволяло собирать файлы проекта просто и без ошибок.</p><p>Надёжная автоматическая система компоновки — необходимое условие успешной разработки. Затраты времени и сил на то, чтобы заставить эту систему работать, своего стоят. Этот и другие вопросы применения технологического ПО обсуждаются в главе 7.</p></section><section><title><p>Устранение проблем и неисправностей</p></title><p>Разработка ПО — это динамичный процесс с интенсивным обменом информацией между его участниками. При работе команды над проектом очень важно определить формальные методы поиска и устранения проблем, неисправностей и «жучков», которые постоянно появляются. Применение специальных продуктов для устранения проблем и неисправностей — один из лучших выходов. В оставшейся части главы объясняется, как эффективно использовать такие продукты.</p><subtitle>О чём пойдёт речь</subtitle><p>ПО для устранения проблем и неисправностей позволяет справляться с бесконечными ошибками и проблемами, всплывающими на поверхность в процессе разработки. Эти программы позволяют членам команды протоколировать, обновлять, назначать, устанавливать приоритет, сортировать и пересматривать информацию, полученную в цикле разработки проекта. Они являются важной частью любого проекта независимо от его размера. Никто не в состоянии запомнить все ошибки и проблемы, которые следует разрешить. И если они не протоколируются, не пересматриваются и для них не устанавливается приоритет, качественного продукта не создать.</p><subtitle>Что туда входит</subtitle><p>В NuMega использовали систему устранения проблем и неисправностей для хранения любых постоянных или временных данных о проекте, которые только можно было представить. Туда входили все программные ошибки (в том числе функциональные, затрагивающие производительность, процесс установки и параметры, а также все ошибки при сборке) и решения или предложения по улучшению проекта, его настоящих и будущих версий. Здесь действует простой, но очень важный принцип: все данные должны храниться в одном месте. Не следует держать их в хранилище, не обеспечивающем совместное использование, резервное копирование и простой доступ. (Поэтому сообщения электронной почты не подходят!)</p><subtitle>Примечание</subtitle><p>Я бы не советовал писать собственные программы по устранению проблем и неисправностей, так как хватает различных коммерческих программных продуктов по разумным ценам. Например, Compuware/NuMega TrackRecord, PVCS Tracker, Rational ClearQuest и др. Хотя вам потребуется самим определить, какая из них отвечает вашим потребностям, я настоятельно рекомендую принять решение в пользу покупки. Ведь вы не обязаны тратить время на создание собственных инструментов, ваше дело — поставлять ПО.</p><p>Рассмотрим пример. Разработчик замечает, что производительность в одной из частей приложения здорово снизилась, и сообщает об этом по электронной почте в конференцию разработчиков. А дальше? Кто заметит сообщение, а кто и нет. Даже если кто-то находит неполадку, её нужно запротоколировать и устранить, иначе о проблеме просто забудут. Послать сообщение по электронной почте — не плохо, но не зафиксировать наличие неисправности — беда. То же касается предложений по выпуску. Есть вероятность, что на предложение никто не откликнется, и если сообщение электронной почты было послано без протоколирования, то не будет и никакой истории работы над предложением.</p><subtitle>Как это работает</subtitle><p>Приведённый пример показывает, насколько важно автоматизировать элементарный обмен информацией между членами команды. Запомните: инструмент должен работать на вас, и никак иначе. Вам нужно управлять информацией просто и без лишних формальностей. В то же время вы должны следить за соблюдением дисциплины и не допускать небрежности. Для этих целей используется система устранения проблем и неисправностей. Сконфигурируйте её так, чтобы собирать следующие основные данные о проекте:</p><p>• текущее состояние проблемы: открытая или закрытая;</p><p>• дата возникновения, изменения и решения;</p><p>• текстовое описание проблемы;</p><p>• номер выпуска/сборки программы, в которой обнаружена проблема;</p><p>• имя человека, описавшего проблему:</p><p>• имя человека, работающего над проблемой в настоящее время;</p><p>• состояние проблемы: расследуется, требуется больше информации, ожидается внешнее событие, решена и т.д.;</p><p>• приоритет проблемы: низкий, средний, высокий;</p><p>• выпуск, в котором присутствует проблема;</p><p>• статут процедуры контроля качества;</p><p>• количество попыток неуспешного решения проблемы;</p><p>• список изменений к отчёту о проблеме или неисправности.</p><p>Посмотрим, как мы использовали ПО для устранения проблем и неисправностей в NuMega.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Когда я начинал работать в NuMega, «жучки» и другие различные неисправности фиксировались на доске (если вообще фиксировались). Они оставались там до тех пор, пока не были исправлены, а затем их просто стирали. Когда доска заполнялась полностью, новые записи втискивали в уголок или, чтобы освободить место, стирали другие ошибки. Эта система работала для одного-двух человек, но истории работы над ошибками не было.</emphasis></p><p><emphasis>С ростом организации становилось очевидно, что нам требуется автоматизированное решение. Если бы мы в то время не перешли к нему, то не смогли бы успешно вырастить свою команду. Хотя поиск инструмента, способного решить наши проблемы, и не был сложен, способ его использования часто становился предметом спора. В конце концов мы выяснили, что для группы нашего размера куда важнее выполнять на «отлично» всего несколько функций, чем пытаться делать всё, что мы можем только представить.</emphasis></p><empty-line/><subtitle>Для всех ошибок — одно хранилище</subtitle><p>У нас было простое правило: обо всех ошибках сообщать системе устранения неполадок. Если их там нет, значит, их не существует. Это здорово упростило управление мероприятиями по исправлению ошибок. Сплетни, кулуарные разговоры и сообщения электронной почты не годятся в качестве методов протоколирования ошибок. Скажем, если информация о неисправности приходит от службы технической поддержки, управления продуктом, отдела продаж — словом, от кого угодно, то эта информация не признавалась официально до момента её ввода в систему. С ростом компании большая часть работы по протоколированию ошибок ложилась на плечи службы технической поддержки, но идея оставалась той же.</p><p>Как далеко это заходит? Значит ли это, что если у одного разработчика возникла проблема с API, который реализовал другой разработчик, то её сразу же нужно запротоколировать? Вовсе нет. Разработчики могут решить проблему друг с другом самостоятельно, и тогда её не нужно протоколировать. Однако если решение проблемы займёт некоторое время и требует наблюдения (что особенно важно), то необходимо занести её в систему и описать, чтобы не забыть о её существовании. Эти правила распространяются на всех членов команды и на все отделы.</p><p>Другое преимущество от протоколирования неполадок — возможность отчитываться о них. Как здорово пойти на текущее совещание с полным списком всех крупных неполадок и людей, над ними работающих! Это эффективный способ фокусировать внимание в процессе разработки на важных вопросах. Заявивший об ошибке будет польщён тем, что её признали и она обсуждается. А тот, кто назначен для её разрешения, поймёт, что теперь не отвертеться.</p><subtitle>Управление изменениями</subtitle><p>Как было сказано в начале этого раздела, процесс управления изменениями может осуществляться при помощи системы устранения проблем и неисправностей. Так как все серьёзные проблемы запротоколированы, вы можете составить список необходимых исправлений. После того, как по конкретной неисправности принято решение, просто внесите информацию об исправлении в историю. Возможность пересматривать прошлые решения и причины их принятия — большой плюс. Это позволит избежать отговорок типа «я не помню» или «кажется, меня не было на том совещании». Все просто, понятно и под контролем.</p><subtitle>Приоритеты на основе времени</subtitle><p>Хотя классификация «низкий, средний и высокий» часто полезна при назначении проблемам приоритетов, всё же в одной категории оказываются десятки и даже сотни неполадок. Чего не хватает в таких приоритетах, так это элемента времени. Очень часто есть ошибки с высоким приоритетом, которые нужно срочно исправить к бета-версии, а есть такие (с таким же приоритетом), что могут подождать до последнего выпуска, поскольку они очень сложны или требуют дополнительного исследования.</p><p>Рассмотрите включение поля «Исправить к дате» для установления приоритетов на основе критерия времени. Значения, помещаемые в это поле, могут браться на основе внутреннего графика выпуска проекта, например, здесь может быть указан определённый этап, бета-версия или кандидат на выпуск. Чтобы определиться с приоритетом, задайте себе вопросы: «эту проблему нужно решить к этапу 2 или бета-версии 1?», «Что, если мы выпустим продукт сейчас, а ошибку исправим в следующем выпуске?»</p><p>С течением цикла разработки следует назначать для каждой ошибки конкретный срок исправления. Поступая так, вы без труда получите текущий список неисправностей для любого выпуска, в том числе для следующего.</p><subtitle>Проверяйте и исправляйте ошибки</subtitle><p>Одна из главных задач, выполняемых при контроле качества, — проверка того, что ошибки на самом деле исправлены. На этом этапе мы убеждаемся в том, что разработчик действительно осознал проблему и провёл достаточное количество испытаний. Когда ошибка исправлена и соответствующие изменения внесены в исходный код, разработчик устанавливает значение поля «Контролю качества: подтвердить» на «Истина», а статус — на «Ожидается процедура контроля качества». После того, как система контроля качества проверила исправление ошибки, тестировщик устанавливает её статус «Закрыто». Проблема может быть закрыта только системой контроля качества после соответствующей проверки.</p><subtitle>Используйте замечания по выпуску</subtitle><p>Когда мы сталкивались с неполадкой, которую следует описать в замечаниях по выпуску или файле Read Me, мы изменяли её статус на «Release Notes», но оставляли её открытой. В примечаниях по выпуску описываются известные проблемы, способы их обойти и информация, появившаяся в последний момент и не попавшая в официальную документацию. Когда наступал момент выпуска бета-версии или окончательной версии, было очень просто составить список проблем, о которых следует указать в замечаниях по выпуску. И только после того, как проблему разрешили, мы окончательно её закрывали.</p><subtitle>Используйте стандартные запросы</subtitle><p>Чтобы осуществлять полноценный поиск по базе данных проекта, важно иметь набор стандартных запросов. Эти запросы должны использоваться совместно и быть доступны всем членам команды; важно, что у каждого будет одинаковая картина данных. Хотя частные запросы хороши для редких и особых требований, их не следует использовать для распределения заданий членам команды. Риск неправильного составления запроса или указания неиспользуемого более поля достаточно велик. В таблице представлены наиболее важные запросы.</p><empty-line/><p><emphasis>Все открытые ошибки</emphasis></p><p>Позволяет менеджеру проекта и руководству оценить проект в целом</p><p><emphasis>Все открытые ошибки для конкретного этапа</emphasis></p><p>Позволяет команде увидеть, какие ошибки остаются открытыми в проекте для заданного этапа.</p><p><emphasis>Все открытые ошибки для конкретного человека</emphasis></p><p>Позволяет каждому человеку просмотреть свой текущий список ошибок</p><p><emphasis>Все открытые ошибки для конкретного этапа и человека</emphasis></p><p>Позволяет каждому человеку просмотреть свой список ошибок для заданного этапа.</p><p><emphasis>Все открытые ошибки тестировщиков с полем «Контролю качества: проверить» = «Истина»</emphasis></p><p>Позволяет команде просмотреть свой план тестирования</p><p><emphasis>Все открытые ошибки с полем «Предложения» = «Истина»</emphasis></p><p>Позволяет менеджеру проекта и руководству пересмотреть текущие предложения по изменениям</p><subtitle>Другие способы применения</subtitle><p>Далее приведены другие важные способы использования информации, попадающей в базу данных проблем и неисправностей. Эта информация поможет менеджеру проекта и руководству оценить мероприятия по проекту на макроуровне, а также другие проблемы, съедающие значительную часть времени. В цикле разработки команда обрабатывает сотни, а может, и тысячи ошибок и проблем, и поэтому понимание того, что же всё-таки происходит с течением времени, может быть очень ценно.</p><subtitle>Интенсивность возникновения и устранения ошибок</subtitle><p>Интенсивность возникновения — это мера того, сколько новых ошибок или неисправностей было обнаружено за определённый период времени. Интенсивность возникновения взлетает вверх в начале проекта, но с течением времени снижается. Интенсивность устранения — это мера того, сколько ошибок или неисправностей закрыто за определённый период времени. Она снижается по мере устранения ошибок. Ниже показана интенсивность возникновения и устранения ошибок — для проекта эти данные могут быть весьма полезны (рис. 5-1 и 5-2).</p><empty-line/><image l:href="#pic51.jpg"/><p>Рис. 5-1. Интенсивность возникновения и устранения ошибок в начале проекта.</p><empty-line/><image l:href="#pic52.jpg"/><p>Рис. 5-2. Интенсивность возникновения и устранения ошибок в моменты, когда проект близится к завершению определённого этапа.</p><empty-line/><p>Как соотносятся интенсивность возникновения и устранения ошибок? В начале проекта вы столкнётесь с массой новых проблем, которые обнаруживаются (открываются) быстрее, чем устраняются (закрываются). По ходу работы интенсивность возникновения по отношению к интенсивности устранения перестанет расти и снизится, так как существующие проблемы будут закрываться быстрее, чем новые будут обнаруживаться. Особого внимания требуют резкие скачки, которые могут проявляться в определённый период. Рассмотрите проблему, зафиксированную в этот период, чтобы определить, не она ли породила ещё большее количество новых ошибок.</p><p>Обычно, когда близится завершение внутреннего этапа, выпуск бета-версии и кандидата на выпуск, интенсивность устранения выше интенсивности возникновения. Если это не так, то новых проблем появляется больше, чем решается, а это не то, что вы бы хотели видеть, приближаясь к периоду стабилизации или выпуску.</p><p>Интенсивность устранения поможет вам определить эффективность обнаружения причин возникновения неполадки, а также примерный срок устранения ошибок, которые могут появиться в будущем. Скажем, если интенсивность устранения в течение двух последних недель составляла 10 ошибок в день, это может быть большим успехом. Если у вас 100 открытых ошибок, то вполне закономерно ожидать, что все они будут устранены приблизительно в течение следующих 10 дней. Эта цифра конечно же не точна (для исправления какой-нибудь неполадки может потребоваться и неделя), но она позволяет понять, чего вам следует ожидать при наличии большого количества оставшихся ошибок.</p><subtitle>Количество изменений</subtitle><p>Количество изменений также может о многом поведать. Количество изменений показывает число обновлений информации о неполадке. Причина обновления не имеет значения. Большое число изменений — верный знак того, что не всё идёт так гладко. Так, оставшаяся неполадка может исследоваться многими людьми, и ни один из них не установит причину её возникновения. Возможно, её передавали из отдела технической поддержки к разработчикам, от тестировщиков — к разработчикам или между двумя разработчиками туда и обратно. Наблюдение за количеством изменений информации об ошибках поможет определить те, что требуют внимания со стороны ведущих специалистов и менеджера проекта.</p><subtitle>Счётчик неудачных исправлений</subtitle><p>Ещё один хороший способ оценки нестабильности проекта — счётчик неудачных исправлений для всех ошибок, которые считались исправленными, но на самом деле исправлены не были. При устранении неполадки от команды тестировщиков требуется подтверждение того, что ошибка действительно исправлена. Если проблема всё ещё существует или исправление не принято, ей возвращается статус открытой, а значение поля «Исправлено неудачно» устанавливается в 1. Если тестировщики снова не могут подтвердить устранения неполадки, значение счётчика увеличивается до 2 или 3. Это сигнализирует о серьёзности проблемы и говорит о необходимости вмешательства ведущих специалистов или менеджера проекта.</p></section><section><title><p>Дополнительные средства</p></title><p>Хотя средства управления исходным кодом и устранения проблем были стержнем процесса разработки в NuMega, мы регулярно использовали и другие инструменты.</p><subtitle>Отладчики</subtitle><p>Одним из наиболее важных инструментов для наших разработчиков был разработанный NuMega Technologies невероятно мощный отладчик для Windows — SoftICE. Он загружается при запуске системы как драйвер устройства на уровне ядра и предоставляет беспрецедентные возможности управления и наблюдения за внутренними процессами приложения и операционной системы. Команда разработчиков часто использовала SoftICE для разрешения наиболее сложных проблем при отладке.</p><subtitle>Средства анализа производительности и полноты</subtitle><p>Мы часто использовали средства анализа производительности, в том числе наши собственные продукты TrueTime и TrueCoverage, для настройки производительности собираемых приложений. Мы поняли, что эти инструменты нужно использовать регулярно в течение цикла разработки, а не в самом конце, когда времени на оптимизацию или устранение проблем не хватает. Анализ производительности проекта по завершении определённого этапа или при выпуске бета-версии предупреждает проблемы и часто раскрывает ошибки, которые могут не проявляться в коде до самого выпуска. Не ждите, пока вы столкнётесь с проблемами производительности, а начинайте сразу применять средства анализа производительности.</p><p>Мы также поняли, что эти средства работают наиболее эффективно, если проект специально разрабатывается с учётом анализа производительности и полноты. Собирая такие приложения, мы интегрируем их с нашими тестовыми заданиями для раннего обнаружения проблем с производительностью или для лучшей оценки полноты наших тестовых заданий.</p><subtitle>Средства написания сценариев и автоматизации тестирования</subtitle><p>Так как наши планы тестирования требовали максимально возможной автоматизации, мы всегда интересовались инструментами, способными нам в этом помочь. Наиболее важными были средства написания сценариев (Perl, командные файлы DOS и т.п.) и средства автоматизации тестирования. В то время Visual Test был доступен по разумной цене и предлагался взыскательным тестировщикам и разработчикам. С его помощью мы тестировали пользовательский интерфейс, но в подавляющем большинстве мероприятий по автоматизации полагались на средства написания сценариев.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Когда мы создавали группу разработки ПО, проверяющего исправность кода, члены команды не были до конца уверены в его значимости. Но с продвижением проекта, когда команда начала применять собственный продукт на собственном коде, стало ясно, что если разработчики блочно тестировали свой код с полнотой 80%, то качество продукта заметно повышалось.</emphasis></p></section><section><title><p>Типичные проблемы и их решение</p></title><p>Далее обсуждается ряд типичных проблем и вопросов, возникающих при использовании описываемых здесь методик, а также их решения.</p><subtitle>Проблемы с инструментами</subtitle><p>• <emphasis>Отбор нужных инструментов</emphasis></p><p>Одна из главных ошибок которую допускают команды разработчиков, — игнорирование нужных инструментов. Я убеждён в том, что система управления исходным кодом и система устранения проблем и неисправностей необходимы. В равной степени для команды разработчиков важны средства отладки, поиска ошибок, оптимизации производительности и проверки полноты. Они помогут решить многие уникальные проблемы, всплывающие на поверхность в процессе разработки.</p><p>Всё, что может ускорить и автоматизировать цикл разработки, критично для вашего графика. Слишком часто графики сбиваются, так как сложные ошибки или проблемы с производительностью вносятся в процессе разработки, но не выявляются на раннем этапе. Когда они обнаружены, людям без посторонней помощи устранить их практически невозможно. Времени искать нужные инструменты в Интернете просто не будет. Убедитесь, что определились с инструментами, которые вам понадобятся, интегрировали их в процесс разработки и обучили персонал работе с ними.</p><p>• <emphasis>Смена инструментов на средине пути</emphasis></p><p>Одно из главных искушений в процессе разработки — замена того, что вы используете сейчас, новой версией или инструментом от другого производителя. Последствия такого решения обычно не просчитывают. Я не могу представить себе смены систем управления исходным кодом или устранения проблем и неисправностей без значительного сдвига графиков. Обычно лучше дойти до конечного выпуска с тем, что у вас имеется, нежели менять это на полпути.</p><subtitle>Проблемы управления исходным кодом</subtitle><p>• <emphasis>Структура проекта</emphasis></p><p>С ростом проекта структура системы управления исходным кодом становится очень важной. Хотя здесь я предлагаю стандартный способ работы, не забудьте спланировать систему в соответствии с нуждами вашего проекта. Вы должны принять во внимание фактор одновременного выпуска нескольких версий (пакеты обновлений, сокращённые и полные выпуски), а также потребности разработчиков, тестировщиков, фактор обучения пользователей, человеческий фактор и технологические потребности.</p><p>• <emphasis>Содержание</emphasis></p><p>Не обманывайте себя, думая, что исходный код — это всего лишь набор файлов, требующий контроля над изменениями. Как было отмечено ранее, управления требует великое множество файлов и документов — не ограничивайтесь преимуществами контроля над изменениями только для исходного кода. Даже если придётся переучивать людей, отвечающих за контроль качества или обучение пользователей, время будет потрачено не зря.</p><p>• <emphasis>Конфликты ключевых файлов</emphasis></p><p>Типичный случай: разработчику X был выдан файл, и поэтому разработчик Y не может его взять для внесения важных изменений. Такие конфликты из-за файлов способны замедлить работу над проектом. Предусмотрите способ быстрого внесения критичных исправлений или изменений.</p><p>Лучший способ решить эту проблему — предотвратить её появление. Подумайте, можете ли вы разделить наиболее востребованную информацию на несколько файлов, основываясь на логических подсистемах, компонентах и классах. Разбивка содержимого файлов уменьшает вероятность конфликтов.</p><p>Когда разделить содержимое файлов невозможно, например из-за жёсткой связи между блоками, следует разработать политику, предусматривающую возврат файлов в течение определённого количества часов после выдачи. Также в случае недоступности файлов программисты могут работать над их копиями, а не над оригиналами. Ставший доступным файл можно взять на короткий срок, быстро обновить и возвратить на место.</p><p>В большинстве систем управления исходным кодом поддерживается слияние файлов. Это позволяет совместить изменения в файлах. Хотя обычно эта функция работает правильно, не позволяйте операцию слияния проводить автоматически. Вы должны убедиться, что проверили все изменения, сделанные в файле. Если в нашей системе управления исходным кодом поддержка слияния реализована плохо, можете воспользоваться такими редакторами кода, как Visual Slick Edit и Code Write. Они помогут выявить различия визуально и проверить результат слияния перед его реальным осуществлением.</p><p>• <emphasis>Маркировка</emphasis></p><p>Одно из главных достоинств системы управления исходным кодом — возможность маркировки набора файлов, включённых в выпуск. Не забывайте проделывать этот важный этап работы для каждого выпуска, в том числе на основных уровнях, по завершении этапов работы, при выпуске бета-версий и т.д.</p><p>Метки должны устанавливаться не только для файлов с исходным кодом. Помечайте файлы-сборки, установочные файлы, файлы документации, файлы контроля качества — словом, все файлы, включённые в выпуск. Метка должна быть информативной и следовать соглашениям об именах, принятым для проекта.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Однажды у нас работала команда, которая оценивала свою систему поиска ошибок во время разработки. Спустя некоторое время они пришли к выводу, что им следует переключиться на использование нового продукта, так как в нём были реализованы новые возможности. Они запустили конвертор и загрузили ПО. К сожалению, через две недели работы с продуктом они обнаружили, что там нет поддержки некоторых отчётов, а производительность программы ужасна. Им нужно было вернуться к предыдущей системе, но так как в новой версии не было предусмотрено процедуры автоматического обратного перехода, им пришлось вручную водить все записи об ошибках и неполадках, внесённые с момента перехода.</emphasis></p><empty-line/><subtitle>Проблемы поиска ошибок и неисправностей</subtitle><p>• <emphasis>Целостность данных</emphasis></p><p>Обеспечение целостности данных в системе должно быть приоритетной задачей. Если вы не будете доверять информации в системе, то не станете её использовать, и она потеряет свою значимость. Очень важно определить правила обеспечения целостности данных, в большинстве основанных на внутреннем процессе разработки. Так, вы никогда не должны сталкиваться с ошибками, которые реально «закрыты», но для них установлен статус «исследуется». Чтобы отображать работу над ошибками, нужно со временем изменять статус ошибок. Также убедитесь, что вы вводите правильные значения в поля (информацию об этапе, информацию о выпуске и т.д.). Какими бы ни были у вас внутренние методы проверки целостности, не допускайте хранения недостоверных или устаревших данных, иначе команда разработчиков будет присваивать данным любые значения, а вся система перестанет внушать доверие и станет бесполезной.</p><p>Лучший способ избежать проблем с целостностью данных — это убедиться в том, что команда осознает важность этих данных и может обнаруживать и решать проблемы самостоятельно. Собственная мотивация заработает хорошо, если вы продемонстрируете реальную значимость этих данных для команды. Не забудьте также периодически пересматривать данные и обсуждать результаты с командой.</p><p>Я показал некоторые способы моделирования ключевых элементов цикла разработки с применением средств устранения проблем и неисправностей. Однако не стоит увлекаться и использовать всё, что только может подойти для вашей команды. Вместо этого определите ключевые потребности для процесса разработки и выберите простые средства для их реализации.</p></section></section><section><title><p>Глава 6</p><p>Основы системы контроля качества</p></title><section><p>Проблемы с контролем качества могут разрушить проект: сорвать сроки или испортить продукт так, что потребители не смогут им пользоваться. Какой бы ни была ваша компания — начинающей или транснациональной корпорацией, вы должны эффективно балансировать между качеством продукта и временем его представления на рынке. Успех или неудача зависят именно от этого.</p><p>В этой главе мы рассмотрим основы системы контроля качества в динамичной среде с ограниченными ресурсами, обычной для современных проектов по разработке ПО. Мы остановим своё внимание на том, что, когда, как и кто должен тестировать. Затем я продемонстрирую общее решение и расскажу о некоторых простых и эффективных приёмах управления тестированием.</p></section><section><title><p>Основные принципы</p></title><p>Начнём с принципов работы системы контроля качества. Лейтмотив — обеспечение качества непосредственно в процессе разработки. Продукту нельзя придать качество позже без значительных затрат денег, сил и времени. Создание качественного продукта основывается на четырёх простых принципах:</p><p>• тестирование продукта осуществляется параллельно с процессом его разработки;</p><p>• качество продукта улучшается регулярно при завершении каждого планового этапа разработки;</p><p>• тестирование необходимо максимально автоматизировать;</p><p>• качество является частью культуры и технологии.</p><subtitle>Параллельное тестирование</subtitle><p>В среде с ограниченным временем поиск и устранение проблем в кратчайшие сроки с момента их появления — условие необходимое. Раньше узнаешь о проблеме — раньше решишь. Ваша задача — тестировать функции программы сразу после их окончательного создания. Это и называется параллельным тестированием. Чтобы его правильно осуществлять, вы должны иметь средства автоматизированного тестирования или ресурсы для проведения ручных тестов, доступные в момент реализации новых функций. Если реализация функции запланирована на конец пятой недели, то команда испытателей должна быть готова протестировать её на шестой. Это правило следует применять ко всем основным функциям. Хотя автоматизированное тестирование предпочтительнее, к запланированному моменту должны быть готовы и ресурсы для ручного проведения этой операции.</p><p>Ниже представлен идеальный график параллельного тестирования набора функций программы (табл. 6-1). Заметьте, что разработка и тестирование идут максимально плотно друг за другом. Реализация функции завершается в конце недели, команда испытателей готова приступить к тестированию в начале следующей. Хотя разработчики ответственны и за создание кода, и за его базовое тестирование, команда тестировщиков в заданный период проверяет функцию по максимуму. Так как разработчики и тестировщики должны работать над функцией вместе, их называют «оперативной командой».</p><p>Табл. 6-1. График работы оперативной команды над функциями А, В и С.</p><image l:href="#pic61.jpg"/><empty-line/><p>Разработчики и тестировщики несут обоюдную ответственность за своевременное обеспечение качества. В такой системе реализация функции не завершается написанием кода. Функция считается законченной, если она проверена тестировщиками и соответствует заданным критериям. Разработчики и тестировщики должны осознавать, что для завершения работы над функцией они должны работать вместе. У каждой группы свои задачи (написание кода, тестирование, автоматизация и т.п.), но чтобы сделать всю работу, они должны действовать сообща. Нельзя переходить к следующей функции, если текущий набор функций не проработан окончательно и не стабилизирован.</p><p>Запомните: одновременно должно разрабатываться функций не более, чем вы можете обеспечить их сотрудниками. Иначе говоря, число оперативных команд должно основываться на числе функций, для которых допустима параллельная работа (разработка и тестирование). Если тестировщиков больше, чем разработчиков, или наоборот, то при использовании такой модели разработки команда считается несбалансированной, и вам следует набрать дополнительный персонал в те области, где испытывается дефицит.</p><p>Наконец обратите внимание, что я добавил в график работ фазы стабилизации и интеграции. Эти фазы позволяют команде укрепить программу по завершении ключевых этапов, прежде чем продолжить работу над оставшейся частью проекта. Необходимость стабилизации и интеграции мы рассмотрим в следующем разделе. О том, как встроить периоды стабилизации и интеграции в график работ, см. главу 11.</p><subtitle>Стабилизация и интеграция</subtitle><p>Через каждые 4-6 недель команда должна отводить 1-2 недели (в зависимости от сложности проекта) на тестирование, стабилизацию и интеграцию функций, завершённых к данному моменту. Такие периоды стабилизации и интеграции идут на пользу команде, функциональности и качеству. Вы можете завершить незаконченное тестирование, начать интегральную проверку функциональности и определить проблемы, которые следует решить, прежде чем продолжить работу над проектом. Не обращайте особого внимания на мелкие неисправности и детали. Просто перед началом очередной стадии убедитесь, что структурно и функционально проект находится в хорошем состоянии. В течение этого периода все члены команды должны направлять свои усилия только на стабилизацию и интеграцию. Не работайте над новыми функциями, кодом или чем-то ещё до тех пор, пока вы не будете уверены в стабильности того, что уже построено.</p><p>Периоды стабилизации и интеграции также позволяют сопоставить фактическое продвижение проекта с запланированным. Если проект хорошо спланирован, вы будете точно знать, на какой неделе какая функция будет завершена. Укладываетесь ли вы в график? Можно ли использовать определённые функции в намеченный срок? Эта информация необходима для того, чтобы не дать проекту выйти из колеи. Повторю, что о календарном планировании подробно говорится в главе 11, а сейчас просто запомните, что вам нужно заранее определить периоды, во время которых вся команда, работающая над проектом, будет концентрироваться на стабилизации и интеграции программы.</p><subtitle>Автоматизация</subtitle><p>Максимально возможная автоматизация процесса тестирования — ключ к параллельному тестированию (и раннему обнаружению ошибок). Автоматизация предоставит вам следующие преимущества:</p><p>• <emphasis>Сокращение внутреннего цикла тестирования</emphasis></p><p>Автоматизация помогает выполнять тесты быстро. Для параллельного тестирования вы должны будете в течение всего цикла разработки иметь постоянную возможность тестировать большие части продукта за короткий промежуток времени. Ручное тестирование требует массу времени, больших трудовых затрат и не слишком надёжно. Его нельзя выполнять каждую ночь после очередной сборки. Автоматизация — единственный способ добиться максимальной эффективности от параллельного тестирования.</p><p>• <emphasis>Сокращение потребностей в персонале</emphasis></p><p>Автоматизация значительно сокращает расходы на рабочую силу. Относительная стоимость выполнения автоматизированного тестового задания ничтожна по сравнению с ценой выполнения этой операции вручную.</p><p>• <emphasis>Проверка изменений, внесённых в последний момент</emphasis></p><p>Изменения, которые вносятся в последнюю минуту, неизбежны, и чёткие автоматизированные тестовые задания незаменимы для быстрой проверки того, что эти изменения не приведут к серьёзным проблемам. Выполнять вручную все обязательные тесты после внесения лишь нескольких изменений дорого и порой просто невозможно.</p><p>• <emphasis>Обеспечение полноты тестирования для новых выпусков</emphasis></p><p>С каждым новым выпуском команда должна быть уверена в том, что функции из предыдущих выпусков все ещё работают. Если вам снова предстоит вручную тестировать все функции из прошлого выпуска, у вас, возможно, не останется ресурсов для тестирования новых функций в том же объёме. С течением времени число тестов, которые нужно выполнить вручную, станет огромным. Автоматизация тестирования функций предыдущих выпусков поможет решить эту проблему.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Однажды, в очередной раз сообщив боссу о продвижении проекта и заверив его в том, что всё в порядке, я установил сборку и нажал на кнопку «выполнить наиболее критичную функцию проекта». Она не работала. Выяснилось, что уже много дней сборка была сломанной, хотя большинство об этом не знало. По нашему графику мы уже давно прошли период разработки и тестирования этой функции, и коль уж однажды она работала как часы, то должна была работать и сейчас. Сейчас мы поняли, что если наиболее критичная функция продукта была нестабильна, то состояние остальных функций, которые тогда работали, сейчас также неизвестно. Все были так заняты написанием нового кода и тестированием новых дополнительных функций, что никто не заметил того, что продукт больше не работал. Бета-версия была отложена на несколько недель.</emphasis></p><p><emphasis>В тот момент я и моя команда поняли всю важность автоматизации тестирования для нашего проекта. Мы начали писать автоматизированные регрессивные тесты для ключевых функций, запускать их каждый день и немедленно устранять серьёзные неполадки.</emphasis></p><empty-line/><p>Чаще всего автоматизацию критикуют из-за времени, необходимого для создания хороших тестовых заданий. Да, тестовые задания требуют материальных и трудовых затрат, но, созданные на совесть, они приносят большие дивиденды. Я рекомендую выделить нескольких специалистов по автоматизации, чьей задачей в цикле разработки будет только написание автоматизированных тестовых заданий.</p><p>Время, необходимое для поддержания адекватности тестов будущим выпускам, также является объектом нападок. Особенно это относится к автоматизации тестирования пользовательского интерфейса. Если между выпусками в вашем пользовательском интерфейсе происходят серьёзные изменения, то тестовые сценарии могут не работать и потребовать больших усилий для их совершенствования. По этой причине при автоматическом тестировании следует сосредоточиться на функциях, не относящихся к пользовательскому интерфейсу. Автоматизируйте тестирование ключевых функций, а не деталей пользовательского интерфейса.</p><p>Отличная идея — строить продукт, изначально рассчитанный на тестирование. Если вы минимизируете свою зависимость от пользовательского интерфейса и создадите альтернативные способы ввода данных и просмотра выходных данных, то будете защищены от изменений в интерфейсе. Например, рассмотрите возможность использования файлов, записей реестра, параметров командной строки и СОМ-интерфейсов передачи входных данных. Для вывода данных вы можете использовать текстовые файлы, распечатку значений переменных или готовые компоненты, специально предназначенные для этой цели. Я не говорю о том, что пользовательский интерфейс не должен быть протестирован, — просто приоритетным должно быть автоматизированное тестирование ключевых функций продукта. Однако если вы решили автоматизировать тестирование пользовательского интерфейса, начните с «контактного» тестирования. При этом, чтобы проверить функциональность всего интерфейса, вызываются и закрываются все диалоговые окна.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Работая в NuMega над BoundsChecker 5, мы знали, что команда, создающая внутренние компоненты, значительно опережает команду, занятую пользовательским интерфейсом. И мы должны были быть уверены в том, что сможем тестировать продукт, даже если у нас не будет пользовательского интерфейса месяц или больше. Команда, отвечающая за внутренние компоненты, разрабатывала простые драйверы, вызывавшие подсистему с данными, необходимыми для работы. Используя эти драйверы, мы могли тестировать продукт и убедиться, что он твёрд, как скала, задолго до того, как пользовательский интерфейс был готов. Помимо раннего тестирования продукта, эти драйверы предоставляли надёжный и простой способ автоматизированного тестирования подсистем разных выпусков.</emphasis></p><empty-line/><subtitle>Команды, процессы и культура</subtitle><p>У вас есть опыт создания качественного ПО? Ваши технологические процессы производительны и эффективны или они обычно занимают кучу времени и ресурсов? Учитывается ли вопрос качества каждым человеком, участвующим в разработке ПО? Как далеко вы готовы пойти, чтобы обеспечить качество? О качестве заботится каждый или есть такие, которые говорят: «это не мой участок»?</p><p>Эти вопросы могут определить, насколько группа успешна в разработке качественного ПО. Иногда говорят, что высшее руководство не желает брать на себя обязательства, необходимые для создания качественных продуктов. С другой стороны, они, может быть, и хотят поставлять качественный продукт, но не уверены в том, что у команды есть для этого эффективная система. Они считают, что увеличение количества процессов контроля качества всего лишь приведёт к дополнительным затратам времени и повысит расходы без улучшения продукта. Одной из задач этой книги является определение конкретного набора процессов контроля качества, которые позволят поставлять лучшие продукты в кратчайшие сроки, насколько это возможно. Однажды обзаведясь системой, в которой вы уверены, вы вероятнее всего станете поддерживать и постоянно использовать именно её.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>В NuMega менеджер проекта определял качество как главный приоритет для каждого члена команды. Он устанавливал продукт и использовал его почти ежедневно, фиксировал ошибки и обсуждал обнаруженные неполадки со своей командой на совещании, в обеденное время и встреч в коридоре. Это подгоняло всю команду, и каждый её участник включался в работу. Тестированием и оценкой результатов занимались все. Все осознали: ошибки — это зло, и с ними надо бороться. Мы давали всем понять, что до самого конца проекта о качестве будут помнить и не забудут после продажи продукта.</emphasis></p></section><section><title><p>Что, когда и как тестировать</p></title><p>Тестирование эффективно, только если понятно, какую часть продукта, когда и как тестировать. Вроде вопросы простые, но если вы работаете в жёстком графике и с ограниченными людскими ресурсами, то вам нельзя терять время, тестируя объект слишком глубоко или, наоборот, слишком поверхностно. Нужно сосредоточиться на проверке в следующих ключевых областях продукта:</p><p>• процедуре установки;</p><p>• функциональных возможностях;</p><p>• интеграции функций;</p><p>• производительности.</p><p>Тестирование в этих областях должно происходить постоянно в течение всего цикла разработки. Однако для эффективного выполнения этой процедуры вам нужно знать, когда и как проводить тесты в каждой из этих областей. Короче говоря, для каждого крупного мероприятия в процессе разработки вы должны обладать набором хорошо определённых процессов и процедур, которые будут отлавливать проблемы. Эти процессы и процедуры источают в себя следующие компоненты:</p><p>• <emphasis>Входные тесты</emphasis></p><p>Проверяют ПО перед подтверждением внесённых изменений.</p><p>• <emphasis>Ежедневные базисные тесты</emphasis></p><p>Выполняются для каждой сборки программы.</p><p>• <emphasis>Тесты по завершении функции</emphasis></p><p>Проверяют функцию сразу же после завершения работы над ней.</p><p>• <emphasis>Тесты при стабилизации и интеграции</emphasis></p><p>Проверяется интеграция функций через определённые интервалы времени.</p><p>• <emphasis>Бета-тестирование и кандидаты на выпуск</emphasis></p><p>Производится внешнее тестирование продукта через определённые интервалы времени.</p><p>В оставшейся части этой главы мы поговорим об этих пяти ключевых разновидностях тестирования.</p><subtitle>Входное тестирование</subtitle><p>Позволяет разработчикам проверить важные функции в локальной сборке перед помещением кода в основную базу. Хорошие тесты должны обладать:</p><p>• совместимостью между всеми машинами;</p><p>• простотой установки, запуска и выполнения;</p><p>• проверять ключевые функции или подсистемы продукта.</p><p>Входные тесты представляют наибольшую ценность для случаев, когда вы вносите исправления в критичную или сложную часть системы. Если входной тест выполняется неудачно, вы можете самостоятельно найти и устранить неполадку. Вы не нарушите работу остальных разработчиков, которые могут взять исходные файлы с ошибками, после внесения этих файлов вами в систему. Также входные тесты предотвращают внесение критических ошибок в ежедневную сборку и сбой базисного теста.</p><subtitle>Ежедневное базисное тестирование</subtitle><p>Ещё один способ реализации стратегии «тестировать как можно раньше», помимо входных тестов, — ежедневные базисные тесты. Так как вы строите продукт каждый день, то и тестировать его нужно ежедневно. Базисные тесты — это основной набор автоматизированных регрессивных тестов, проверяющих, что ключевые функции продукта работают. Они обеспечивают создание работоспособной сборки и гарантию того, что за прошедшие 24 часа не было значительных ухудшений. С добавлением новых ключевых компонентов базисные тесты также следует улучшать и расширять.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Продукт BoundsChecker компании NuMega хорошо известен за свою способность находить утечки памяти в приложениях C/C++. Ежедневные базисные тесты для этой программы включали в себя приложение BugBench, в котором было множество утечек памяти, а также других отвратительных «жучков». Мы использовали эту программу-пример для генерации ошибок, которые BoundsChecker должен был уметь искать. Если BoundsChecker находил не все ошибки в программе-примере, тогда по определению сборка считалась плохой. Нам нравилось получать по утрам «ещё дымящийся отчёт о тесте» с результатами проверки сборки минувшей ночи. Такой процесс позволял нашему проекту почти всегда быть стабильным и работающим, поскольку наши базисные тесты сразу находили критические проблемы.</emphasis></p><p><emphasis>Заметьте: ежедневные базисные тесты не имели своей целью проверку незначительных функций, таких как проверка работоспособности предварительного просмотра перед печатью, или вызов справочной системы по нажатию клавиши H — все это легко проверить вручную. Мы концентрировались на ключевых функциях проекта.</emphasis></p><empty-line/><p>Как и ежедневная сборка, данные о базисных тестах (предоставляемые в виде отчётов) совместно используются всей командой так, что каждому понятно, есть ли в продукте проблемы или нет. Если да, руководители разработчиков и тестировщиков должны провести расследование, быстро определить причину проблемы и назначить специалиста для её разрешения. Для этого специалиста разрешение данной проблемы должно быть наивысшим приоритетом.</p><subtitle>Тестирование реализованной функции</subtitle><p>Итак, ваша задача — тестировать каждую функцию, как только работа над ней будет завершена. Для каждой важной функции должны быть назначены разработчик и тестировщик, которые вместе будут отвечать за своевременную и качественную поставку этой функции. Такое назначение будет способствовать совместной работе, обмену информацией и идеями, а успех или неудача разделятся поровну. Для каждой существенной функции должны быть заготовлены автоматические тесты, но вы также должны быть готовы, если понадобится, протестировать их вручную. В вашем плане контроля качества должна быть изложена вся информация так, чтобы было абсолютно понятно, когда и как тестируется каждая функция.</p><subtitle>Ключевые функции</subtitle><p>Основные усилия команды, отвечающей за контроль качества, направляются на тестирование ключевых функций. Их можно тестировать как автоматически, так и вручную, но это надо делать сразу после того, как разработчик закончил кодирование. Чем раньше начать тестирование фикции, тем быстрее вы объективно оцените продвижение проекта и, если обнаружатся проблемы, начнёте их решать.</p><p>Тестировщики почти всегда будут находить проблемы. Для их устранения в графике разработки должно быть отведено некоторое время в период разработки компонента или в ближайшем периоде стабилизации. Я советую выделять немного времени в обоих периодах. Скажем, в пятидневном задании должен быть предусмотрен один день как раз для устранения неполадок, то есть 20% «лишнего времени».</p><subtitle>Установка</subtitle><p>К сожалению, процедура установки — самая «забытая» часть любого продукта. Люди редко думают о том, что установка — это важнейшая функция программы, и поэтому не уделяют ей должного внимания. Если вы не протестируете процедуру установки, можете пожалеть: этот компонент программы используют все. Единственный способ создать великолепное первое впечатление — это разработать отличную процедуру установки. Иначе пользователь с первых минут будет недоволен вашей программой.</p><p>Как и для остальных крупных компонентов, для проверки процедуры установки нужно выделить оперативную команду. То есть задача создания и проверки процедуры установки назначается технологам и тестировщикам. Эта задача должна входить в план проверки качества и выполняться регулярно в течение цикла разработки. Помните, что обычно установка — очень сложная часть программы, она требует безупречной работы на самых разных конфигурациях. И здесь автоматическое тестирование незаменимо.</p><p>Вот список основных тестов процедуры установки, которые должны быть выполнены для любого продукта, который вы собираетесь поставить.</p><p>• <emphasis>Операционные системы</emphasis></p><p>Проверка на всех операционных системах, поддерживаемых вашей программой.</p><p>• <emphasis>Сервисные пакеты</emphasis></p><p>Проверка со всеми сервисными пакетами ОС, поддерживаемых вашей программой.</p><p>• <emphasis>«Чистая» установка</emphasis></p><p>Проверка установки продукта на ОС, где не установлены предыдущие версии программы.</p><p>• <emphasis>«Грязная» установка</emphasis></p><p>Проверка установки продукта на ОС с установленными предыдущими версиями программы.</p><p>• <emphasis>Конфигурации продукта</emphasis></p><p>Проверка поддержки процедурой установки различных конфигураций продукта.</p><p>• <emphasis>Функции программы установки</emphasis></p><p>Проверка собственных возможностей процедуры установки (онлайновая регистрация, кнопка «Далее», кнопка «Назад», кнопка «Отмена» и т.д.).</p><p>• <emphasis>Тест удаления</emphasis></p><p>Проверка процедуры удаления продукта.</p><p>Хотя хорошая процедура установки прежде всего предназначена для пользователей, вы тоже увидите, что она играет важную роль в ускорении работы по контролю качества. Так как команда тестировщиков должна работать с самой последней сборкой программы, у вас постоянно должна быть надёжная процедура установки, которую они будут использовать. Ведь вы не хотите, чтобы команда тратила время на редактирование реестра, копирование файлов, редактирование параметров конфигурации и т.д. Вам нужно направить их усилия на тестирование продукта, а не на ручные процедуры, в которых легко могут появиться ошибки.</p><p>Надёжная и простая в использовании процедура установки будет полезна для всех членов команды, а не только для тестировщиков. Каждый сможет установить продукт для своих собственных целей. Техническим писателям потребуется установка для создания описания функций продукта, разработчикам — для отслеживания «жучков», проблем с производительностью и оценки пользовательского интерфейса. Ваша команда должна работать с продуктом, а не бороться с его установкой.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Не забудьте о процедуре удаления! В NuMega команды разработчиков и тестировщиков оценили значимость процедуры удаления. Ведь она позволяет получить чистую систему и не тратить время на ручное удаление записей реестра и файлов из системного каталога.</emphasis></p><empty-line/><subtitle>Тестирование при стабилизации и интеграции</subtitle><p>До этого момента в цикле разработки тестирование было направлено на проверку отдельных функций. Но в период стабилизации и интеграции внимание уделяется:</p><p>• завершению всех отложенных тестов отдельных функций;</p><p>• проверке интеграции функций;</p><p>• проверке текущей производительности и нагрузки;</p><p>• исправлению всех серьёзных ошибок, изъянов проекта или архитектурных проблем;</p><p>• тестированию бета-версий и кандидатов на выпуск.</p><p>Завершение каждого из этих этапов очень важно для начала работы над следующей частью проекта. Давайте подробнее рассмотрим каждый из них.</p><subtitle>Завершение тестирования отдельных функций</subtitle><p>Задача номер один — завершение всех тестов, которые могли быть отложены. Это вполне нормально, когда какой-то оперативной команде для завершения всех тестов требуется больше времени, даже после 4-6 недель упорной работы. Используйте это время для выполнения всех тестов, которые ещё не были выполнены, так вы сможете поддерживать параллельное тестирование до самого конца проекта.</p><subtitle>Проверка интеграции</subtitle><p>Тестирование интеграции должно быть определено заблаговременно как часть плана тестирования. Лучший способ сделать это — создать набор примеров использования, предпочтительно с точки зрения пользователя, описывающих, как различные функции должны работать вместе. Перед тестированием вы должны быть уверены, что заданные функции находятся в рабочем состоянии и в принципе могут использоваться вместе. Именно сейчас время их совместной проверки, и если они не станут работать, то настанет время исправления ошибок.</p><subtitle>Тестирование производительности и нагрузки</subtitle><p>Хотя конечный продукт нельзя оценить до тех пор, пока вся система не будет собрана воедино, для оценки прогресса или его отсутствия в цикле разработки могут проводиться наблюдения и предварительные измерения.</p><p>Не забудьте создать набор тестов, которые будут служить в качестве эталонных тестов для продукта, и выполнять их регулярно в цикле разработки. Выполняйте стрессовые тесты и оценивайте производительность системы по завершении определённых этапов и в моменты синхронизации и интеграции. Именно для этого разработка разбита на этапы. Выполнение тестов в эти моменты — лучший способ раннего обнаружения ошибок и их исправления до того, как вы продолжите строить ваш продукт на фундаменте, содержащем ошибку.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Во время разработки BoundsChecker одной из главных проблем была производительность. Ничего не стоило полностью поменять характеристики производительности продукта, добавив несколько строчек кода в критичные функции. Чтобы обнаружить источник проблем с производительностью, мы использовали несколько тестовых приложений, которые нагружали BoundsChecker до предела. Одно из таких приложений называлось Torture. Оно создавало 256 параллельных потоков и запрашивало и освобождало десятки тысяч блоков памяти в куче. В течение всего периода разработки мы запускали Torture (и подобные программы), чтобы определить, не снизилась ли производительность продукта. Так как мы хотели видеть результат сразу, мы стали каждую ночь запускать Torture как часть наших автоматических регрессивных тестов и сравнивать показатели производительности. С таким уровнем контроля мы обычно могли определять снижение производительности в сборке предыдущего дня. Весьма неплохо!</emphasis></p><empty-line/><subtitle>Коррекция после тестирования</subtitle><p>Период стабилизации и интеграции также позволяет исправить серьёзные ошибки до перехода к следующему набору функций. Тестирование функций и их интеграции выявит множество ошибок, а это именно то, что нужно. Вы сможете заранее устранить эти ошибки, что увеличит продуктивность дальнейшей работы. Но время на поиск и исправление этих ошибок должно быть учтено в графике.</p><subtitle>Оценка после тестирования</subtitle><p>Когда период стабилизации и интеграции подходит к концу, не забудьте оценить результаты и произвести изменения. Усовершенствовать ли аппаратную часть? Нужно лучше тестировать подсистемы? Требуется ли лучшее определение API? Больше людей? Какие бы изменения ни требовалось провести, это нужно сделать сейчас.</p><p>Это также подходящий момент решить, что имеет смысл улучшить во время следующего периода стабилизации и интеграции. Смотрите на фазу стабилизации и интеграции, как на проверку ПО и команды, которая его создаёт. Вы должны оценить производительность и программ, и людей и провести все необходимые изменения.</p><subtitle>Пример тестирования</subtitle><p>Рассмотрим простой пример, чтобы показать, как все эти области работают вместе. Допустим, вы создаёте Web-приложение и проходите фазу стабилизации и интеграции. Вы уверены в работоспособности определённых функций. Скажем, вам нужно только создание, редактирование и удаление покупателей. Но чтобы заставить эти функции работать, нужно потрудиться. Их работа затрагивает пользовательский интерфейс, Web-сервер, промежуточные звенья и базу данных. Все эти компоненты взаимосвязаны. В этом случае проверка интеграции может состоять из таких заданий:</p><p>• попытаться добавить покупателя;</p><p>• некорректное добавление покупателя (проверка полей);</p><p>• повторное добавление одного и того же покупателя;</p><p>• редактирование сведений о покупателе (всех полей, ни одного поля);</p><p>• редактирование сведений о несуществующем покупателе;</p><p>• некорректное редактирование сведений о покупателе;</p><p>• удаление существующего покупателя;</p><p>• удаление несуществующего покупателя.</p><p>Завершив тестирование интеграции, вы будете обладать сведениями о производительности приложения. Как долго добавить покупателя? А удалить? Получить сообщение об ошибке? Хотя может быть несколько причин плохой производительности, если вы не можете быстро добавить покупателя в маленькой базе данных, возможно, имеется проблема, требующая дополнительного исследования. Есть ли проблемы с драйверами БД? Может быть, у вас плохая структура БД? Нет ли претензий к промежуточному уровню? Чтобы это проверить, через определённое время нужно проводить мониторинг, устанавливать планку производительности для основных транзакций и регулярно сравнивать результаты, чтобы знать, что вы на верном пути.</p><p>Задача тестирования интеграции — убедиться в том, что к завершению первого этапа функциональность продукта удовлетворительна. Если это так, вы готовы приступить к следующему крупному этапу. Если нет, скажем, вы не можете добавить, отредактировать или удалить покупателя, остановитесь и исправьте всё, что мешает двигаться вперёд.</p><subtitle>Тестирование бета-версий и кандидатов на выпуск</subtitle><p>Тестирование бета-версий и кандидата на выпуск — ключевой этап проекта. Бета-тест — это возможность дать клиентам проверить и оценить ваше ПО за месяцы до его выпуска или применения в реальной рабочей среде. В большинстве проектов во второй половине цикла разработки предусматривается 2-3 бета-периода. Во время каждого такого периода привлекаются десятки или сотни, а иногда тысячи пользователей. Кандидат на выпуск потенциально является последней сборкой продукта, и он ещё важнее. Если последний круг тестирования завершился без серьёзных проблем, то он представляет ПО, которое вы намереваетесь предоставить потребителям. (Подробно о бета-тестировании см. главу 13, о тестировании кандидатов на выпуск — главу 14.)</p><p>Одна из главных задач при работе с бета-версиями и кандидатами на выпуск — определить, что следует протестировать в сборке, прежде чем предоставить её сторонним организациям. Конечно, вы не сможете заново протестировать весь продукт. Полное тестирование и доводка продукта займёт месяцы, если не годы. Вместо этого вам нужно составить очень конкретный и хорошо продуманный план, который будет выполнен в очень сжатые сроки. (Для большинства небольших и средних проектов норма составляет 7-10 дней.) В планы тестирования бета-версий и кандидатов на выпуск нужно включить:</p><p>• выполнение всего набора автоматических тестов;</p><p>• выполнение набора ручных тестов, включая:</p><p>* нормальную установку/проверку лицензии (полностью вручную);</p><p>* тестирование базовых функций продукта (полностью вручную);</p><p>* тестирование производительности и нагрузки (полностью вручную);</p><p>* выборочную проверку на всех поддерживаемых платформах;</p><p>* другие специфические разделы проекта.</p><p>Этот список послужит вам хорошей отправной точкой, но для каждого пункта вы должны определить конкретный сценарий тестирования. И если все эти тесты будут успешно пройдены, вы выпустите вашу программу. Если вы не можете успешно выполнить тесты, устраните неполадки и повторите процесс.</p><p>Одна из черт грамотного цикла тестирования бета-версии или кандидата на выпуск заключается в его предеказуемости. Вы должны знать, сколько времени займёт выполнение автоматических и ручных тестов. Имея эту информацию, вы сможете точно предсказать, сколько времени займёт тестирование следующей бета-версии или кандидата на выпуск. Зная, сколько времени нужно для тестирования другой сборки, вы сможете оценить риск и стоимость внесения дополнительных изменений.</p></section><section><title><p>Кто должен тестировать?</p></title><p>За тестирование должны отвечать все участники проекта, невзирая на лица и отведённые им роли. При использовании продукта с любой целью и в любой форме делать это надо с критической точки зрения. Кем бы вы ни были: менеджером проекта, радостно рассматривающим новую функцию, автором руководства пользователя, проверяющим, как будет работать пример, или специалистом по инженерной психологии, устанавливающим продукт для проверки пользовательского интерфейса — вы должны отслеживать, искать и сообщать о проблемах качества.</p><p>Имея сжатые сроки и ограниченные ресурсы, трудно ожидать, что одна группа сможет провести всю работу по тестированию, особенно если учитывать, что в командах тестировщиков дефицит кадров проявляется чаще всего. Так что убедитесь в том, что ваши разработчики, технические писатели, инженерные психологи, менеджер продукта, менеджер проекта, вице-президент или студенты, проходящие летнюю практику, будут искать проблемы каждый раз, когда они используют продукт для своих нужд. Любой ценой заставьте их сообщать о найденных проблемах.</p><p>В период стабилизации и интеграции к тестированию приступает вся команда разработчиков — это коллективная работа. Появляется шанс увидеть, где команда находится в данный момент и сколько ещё нужно сделать. Обычно руководитель группы контроля качества выполняет задачу, распределяя ответственность за тестирование между всеми членами команды. Большую часть времени работа проводится в областях, где автоматические тестовые задания справляются плохо. Также сотрудников просят «сыграть роль пользователя» для ключевых частей продукта. Итак, команда, работавшая над продуктом в течение всего цикла разработки, просто незаменима. Это то, что должно стать частью вашей культуры и одним из ваших основных технологических процессов.</p><p>Эту идею можно развить ещё дальше — самим использовать собственные программы. Такой подход называют <emphasis>«питаться кормом своей собачки», </emphasis>он хорошо известен в нашей отрасли и может оказаться очень ценным. Для определения и разрешения проблем с качеством не нужно делать ничего, кроме как задействовать свои программы в реальной работе. Даже если в рамках вашей команды разработчиков продукт применить нельзя, попробуйте попросить нескольких опытных пользователей поэкспериментировать с программой. То, что они найдут, может оказаться для вас сюрпризом.</p><p>В определённый момент крайне необходимо чётко разграничить обязанности тестировщиков от обязанностей других членов команды (прежде всего разработчиков) в том, что касается тестирования. Чтобы люди концентрировались на своих прямых задачах, необходимо разделение труда.</p><p>Разработчики влияют на качество продукта больше всего. В конце концов они находятся ближе всего к коду, и риск внесения ошибок исходит прежде всего от них. Чтобы гарантировать отлов «жучков» до того, как команда тестировщиков увидит функциональный блок, они должны его тестировать в процессе написания. Хороший разработчик ускорит работу тестировщиков, предоставляя им надёжные функции. И наоборот, плохой разработчик затормозит работу тестировщиков, выдавая им компоненты с таким количеством ошибок, что о тестировании уже и речи не будет. Для тестировщика нет ничего более неприятного, чем находить массу очевидных проблем, которые разработчик мог найти сам всего за несколько минут работы.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>В NuMega мы готовили вторую бета-версию BoundsChecker 3. Для оценки продвижения проекта мы устраивали ежедневные совещания. Кэрол, наш ведущий специалист по контролю качества (в то время команда тестировщиков состояла из неё одной), настойчиво повторяла, что сборка была крайне неудачной. Она сказала, что больше не будет зря тратить время на её тестирование и останется дома до тех пор, пока разработчики не приведут все в порядок, и быстро ушла.</emphasis></p><p><emphasis>Я готов был зааплодировать. Не потому, что мне нравилось состояние бета-версии. Кэрол дала понять разработчикам, что в их обязанности входит базовое тестирование программ и самостоятельная работа над проблемами кода. До команды разработчиков это дошло. Мы согласились и занимались тестированием и исправлениями в программе, пока не почувствовали, что готовы позвать Кэрол. Это заняло около двух дней.</emphasis></p><empty-line/><p>В отношении тестирования разработчики имеют ряд обязанностей:</p><p>• анализ плана тестирования;</p><p>• тестирование на уровне модулей (работает ли функция в большинстве ситуаций);</p><p>• предварительное интегральное тестирование (работает ли функция в связке с другими);</p><p>• протоколирование или устранение всех неполадок, обнаруженных в программе, когда они сами её использовали.</p><p>Команда, отвечающая за контроль качества, пропускает эту простейшую работу. Считается, что тестирование на таком уровне полностью проведено разработчиками до передачи функционального блока тестировщикам. Конечно же, тестировщики не слепо верят в то, что все абсолютно верно, они просто предполагают, что качество продукта находится на уровне, достаточном для того, чтобы приняться за свою работу.</p><p>Далее команда, отвечающая за контроль качества, проводит тестирование продукта на другом уровне. Она сосредоточивается на:</p><p>• планировании тестов;</p><p>• автоматизации создания тестов;</p><p>• автоматизации тестирования;</p><p>• тестировании функций в различных комбинациях;</p><p>• тестировании процедуры установки;</p><p>• тестировании интеграции и связи с системой;</p><p>• тестировании производительности и нагрузки;</p><p>• ручном тестировании (функций, для которых неприменимо автоматическое тестирование);</p><p>• диагностике проблем и их протоколировании;</p><p>• проверке исправлений и «закрытии» ошибок.</p><p>Хотя все эти обязанности привычны для тестировщиков, последняя может быть менее знакомой. «Закрытие» ошибки должен проводить только тестировщик — член оперативной команды. Задача разработчика — исправить ошибку в коде, занести исправление в систему управления исходным кодом и обновить статус ошибки на «Исправлено» в системе устранения неполадок. Но пересмотр всех исправленных ошибок и проверка того, что они действительно исправлены, входит в обязанности тестировщиков. Только после такой проверки ошибка считается официально «закрытой».</p></section><section><title><p>Другие критичные моменты для контроля качества</p></title><p>Почти каждая команда столкнётся с рядом других вопросов. Это проблема тестирования на разных платформах, должная роль и использование ручного тестирования, а также инфраструктура, отвечающая потребностям проекта.</p><subtitle>Матрица тестирования</subtitle><p>Одной из функций контроля качества, занимающей массу времени, является тестирование продукта на широком спектре конфигураций ПО. Сегодня большинство продуктов поддерживают работу под управлением нескольких ОС в различных конфигурациях. Тестировать продукт на всех (если речь идёт о ручном тестировании) — гиблое дело.</p><p>К счастью, существует способ здорово облегчить эту задачу. Если у вас есть надёжные автоматические тестовые задания для проверки важнейших функций, можете задействовать их все для всех конфигураций, которые решили поддерживать.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>В NuMega мы решили проблему тестирования на нескольких конфигурациях путём распределения их между разработчиками и тестировщиками. Один получил Microsoft Windows 95, другой — Microsoft Windows 98, третий — Microsoft Windows NT 3.51 и ещё один — Microsoft Windows NT 4.0. От каждого требовалось выполнить тест на своей ОС в надежде как можно раньше — в процессе разработки — обнаружить проблемы. Таким простым способом мы почти сразу находили проблемы на всех платформах.</emphasis></p><empty-line/><subtitle>Ручное тестирование</subtitle><p>Я столько внимания уделил автоматическому тестированию, что у некоторых из вас мог возникнуть вопрос: стоит ли вообще использовать ручные тесты? Да, но нужно понимать, где их применять. Ручные тесты используются в следующих случаях:</p><p>• <emphasis>Для тестирования ключевых функций в случаях, когда автоматические тесты запаздывают или вовсе не существуют</emphasis></p><p>Что, если у вас нет времени или ресурсов для написания всех автоматических тестов, а команда разработчиков уже выдаёт вам готовую функцию? В таком случае нужно приступить к ручному тестированию, чтобы оценка функции проходила согласно графику. Раннее обнаружение ошибок и их устранение остаётся главной задачей.</p><p>• <emphasis>Для редко изменяемых, некритичных функций</emphasis></p><p>Иногда значимость автоматического тестирования проигрывает простоте и быстроте ручных тестов. Если небольшую функцию легко протестировать и в ней не предвидится изменений, лучше пропустить автоматические тесты и направить свои усилия на более серьёзные задачи.</p><p>• <emphasis>Когда все трещит по швам</emphasis></p><p>Когда сроки поджимают, а вам нужно быстро провести массу тестов, многие любят приглашать дополнительных испытателей, часто это оказываются люди, у которых опыт работы с продуктом небольшой или отсутствует вовсе. Для эффективного выполнения такой задачи следует иметь чёткий план ручного тестирования. В нём нужно описать важнейшие части продукта, которые требуется обследовать, и те моменты, которые нужно проверить наиболее тщательно. Это позволит просто распределить обязанности по тестированию всего продукта, и вы будете уверены, что самые критичные части продукта вошли в планы тестирования.</p><p>Но помните: нельзя быть зависимым от ручного тестирования. Его наращивание потребует больших затрат, а тестирование параллельно с разработкой продукта становится затруднительным.</p><subtitle>Оборудование для тестирования</subtitle><p>В проектах с жёсткими временными рамками нужно быть уверенным, что работа команды не замедляется из-за недостатка элементарного аппаратного или программного обеспечения. В разных командах и проектах требования к оборудованию будут заметно меняться, поэтому ниже перечислены основные требования к оборудованию.</p><p>• <emphasis>2-3 компьютера на каждого тестировщика</emphasis></p><p>Один будет использоваться для производственных нужд: электронной почты, отчётов о неполадках, автоматизации разработки и т.д., а остальные для тестирования. Нужно иметь возможность в любой момент менять конфигурацию тестовых компьютеров. Хорошо, если один из них представляет машину конечного пользователя.</p><p>• <emphasis>2 компьютера на одного разработчика</emphasis></p><p>Помните: разработчики тоже занимаются тестированием. Один компьютер им нужен для разработки, другой — для тестирования. Разработчики могут переконфигурировать его при «охоте на жучков», и это не помешает их основной работе. Повторю: хорошо, если одна машина представляет компьютер конечного пользователя.</p><p>• <emphasis>Доступная библиотека программ</emphasis></p><p>Все ПО, которое требуется для разработки или тестирования, должно быть постоянно доступно. Для быстрого и простого доступа сотрудников к инструментам, продуктам и ОС, необходимым для работы, удобен дисковод с автоматической сменой компакт-дисков. Конечно, придётся позаботиться о наличии лицензий, но избавление сотрудников от хождения по коридорам в поисках нужного диска того стоит.</p><p>• <emphasis>Тестовая лаборатория</emphasis></p><p>Великая вещь! Стойка с тестовыми компьютерами, на которых установлены различные ОС, с различными языками и сервисными пакетами здорово упростит работу по контролю качества для всей команды. Тестовая лаборатория хороша и для установки сложной среды тестирования, сборка и настройка которой отнимает массу времени.</p><p>Конечно, следование этим рекомендациям увеличит расходы на аппаратное и программное обеспечение, но дополнительные расходы обернутся приростом производительности и качества.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>На заре NuMega у нас не было постоянно доступной библиотеки программ, а охота за компакт-дисками здорово раздражала и отнимала драгоценное время. Часто наши планы требовали поддержки самой последней ОС или компилятора Microsoft. К счастью, мы участвовали в тестировании их бета-версий и регулярно получали обновления. Жаль, что только на одном компакт-диске. Когда кому-то требовалась последняя бета-версия Windows или Visual Studio, начиналась охота за диском. Если везло, мы находили человека с диском, который нам требовался, но чаще всего мы слышали: «Я отдал его тому-то», — и продолжали идти по следу. (Однажды я ходил так от одного к другому и только пятый человек в цепочке сказал мне, что этого диска в глаза не видел!) Если такой способ не работал, мы писали сообщение по электронной почте и с надеждой ждали ответа, а это время занимались чем-то другим.</emphasis></p><p><emphasis>После того, как в течение нескольких месяцев мы столкнулись с десятками таких сообщений, мы окончательно поняли, что проблему нужно решать, тем более что наша компания росла. Решением стала «вертушка» компакт-дисков. Это сработало, но только после того, как мы перевели все в режим онлайнового доступа. Наши попытки создать традиционную библиотеку не увенчались успехом, так как люди, бравшие компакт-диски, никогда не возвращали их на место, и мы вновь задавались вопросом: «У кого диск?»</emphasis></p></section><section><title><p>Типичные проблемы и их решение</p></title><p>Далее обсуждается ряд типичных проблем и вопросов, возникающих при использовании описываемых здесь методик, а также их решения.</p><subtitle>Нехватка ресурсов</subtitle><p>Нехватка ресурсов (здесь я имею в виду ресурсы человеческие), вероятно, является наиболее частой проблемой системы контроля качества, и, честно говоря, она гораздо сложнее, чем может казаться. Если для контроля качества у вас нет необходимых ресурсов, прежде всего определите, в чём проблема. Если вам постоянно не хватает ресурсов для осуществления контроля качества, а рабочие места остаются вакантными, значит, вы испытываете проблемы с набором персонала, обратитесь к главе 1 за дополнительными разъяснениями. Если сотрудники, отвечающие за контроль качества, из-за дополнительной работы или сокращения графиков уже работают на износ, стоит рассмотреть возможность привлечения контрактников. Однако, прежде чем пойти на этот шаг, у вас должны быть полностью готовы планы тестирования. Важно, чтобы временные сотрудники <emphasis>выполняли </emphasis>план, а не писали его.</p><p>Если работы просто больше, чем ваши сотрудники могут выполнить, а вы хотите поставить качественный продукт, существует только два выхода:</p><p>• пересмотреть графики, чтобы они отвечали ограничениям, накладываемым разрабатываемыми функциями и возможностями персонала;</p><p>• пересмотреть функциональность программы, чтобы она отвечала ограничениям графика и возможностям персонала.</p><p>В первом случае вы распределяете работу по контролю качества между членами команды. Это обычно отодвигает сроки, так как каждому приходится выполнять дополнительную работу. Однако вы знаете, что держите планку качества и в то же время обеспечиваете работу персонала, следуете графику и реализуете нужную функциональность. Прежде чем сделать такой выбор, обратите внимание на командный дух, сроки и текущее состояние дел, а также последствия задержки выпуска.</p><p>Во втором случае вы сохраняете график (что часто очень критично) и качество продукта (что не менее важно). Причина, по которой этот путь является успешным, заключается в том, что общая нагрузка на всю команду и общий риск проекта снижаются. Поскольку исключённые функции не нужно разрабатывать, тестировать и описывать, производство продукта идёт быстрее. Прежде чем пойти на такой шаг, внимательно изучите функции и их важность для успеха продукта. Я пришёл к выводу, что лучше раньше выпустить продукт с несколькими хорошими функциями, чем поздно поставить то же самое, но с дополнительными возможностями. (В главе 11 я расскажу о приоритетах в выборе функций в подобных ситуациях.)</p><empty-line/><subtitle>Недостаточная подготовка</subtitle><p>Многие проекты «встают не с той ноги» и, честно говоря, обречены с самого начала, так как члены команды просто к ним не готовы. У вас должны быть основные планы, средства автоматизации и оборудование, о которых говорилось выше. Все это потребуется почти с самого начала разработки. Если вы будете писать планы или ждать поставки нужного оборудования в процессе разработки, вы уже опоздаете и не сможете делать то, что от вас требуется — тестировать.</p><p>После того, как масштаб необходимых ресурсов для осуществления контроля качества становится понятен, команды часто начинают рассматривать возможность добавления ресурсов в проект. Если это сотрудники, работающие по контракту или перешедшие из других отделов, то скорее всего у них не будет специальных знаний о самом продукте. Они не смогут применять автоматические тесты (возможно, потому что ни одного не будет написано) или выполнять ручные, так как у них не будет контрольного списка или материалов, описывающих, что следует проделать. В этом случае лучший способ продвижения вперёд — заставить их «играть пользователей». Хотя такой подход часто даёт неплохие результаты, не злоупотребляйте им или используйте его как замену способов тестирования, описанных в этой главе.</p><subtitle>Отсутствие автоматизации</subtitle><p>Надеюсь, к данному моменту стало абсолютно понятно, как важны автоматические тесты в работе по контролю качества. Без автоматизации объём ручной работы и количество персонала взлетят до небес, что заметно сдвинет ваши графики. Очень важно, чтобы команды, отвечающие за контроль качества, и разработчики писали так много автоматических тестов, как это возможно, и, конечно, не меньше, чем описано в рекомендациях, приведённых мной.</p><subtitle>Ненадлежащее исполнение обязанностей</subtitle><p>Проблемы с качеством не всегда являются результатом игнорирования приёмов и концепции контроля качества. Это может быть следствием ненадлежащего исполнения обязанностей. Если вам приходилось беседовать с менеджерами или ведущими специалистами о контроле качества в таком проекте, они, вероятно, постарались наговорить много всего о том, что нужно сделать. Но когда вы видите их проекты, то замечаете, что ничего не делается. Создание качественного продукта требует усилий: сосредоточенности, активного участия, исполнительности. Это не теоретические выкладки — все члены команды должны действовать активно и увлечённо.</p><subtitle>Неправильная расстановка акцентов</subtitle><p>Я настоятельно рекомендую тестировать продукты сначала вширь, а затем вглубь. Убедитесь, что все основные функции реализованы и нормально работают, прежде чем тратить время на второстепенные функции. Конечно, как я говорил ранее, следует расставить приоритеты в тестировании функций. Однако очень часто команды тратят слишком много времени на мелкие детали какой-то функции, в то время как оставшаяся часть продукта разваливается. Возьмите в качестве примера постройку здания. Какой смысл полировать все до блеска в вестибюле, когда лифты не работают!</p></section></section><section><title><p>Глава 7</p><p>Основы технологии разработки программ</p></title><section><p>Сборка и установка ПО — постоянно усложняющаяся задача. По сути она стала настолько трудоёмкой, что для её решения возникла особая дисциплина — технология разработки законченного программного продукта. Эта технология является решающей для своевременного выпуска продукта. В этой главе я расскажу об основах технологии разработки ПО и её применении в повседневной работе.</p><p>Какой бы ни была ваша организация, большой или маленькой, вы должны иметь возможность на регулярной основе собирать и устанавливать ваше ПО. Однако слишком часто команды разработчиков неделями и даже месяцами не могут собрать или установить свою собственную программу. Хуже того, никто из них не отвечает за проблемы со сборкой и процедурой установки, так что эта проблема тормозит процесс разработки. Из-за того, что проект невозможно собрать или установить, могут появиться проблемы любого рода, что вызовет задержки. Если вы не знаете точно реальное состояние вашей программы, потому что не можете увидеть или использовать её, значит, вы действуете вслепую. Чтобы воспользоваться советами, данными в книге, вы должны в обязательном порядке иметь возможность собирать и устанавливать ПО.</p></section><section><title><p>Технологи по разработке ПО</p></title><p>Это члены команды, работающей над проектом, которые имеют необходимые навыки работы с процессами и технологиями сборки и установки ПО. Хотя технологи могут выполнять множество обязанностей, в контексте нашего обсуждения выделим наиболее важные:</p><p>• определение, создание и сопровождение сборочной среды продукта;</p><p>• определение, создание и сопровождение процедуры установки продукта;</p><p>• определение, создание и обслуживание пакетов исправлений или сервисных пакетов;</p><p>• проведение модульного тестирования и основных мероприятий по контролю качества процедуры установки;</p><p>• разработка инструментов, сценариев и автоматизация разработки ПО;</p><p>• планирование сборочной среды (сборочной лаборатории).</p><p>Для выполнения этих задач технологи должны быть включены в команду, работающую над проектом, с самого начала до конца. Они должны создать план сборки и процедуры установки в соответствии с требованиями проекта, как они понимаются в настоящий момент. Им следует участвовать в совещаниях по проекту точно так же, как и остальным членам команды.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>В NuMega не было выделенных технологов, функции реализации готового продукта выполняла команда. Сначала она состояла из инженера по поддержке и специалиста по инженерной психологии. Что бы вы ни думали, они по совместительству составляли великолепную команду и больше года отлично решали технологические проблемы. Талантливые люди могут брать на себя много задач! Но однажды они позвонили мне из сборочной лаборатории (на самом деле это небольшая комнатка), где боролись со сложной сборкой и сценарием установки. Сообщение было недвусмысленным: «Эд! С нас хватит! Найми технолога!»</emphasis></p><empty-line/><p>В небольших группах отдельный постоянный технолог не нужен. Вместо него эти обязанности могут выполнять другие члены команды по совместительству. Но со временем сложность ПО и размер команды разработчиков возрастают, и потребуются отдельные технологи. А ещё позже — централизованная структура, занимающаяся технологией создания готового продукта. Не надо предполагать, что эта функция не важна или её качество не имеет значения только потому, что в начале её выполнение не потребует работы с постоянной занятостью.</p></section><section><title><p>Сборки</p></title><p>Сборка является результатом компиляции всего исходного кода продукта. Для корректного построения вашего ПО, интеграция должна быть обеспечена на самом элементарном уровне — на уровне исходного кода. Целостность исходного кода должна быть совершенной: ошибки компиляции и компоновки недопустимы. В сложных проектах совершенства добиться тяжело из-за массы связей между модулями исходного кода. Однако регулярно собирать свою программу можно и нужно.</p><subtitle>Почему они важны</subtitle><p>Способность собирать ПО является определяющей для поставки программ в срок. Одна из наиболее часто возникающих проблем при создании ПО — заставить все части работать вместе. Если о ней забыть до окончания проекта, то потом решение проблемы займёт недели или месяцы работы. В худшем случае потребуется переопределение каких-то API и функций. А это, естественно, означает появление никем не запланированных задержек.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Когда я пришёл в NuMega, единственным человеком, способным собрать продукт целиком, был один из талантливейших инженеров — Мэт Питрек. Даже когда команда и продукты ещё были небольшими, среда разработки была чрезвычайно сложной. Только Мэт знал, что делать. Чтобы собрать программу, он уходил в свой кабинет и закрывал дверь. Он как помешанный колдовал над тремя разными компиляторами и дюжиной сценариев, вручную редактировал конфигурационные и другие файлы. Затем, после 3-4 часов интенсивной работы, он взмахивал волшебной палочкой, и обычно у нас появлялась готовая сборка. Мы предполагали, что он не нашёл никаких проблем.</emphasis></p><p><emphasis>Конечно, новость об успехе всегда радовала, ведь потеря нашего ведущего инженера на полдня всего лишь для завершения сборки лишала нас возможности использовать модель параллельной разработки. Так что нужно было как можно скорее изменить такой порядок вещей.</emphasis></p><empty-line/><p>При регулярном создании сборок разработчики могут проверять интеграцию кода. Интерфейсы API, файлы заголовков, параметры, типы данных и макросы — все должны быть в полностью рабочем состоянии, иначе сборка пройдёт некорректно. Сбой при сборке заставит разработчиков общаться друг с другом и при необходимости изменять программу. Но ведь это именно то, что вам нужно: искать и устранять проблемы на раннем этапе, а не в самом конце, скажем, за день до того, когда от вас требуется бета-версия.</p><subtitle>Как их создавать</subtitle><p>Далее приведён ряд рекомендаций о том, как сделать задачу создания сборки более простой и эффективной.</p><subtitle>Утилита Make</subtitle><p>Поддерживает набор правил сборки и отношений в программе для всего приложения или компонента. Описав эти правила, Make может решить, какие образы необходимо собрать и какие исходные файлы должны быть откомпилированы или скомпонованы.</p><p>Make существует уже несколько десятилетий, всё началось в UNIX, а затем она появилась практически на всех остальных платформах. В течение многих лет её улучшали, и последняя версия — Nmake — входит в состав Microsoft Visual Studio. Обязательно изучите утилиту Make в вашей среде разработки и используйте её для автоматизации задач сборки ПО.</p><subtitle>Номера сборок</subtitle><p>Разработчики используют номера для уникальной идентификации сборок. Номер сборки — это монотонно возрастающая целая величина, ни разу не повторяющаяся в истории создания приложения. Номер увеличивается на базовых уровнях, этапах и в каждом последующем выпуске ПО.</p><p>Когда сборка приложения происходит просто, в вашей среде разработки и тестирования, вероятно, будет большое число разных сборок. Со временем возможность идентификации определённой сборки, установленной на машине, а также программных компонентов, сопровождающих её, становится очень значимой. Также это относится к идентификации сборок, в которых появились или были устранены крупные неисправности. После того, как программа выпущена для потребителей, возможность идентифицировать определённую сборку станет ещё критичнее.</p><p>Номер увеличивается на единицу каждый раз при создании очередной сборки. Обычно увеличение номера происходит в самом начале процедуры сборки, затем он помещается в рабочие файлы, и все компоненты могут включать его в свой состав или ссылаться на него. Обычно номер сборки указывается в окне, вызываемом командой About меню Help, так что все пользователи могут видеть, с какой сборкой работают.</p><subtitle>Сборочные машины и лаборатории</subtitle><p>Сборочная среда — это набор приложений, инструментов, библиотек и компиляторов, нужных для компиляции и компоновки ПО. Часто лучше всего установить эту среду на нескольких выделенных сборочных машинах, которыми распоряжаются и управляют исключительно технологи по разработке ПО, изменения на этих машинах недопустимы. Важно обеспечить и регулярное резервное копирование дисков этих машин, чтобы восстановление было простым и быстрым. А чтобы избавиться от неожиданных трудностей, не забудьте установить антивирусное ПО.</p><p>С ростом числа ваших сборочных машин потребуется целая сборочная лаборатория. Лаборатория полезна, когда нужно параллельно собирать действительно большие программы или большое количество программ (возможно, по ночам). Сборочная лаборатория поможет обезопасить наши машины и предотвратить посторонние вмешательства, способные привести к сбою.</p><subtitle>Оповещение и сбои</subtitle><p>О завершении сборки команду надо оповестить. Извещение может быть послано в список рассылки всей команды проекта или для этих целей может быть создан свой список рассылки.</p><p>Оповещение всех участников команды особенно ценно, если появляется сбой. Когда такое происходит, очень важно, чтобы ведущий разработчик или сотрудник такого же уровня посмотрел журнал ошибок и определил природу проблемы. Он будет отвечать за решение проблемы до тех пор, пока для её решения не будет назначен конкретный специалист.</p><subtitle>Проверка</subtitle><p>Созданная сборка должна быть помещена на сетевой диск с совместным доступом, где она будет проверена при помощи автоматических тестов, созданных командой тестирования. Проверка — очень важный этап, так как наличие готовой сборки ещё не означает, что продукт в рабочем состоянии. Вы знаете только то, что можете компилировать, и компоновать все нужные файлы.</p><p>Один из лучших способов проверить сборку — установить продукт и запустить базисные тесты (см. о них главу 6). Для эффективного управления этим процессом для сборок следует завести два каталога.</p><p>• <emphasis>Самая последняя сборка (MRB)</emphasis></p><p>В этом каталоге хранится самая последняя сборка программы. Однако она может и не устанавливаться или не работать правильно.</p><p>• <emphasis>Последняя хорошая сборка (LKGB)</emphasis></p><p>Здесь хранится последняя хорошая сборка. Убедившись в том, что текущая сборка находится в хорошем состоянии (она установилась и прошла базисные тесты), скопируйте содержимое каталога MRB в каталог LKGB.</p><p>Для своей повседневной работы команда должна производить установку из каталога LKGB. Обычно команда, отвечающая за контроль качества, перемещает последнюю сборку в LKGB сразу после её проверки. Если в последней сборке обнаружены проблемы, команда все равно может работать, так как сборка в каталоге LKGB является рабочей.</p><subtitle>Штрафы и измерения</subtitle><p>Как я говорил в главе 5, в NuMega решили обойтись без большого числа технологических приёмов (процессов). Но к процессам, которые у нас имелись, мы относились очень серьёзно и следовали им. Сборка являлась одним из них. Мы решили, что если кто-то ломает сборку, то на следующее утро он покупает пончики на всю команду. Такая простая, но эффективная стратегия подчеркнула необходимость работы над сборкой должным образом и установила наказание за её порчу. В тех командах, где не было технологов, сломавший сборку брал на себя обязанности по технологической поддержке до следующего сбоя.</p><p>Другим способом подчеркнуть важность процесса сборки является его измерение. Следите за тем, сколько раз за период времени в сборке происходит сбой, и, возможно, за тем, из-за кого сбои происходят чаще всего. Знание того, что за процессом сборки наблюдают, подстёгивает людей к самодисциплине при сдаче исходных файлов. Также вы можете наблюдать за тем, сколько времени команда работает, не ломая сборку, и предложить стимулы для достижений в этой области. В больших организациях можно подумать об организации соревнования с другими командами.</p><subtitle>Частота сдачи и проверки сборки</subtitle><p>Чтобы не сломать сборку, ответьте на следующие вопросы.</p><p>• <emphasis>Когда я должен сдать мой код?</emphasis></p><p>Сдавайте свою часть кода, когда у нас есть что добавить к проекту. Это может быть сосём простое добавление, скажем, набор заглушек API, или очень сложное, например, крупный компонент. Но вы должны сдавать свой код часто. Смысл в том, чтобы как можно раньше заставить работать код, созданный разными людьми.</p><p>• <emphasis>Как я могу быть уверен в том, что не испорчу сборку?</emphasis></p><p>Если возможно, для проверки кода осуществите локальную сборку программы. Вы как обычно берете код из системы управления исходным кодом, интегрируете ваш код и возвращаете его в систему. В большинстве проектов эта процедура выполняется просто, и это отличный способ гарантировать то, что вы не испортите сборку. Дополнительно, чтобы убедиться в отсутствии новых ошибок, можно запустить входные тесты (см. главу 6).</p></section><section><title><p>Процедура установки</p></title><p>Процедура установки важна не только для потребителя проектах в последнюю очередь, от чего может пострадать весь проект. Здесь я расскажу, почему процедура установки так важна и как строить процедуру установки параллельно разработке ПО.</p><subtitle>Почему это важно</subtitle><p>Процедура установки служит для выполнения двух важных функций. Во-первых, она заставляет команду думать об установочной среде, которая требуется для продукта. Процедура установки требует от вас знания состава приложения: образов, библиотек, компонентов, файлов справки, библиотек типов и т.д. Также она заставляет вас определить исполняющую среду, в том числе поддержку драйверов баз данных, стандартных компонентов и операционных систем. Если вы сохраните компоненты продукта целыми и актуальными, вы сможете избежать проблем в дальнейшем.</p><p>Во-вторых, при наличии процедуры установки у членов команды имеется простой доступ к самым последним сборкам программы. Им не нужно запоминать все ненужные подробности по поводу установки программы, такие как местоположение файлов, процедур регистрации компонентов, команд запуска, параметров реестра и т.д. Они могут просто установить продукт и использовать его для своих целей. Примеры использования перечислены далее.</p><p>• Разработчики смогут увидеть свои компоненты со стороны официальной сборки и оценить проблемы, используя ту же процедуру установки, что и вся команда.</p><p>• Тестировщики будут устанавливать программу обычным образом и тестировать её на наличие проблем. Работать с последней сборкой будут как автоматические регрессивные тесты, так и вся команда, которая будет тестировать последнюю хорошую сборку. Это обеспечивает тестирование самой последней и наиболее стабильной версии программы. Единая официальная сборка упрощает и определение работоспособности компонентов. То, что разработчику удаётся заставить компонент работать на своей машине, не имеет значения, если компонент не работает в официальной сборке. Если в официальной сборке компонент, установленный при помощи текущей процедуры установки, не заработал, значит, он не работает вообще.</p><p>• Для корректного составления документации техническим писателям нужно видеть, использовать и оценивать программу. Доступ к сборке, которую можно установить, заметно ускоряет их работу, так как новые возможности, добавленные разработчиками в сборку, видны и могут быть документированы на следующий день.</p><p>• По мере развития сборки специалисты по инженерной психологии смотрят за тем, как пользовательский интерфейс продукта претворяется в жизнь, оценивают его и дают рекомендации. Без официальной сборки у психологов нет простого доступа к компонентам, с которыми они должны работать. В итоге проколы и несогласованности проекта обнаруживаются в процессе разработки слишком поздно.</p><p>• Значительно расширяются возможности менеджера проекта. Наличие официальной сборки обеспечивает отличное видение текущего состояния проекта. Состояние компонентов, параметров производительности, качества онлайновой справочной системы и т.д. перестаёт быть секретом.</p><p>• И, наконец, имея процедуру установки на раннем этапе, расширяется обратная связь с другими группами, такими как менеджеры продукта, специалисты по технической поддержке и отдел продаж. Каждая из этих групп даст ценные отзывы о продвижении продукта, а также сможет отловить несколько ошибок.</p><subtitle>Как её создавать</subtitle><p>Хотя конкретные детали по применению значительно отличаются для разных продуктов и приложений, подход к процедуре установки всегда одинаков. Вы начинаете создание процедуры установки в самом начале проекта и со временем наращиваете её.</p><subtitle>Скелет</subtitle><p>Первый шаг в создании процедуры установки — конструирование скелета. Задача проста: сделать так, чтобы первый набор файлов был скопирован в каталог установки, Если даже программа не может сделать ничего, кроме как вывести на экран надпись «Hello World», для неё нужно создать процедуру установки. Она не должна быть сложной, но вам по крайней мере следует создать инфраструктуру, на основе которой начнётся строительство.</p><subtitle>Мышцы</subtitle><p>С продвижением проекта строительство продолжится на основе простой структуры, созданной вами, путём добавления сложных и утончённых элементов. Смысл в том, чтобы улучшать процедуру параллельно разработке проекта, т.е. сначала вы строите скелет, а со временем наращиваете его. Скажем, завершены новые компоненты, включена поддержка новых ОС или баз данных, упрощён текст лицензионных требований — вам нужно добавить новые файлы и изменить процедуру согласно новым требованиям.</p><p>Я не предлагаю проводить эту работу на сиюминутной основе — это вызовет только беспорядок. Следует добавлять компоненты в процедуру установки лишь по необходимости. Ваша задача — написать план разработки процедуры установки, обеспечивающий включение определённых компонентов и поддержки, необходимой для разработки и тестирования. Этот план должен помочь вам найти равновесие между двумя крайностями: ежедневного внесения изменений и несвоевременного приведения продукта в соответствие с требованиями.</p><subtitle>Комплект</subtitle><p>Это набор файлов, поставляемый пользователю. В процессе создания комплекта процедура установки связывается с устанавливаемыми файлами. Результатом часто является набор сжатых файлов, не представляющих того, что реально будет помещено на систему пользователя. Хорошо бы знать, что применяется в процессе создания комплекта и что получается на выходе. Неплохо разработать и тест, проверяющий наличие нужного числа файлов с приблизительно правильной датой и размером. Для этого могут быть очень полезны приложения, автоматически проверяющие содержимое комплекта.</p></section><section><title><p>Сбор всего вместе</p></title><p>Когда у вас есть сборки и процедура установки, следует собрать все вместе в автоматизированный конвейерный процесс. Процесс должен быть создан в самом начале проекта, возможно, это должно быть первой задачей.</p><p>Главные шаги цикла сборки таковы:</p><p>• сборка образов;</p><p>• создание комплекта;</p><p>• тестирование комплекта;</p><p>• отправка сообщения о прохождении теста или сбое;</p><p>• запуск базисных тестов для проверки сборки;</p><p>• если тест пройден удачно, копирование в каталог LKGB;</p><p>• отправка сообщения о прохождении базисного теста или о сбое.</p><subtitle>Ежедневные сборки, комплекты и тесты</subtitle><p>Ежедневный процесс сборки, создания комплектов и тестирования задаёт темп реализации проекта. Эти процессы надо запускать еженощно, а чтобы точно понять состояние проекта, — результаты просматривать каждое утро. Только тогда вы сможете принимать грамотные решения о необходимых изменениях. Без этих процессов вы будете действовать вслепую и никогда не узнаете, собирается ли проект воедино (и вообще сможет ли он заработать), пока не будет слишком поздно, и вы ничего не сможете поделать. Всё, что вам останется, — сдвинуть график.</p><subtitle>Убеждение</subtitle><p>В организациях, где уже приняли эти правила, люди знают, что сборки, установки и базисные тесты могут выполняться ежедневно. Но в других организациях сотрудники могут отнестись к этому скептично. Обычно они слишком заняты, у них нет ресурсов, и они противятся выполнению лишней работы. У кого есть время на эту ерунду? Я бывал в таких фирмах и знаю, что это сложно. Но выгода огромна, и вы можете внедрить эти принципы. Я рекомендую сначала убедить команду в этих идеях, а затем реализовывать их шаг за шагом: сначала создавать рабочие сборки, затем процедуры установки и, наконец, базисные тесты.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Вначале принцип ежедневной сборки был новым для нашей компании. Мы были небольшой командой, и запускать процесс ежедневной сборки было сложно. Не хватало поддержки, достать сборочную среду, машины и наладить процессы было тяжело.</emphasis></p><p><emphasis>Однажды я спросил, была ли сегодняшняя сборка уcпешной. Коллега ответил: «Ты что, считаешь, что мы должны создавать эту сборку каждый день?» Да, каждый день. Это часть нашей модели разработки, и это критично для способа, которым мы работаем.</emphasis></p><p><emphasis>Спустя годы смешно оглядываться на те дни. Сейчас ежедневные сборки — часть нашей культуры, чему никто не сопротивляется. Это само собой разумеется, и когда в сборке происходит сбой, мы видим справедливый гнев всей команды.</emphasis></p><empty-line/></section><section><title><p>Типичные проблемы и их решение</p></title><p>Далее обсуждается ряд типичных проблем и вопросов, возникающих при использовании описываемых здесь методик, а также их решения.</p><subtitle>Отсутствие технологов по разработке ПО</subtitle><p>Не забудьте учесть в планах и графике вашего проекта мероприятия по технологическому обеспечению. Некоторые команды не учитывают значительный объём работ в этом направлении. В результате их часто ожидают сюрпризы и необходимость корректировки графиков.</p><subtitle>Недостаточная автоматизация</subtitle><p>Автоматизация сборки, создания комплектов и тестирования очень важна. Выполнение этих задач вручную потребует много времени и усилий, которые могут быть потрачены на что-то другое.</p><subtitle>Запоздалая процедура установки</subtitle><p>Некоторые команды часто строят исполняемые файлы, но не создают программу установки до самого конца проекта. Такой подход ухудшит видение проекта, а преимущество простого доступа, вытекающее из ранней процедуры установки, теряется всеми членами команды. Столь же часто члены команды обнаруживают, что создание процедуры установки займёт гораздо больше времени и она более сложная, чем думали изначально, а её отладка потребует ещё времени. К сожалению, поздняя разработка чего-либо, в том числе процедуры установки, добавляет риск и способна нарушить график.</p><empty-line/><subtitle>Дисциплина</subtitle><p>Ежедневное создание сборок, комплектов и тестирование требует много сил. Если дисциплина в команде недостаточно высока или проблемы остаются неразрешёнными, вы не сможете воспользоваться преимуществами, о которых мы говорили ранее. У команды должна быть культура решения проблем. Каждый член команды должен быть дисциплинирован и бороться с проблемами с момента их появления.</p></section></section></section><section><title><p>Часть 2</p><p>Формулирование и планирование проекта.</p></title><section><title><p>Глава 8</p><p>Требования</p></title><section><p>В этой главе рассматривается процесс формулирования требований к программному продукту. Каждый член команды разработчиков должен чётко представлять, какую программу нужно создать, для чего она предназначена и каковы её возможности — иначе у вашего проекта не будет ни единого шанса на успех. Проще всего добиться этого понимания с помощью чётко определённого и строго контролируемого набора требований. Но не менее важна возможность улучшения программного продукта и переработки некоторых его фpaгментов. Проект должен допускать постепенное улучшение программы вплоть до добавления одних функций и удаления других. Эти две потребности — строгий контроль и свобода развития — часто выглядят взаимоисключающими, поэтому рассмотрим каждую из них.</p><p>Для первой требуется чётко сформулированный, подробный и строгий список требований, оговаривающий практически все особенности продукта. Его дополняет жёстко заданный набор процессов, управляющих внесением изменений. Проблема этого метода заключается в трудности создания такого списка требований, особенно при работе в новых, неразработанных областях. Кроме того, он с трудом обеспечивает постепенное улучшение продукта и организацию обратной связи. Даже если создать подробный список требований было бы возможно, то в письменной форме он часто терял бы свою однозначность, а поддерживать его в актуальном виде было бы довольно трудно.</p><p>Второй подход утверждает, что достаточно лишь создать простой список требований в общей формулировке. Идея в том, чтобы дать разработчикам свободу принимать решения о реализации основных функций продукта во время его разработки. Более динамичная среда позволит разработчикам оперативно воплощать новые идеи и адекватно реагировать на потребности рынка. Однако этот подход полон неопределённости и риска: трудно планировать рабочий процесс, а управлять — ещё труднее. Это также негативно сказывается на тестировании и создании документации, так как до самого выпуска, т.е. до выяснения истинной картины функциональности продукта, сведений о продукте для начала работы будет недостаточно.</p><p>У каждого подхода свои преимущества, но какой же из них выбрать? Нужно, ещё до начала написания кода, установить фундаментальные требования, но при этом иметь возможность вносить контролируемые изменения во время цикла разработки. Давайте обсудим процесс управления требованиями, который позволит их сбалансировать.</p></section><section><title><p>Центральная идея проекта</p></title><p>В начале работы над каждым выпуском нужно добиться простого и ясного видения проблемы, при котором задачи и приоритеты проекта стали бы очевидными для всех его участников; критически важно объединить их усилия и гарантировать, что группа будет работать сообща.</p><p>Атрибутом хорошего видения проблемы является центральная идея (лейтмотив проекта), которая сплотит группу и даже всю компанию воедино. Она должна не только направлять усилия при разработке, но и способствовать позиционированию, сбыту и продвижению продукта на рынке. Вокруг неё должны объединиться все группы, обеспечивающие коммерческий успех продукта.</p><p>Хотя у крупных проектов может быть несколько таких идей, распыляться всё же не стоит. Основная идея проекта должна быть сформулирована кратко и ясно, в ней должен быть призыв к превосходству в одной-двух областях. Выбрать её нелегко, обычно такая идея является результатом тщательного анализа рынка и состояния бизнеса в данной области. Убедитесь, что достижение цели, поставленной основной идеей, принесёт значительную прибыль.</p><p>Мы в NuMega всегда пытались сделать выпуск каждого продукта волнующим событием, претендуя на самый короткий срок его создания, либо на первенство в использовании новых технологий, вплоть до того, что целью ряда наших проектов было получение премий в нашей отрасли. Вот ряд идей, которые в прошлом позволили эффективно объединить наши усилия по разработке:</p><p>• закрыть путь на рынок новым конкурентам, предоставив программистам на языке C/C++ продукт с самым полным набором функций по обнаружению ошибок;</p><p>• создать продукт для анализа производительности, самый простой в эксплуатации во всей отрасли, и добиться признания этого факта;</p><p>• создать самый мощный и функционально насыщенный отладчик ядра Windows NT.</p><p>Мы руководствовались этими идеями при выборе функций продукта и в процессе их реализации. Они также играли главную роль, когда приходилось идти на компромисс. Например, если приходилось выбирать одну из двух взаимоисключающих возможностей, достаточно было одного взгляда на центральную идею проекта, чтобы стало ясно, какую из них выбрать.</p><subtitle>Поиск и решение пользовательских проблем</subtitle><p>Сформулировав центральную идею проекта, надо сосредоточиться на потребностях пользователя. На этом этапе процесса формулирования требований следует рассматривать те проблемы, что необходимо решить пользователю, а не конкретные действия, которые он хотел бы выполнять. Возьмём в качестве примера одну из формулировок идеи проекта из предыдущего раздела. Если нужно предоставить программистам на C/C++ наиболее полный продукт для обнаружения ошибок, то надо выяснить, какие ошибки являются наиболее распространёнными и труднее всего поддаются обнаружению. Вот ещё один пример: если нужен самый простой в использовании продукт для анализа производительности, нужно понять, какие сведения о производительности критичны для пользователей и в каком виде они хотели бы их получить.</p><p>Чтобы понимать пользовательские проблемы, важно поддерживать обратную связь с клиентами для проверки сделанных предположений. Лучший способ убедиться в разумности своих планов и преодолеть внутренние разногласия — иметь обратную связь, заслуживающую доверия.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>При работе над BoundsChecker 3.0 было много прений вокруг набора функций продукта. Несколько недель обсуждения этого предмета, порой доходившего до жарких споров, прошли без видимого прогресса. Было принято совместное соглашение оставить этот вопрос, чтобы избежать возобновления споров. Чтобы выйти из тупика и поднять боевой дух группы, мы решили пригласить группу заказчиков и потенциальных пользователей на вечеринку с угощением и раздачей призов. Там мы продемонстрировали разные идеи о возможных функциях программы и попросили приглашённых высказать своё мнение. На основе информации извне стало намного легче прийти к компромиссу и выработать решение, у которого были неплохие шансы на успех.</emphasis></p><empty-line/></section><section><title><p>Формулирование требований</p></title><p>Когда установлено общее видение проекта и достигнуто понимание пользовательских проблем, пора переходить к определению требований. Как сформулировать требования, насколько подробными должны быть формулировки и как ничего не упустить?</p><empty-line/><subtitle>Общие и частные требования</subtitle><p>Один из лучших способов дать чёткое описание набора требований к проекту — представить его в виде схемы. Самый высокий уровень схемы занимают общие требования. Они объединяют совокупности частных требований, которые, таким образом, можно обсуждать, оценивать, сравнивать и утверждать как единое целое. Нужно иметь возможность анализа общих требований и обладать совершенным пониманием их основных целей. Общих требований не должно быть слишком много, так как каждое в свою очередь генерирует ряд второстепенных требований. Например, в случае компании, которой надо адаптировать имеющееся приложение обработки заказов для работы в Интернете, достаточно пяти общих требований:</p><p>• разработать интерфейс на базе браузера;</p><p>• повысить производительность до уровня, приемлемого для Web-пользователей;</p><p>• организовать рассылку уведомлений о выполнении заказов по электронной почте;</p><p>• добавить к программе новые возможности, которые повысят производительность пользователей;</p><p>• предусмотреть применение в будущем в качестве клиентской платформы карманных компьютеров.</p><p>Каждое общее требование должно подразделяться на несколько частных. С последними могут быть связаны и другие требования, конкретизирующие или поясняющие функциональность требований более высокого уровня. В результате документация может принять такой вид:</p><p>• Общее требование 1</p><p>•• Частное требование 1</p><p>••• Частное требование нижнего уровня 1.1</p><p>••• Частное требование нижнего уровня 1.2</p><p>•• Частное требование 2</p><p>••• Частное требование нижнего уровня 2.1</p><p>••• Частное требование нижнего уровня 2.2</p><p>Ниже приводится пример некоторых общих и частных требований, организованных в соответствии с вышеописанной структурой.</p><empty-line/><p>• Разработать интерфейс на базе браузера для приложения по обработке заказов.</p><p>• Функциональные требования.</p><p>•• При размещении заказа:</p><p>••• Ввести для каждого заказа следующую информацию (по пунктам).</p><p>••• Проверить идентификатор покупателя.</p><p>•• Удалить заказ.</p><p>•• Проверить статус заказа.</p><p>•• Сгенерировать подтверждение заказа.</p><p>• Обеспечить поддержку следующих браузеров:</p><p>•• Microsoft Internet Explorer версии X.</p><p>•• Netscape версии Y.</p><p>• Производительность должна быть приемлема для Web-пользователя.</p><p>• Требования ко времени реакции системы:</p><p>•• Размещение заказа должно занимать менее 3 секунд.</p><p>•• Удаление заказа должно занимать менее 6 секунд.</p><p>•• Проверка статуса заказа должна занимать менее 4 секунд.</p><p>•• Подтверждение заказа должно занимать менее получаса.</p><p>• Облегчить использование приложения с помощью новых возможностей:</p><p>•• Разрешить заказ нескольких товаров в одном заказе.</p><p>•• Разрешить пользователю просмотр его идентификатора покупателя.</p><empty-line/><p>Как видно из этого примера, каждое общее требование включает набор поддерживающих его требований, которые конкретизируют или разъясняют содержание «родительского». Каждое поддерживающее требование сформулировано просто и ясно, что позволяет легко проследить его реализацию в данном выпуске ПО. Следует расширять степень детализации спецификации требований, пока не будут описаны все ключевые элементы функциональности и вы не останетесь довольны созданным описанием.</p><subtitle>Полнота требований</subtitle><p>Определение требований должно быть полным. Рассмотрите все аспекты нового выпуска, даже те, что нельзя свести к набору частных требований. Далее приводится список общих категорий требований, применимый практически ко всем проектам по созданию программ. Я не предлагаю использовать этот список в том виде, в каком он представлен здесь, хотя возможно и такое; однако при составлении собственного списка требований рассмотрите каждую из следующих категорий.</p><p>• <emphasis>Задачи и функции проекта</emphasis></p><p>Каждый участник должен понять ключевые задачи и функции проекта, прежде чем приступать к работе. Эти задачи и функции составляют сущность программного продукта и будут направлять его разработку, а также работу по тестированию и обучению пользователей.</p><p>• <emphasis>Пользовательский интерфейс</emphasis></p><p>Хотя при работе над пользовательским интерфейсом придётся дать ответ на два важных вопроса: «Как пользователю выполнить действие X?» и «Как должна выглядеть функция Y?», лучше не пытаться формализовать их, так как это слишком затруднит описание, тестирование и реализацию последовательных улучшений. Вместо этого надо разработать визуальную модель приложения с помощью различных методик конструирования прототипов пользовательского интерфейса. Эта модель и будет спецификацией требований к пользовательскому интерфейсу. (Подробнее об этот см. главу 9. Там же я расскажу об эффективных способах формулирования и анализа требований к пользовательскому интерфейсу программного продукта.) При наличии конкретной платформы, технологий или связанных с бизнесом ограничений, влияющих на структуру интерфейса, важно оговорить их заранее.</p><p>• <emphasis>Среда</emphasis></p><p>Необходимо описание программной и аппаратной среды, в которой будет работать продукт. В описании должны быть чётко указаны конкретные версии существующего ПО с учётом новых выпусков, которые могут стать доступными к окончанию работы над проектом. Не забывайте о проблемах, связанных с глобализацией: поддержке ОС, местных языков, валют и различий в часовых поясах.</p><p>• <emphasis>Интеграция</emphasis></p><p>Определите потребности, связанные с интеграцией и возможностью взаимодействия с существующими программами и оборудованием. При необходимости интеграции новой программы с существующими решениями, следует указать способ её осуществления и поддерживаемые версии программного и аппаратного обеспечения.</p><p>• <emphasis>Производительность</emphasis></p><p>Определите ожидаемую производительность продукта. Обозначьте в простом виде значения параметров, которые нужно достигнуть, а также возможные способы измерения этих параметров. Следует подумать и о времени реакции системы в зависимости от типов нагрузки и потребностей пользователей.</p><p>• <emphasis>Установка</emphasis></p><p>Уделите внимание установке ПО. В определении требований должны обсуждаться по крайней мере действия, которые должен выполнить пользователь, чтобы установить ПО, а также действия самой программы установки, необходимые для завершения процесса установки. Кроме того, укажите платформы, которые должна поддерживать программа установки.</p><p>• <emphasis>Тестирование</emphasis></p><p>Требования к тестированию продукта могут не только способствовать существенному повышению продуктивности работы, но и принести дополнительные выгоды. Так, если в программе установки предусмотрен режим, не требующий ручного ввода информации, можно будет автоматически устанавливать и тестировать все ежедневные сборки программы. Не исключено, что программный продукт должен будет поддерживать набор API, позволяющих группе, проводящей испытания, читать любые двоичные файлы, используемые или генерируемые приложением. Это позволит сравнивать файлы, полученные в результате нескольких испытаний программы с последовательно изменёнными параметрами. Также можно заставить программу вести протокол внутренних несогласованностей, который будет полезен при диагностике трудно воспроизводимых сбоев в работе программы.</p><subtitle>Детализация требований</subtitle><p>Ещё одна проблема, которую придётся решить, — насколько подробно нужно формулировать требования. Разумеется, в данном случае задача в том, чтобы определение было как можно полнее: чем подробнее описано требование, тем легче следить за ходом его реализации. Чем больше аспектов определено заранее, тем больше параллелизма в работе разработчиков и групп, отвечающих за тестирование, обучение пользователей и выпуск программного продукта, так как тогда им проще понять, какой продукт создаётся. Однако часто подробно документировать требования очень трудно и даже невозможно, так как приходится работать в незнакомых областях (так чаще всего и бывает при работе над программными проектами). Как правило, чтобы понять, что именно пытаются создать участники проекта, приходится изрядно поэкспериментировать и испробовать много новых идей. Бывает и так, что поставленная цель оказывается вовсе недостижима. Ниже я опишу способ, позволяющий согласовать потребности в эксперименте и в документировании требований к проекту.</p><p>Недостаточно подробное определение обычно является следствием недостаточного понимания. Если недостающие сведения относятся к маркетингу или другим вопросам бизнеса, то разработчики мало чем помогут — это работа менеджера проекта и менеджера по маркетингу. Однако при нехватке сведений о реализуемых функциях, например, когда неясно, как работает та или иная функция, откуда берётся информация или чего хочет пользователь, можно создать прототип пользовательского интерфейса, иллюстрирующий внешний вид этих функций. Если недостающая информация касается технических возможностей, скажем, может ли программный продукт выполнять те или иные действия, можно провести анализ технической осуществимости, а затем создать прототип. Вот как свести воедино информацию из реального мира, экспериментальную работу и творческий процесс в процесс формулирования требований, прежде чем перейти к планированию (рис. 8-1).</p><p>Главная идея в том, чтобы заранее выяснить места возможного риска и до начала работы над проектом разработать решения потенциальных проблем. Анализ осуществимости и прототипы пользовательского интерфейса помогут понять суть проблемы, оценить потребности и снизить общий риск. Эти методики обеспечивают процесс формулирования требований обратной связью с внешним миром и позволяют составлять более детальные планы.</p><empty-line/><image l:href="#pic81.jpg"/><p>Рис. 8-1. Связь между требованиями, практичностью и созданием прототипа.</p><p>О базовых методиках анализа технического риска и создания прототипов пользовательского интерфейса, а также их использование для формулирования оптимальных требований см. главы 9 и 10.</p></section><section><title><p>Анализ требований</p></title><p>Когда требования сформулированы, но ещё не утверждены, разумно проанализировать их в целом и каждое по отдельности. Требования к новой программе нужно отбирать очень тщательно. Многие просто берут список требований, не анализируя его с точки зрения коммерческой привлекательности и не удаляя всё, что не вписывается в центральную идею проекта. В итоге получаются программы с плохо организованной функциональностью, не соответствующей назначению программы. Оценке требований и поиску направления, в котором движется разработка вашей программы, должно уделять большое внимание.</p><subtitle>«Фрагментация» требований</subtitle><p>Отойти от намеченного пути при формулировании требований легко. Так бывает, когда упрямый индивид или целая группа уводит «фокус» требований совсем в другую сторону, чем было задумано. Возможно, было легче формулировать требования для тех функций, определить которые было проще всего. Может оказаться и так, что требования сопряжены с чрезмерным для таких программ риском. Как бы ни было, обязательно должны присутствовать объективный взгляд на требования и оценка их влияния на ход проекта.</p><subtitle>Категории требований</subtitle><p>Ниже описаны четыре категории требований.</p><p>• <emphasis>«Опережающие» и «догоняющие» требования</emphasis></p><p>Первые позволяют продукту обогнать конкурентов по рынку. Они могут описывать просто новое представление данных или возможность поддержки новой платформы. Им не обязательно быть революционными — достаточно, что они дают преимущество в конкуренции на момент выхода программы на рынок. Вторые подтягивают функциональность программы до уровня конкурентов. Они призваны сохранить конкурентоспособность и связаны с решением проблем сбыта и технической поддержки.</p><p>Разделение требований на категории «опережающих» и «догоняющих» позволяет проанализировать конкурентоспособность вашей программы. Например, если выяснилось, что в программе реализовано слишком мало опережающих требований или их вообще нет, можно реализовать дополнительные опережающие требования. Стратегия разработки программ в NuMega всегда включает ряд особенностей, которые делают программу уникальной на рынке и позволяют ей стать или остаться, так сказать, «чемпионом породы».</p><p>• <emphasis>Перспективные и ретроспективные требования</emphasis></p><p>Последние направлены на решение проблем, связанных с прошлыми выпусками ПО. Например, для решения проблем с производительностью и удобством использования в последнем выпуске в общем случае служат ретроспективные требования. Так как эти требования — не что иное, как реакция на существующий продукт в существующем окружении, их реализация позволяет улучшить продукт, но не предвосхитить будущие потребности.</p><p>Перспективные требования позволяют заранее побеспокоиться о будущих потребностях заказчика. Они основаны на уверенности в том, что заказчик обязательно изменит свои потребности и желания, даже если сам он ещё об этом не знает. Часто перспективные требования базируются на крупномасштабных изменениях в деловой практике (например, на повсеместном внедрении размещения заказов через Web), технологиях (появление платформ, поддерживающих беспроводную связь) или рынка (слияние двух конкурировавших фирм). Перспективные требования труднее всего сформулировать, но, если удастся верно предугадать нужды потребителя и не ошибиться с выбором рынка и функций ПО, результатом будет значительное преимущество перед конкурентами.</p><p>Подборка ретроспективных и перспективных требований должна соответствовать потребностям, которые призван удовлетворить продукт, особенностям рынка и задачам выпуска. Скажем, можно быстро (за полгода) подготовить выпуск, в котором будет реализован ряд ретроспективных требований, а также включить в него несколько перспективных требований, чтобы не упустить какую-то интересную возможность.</p><p>Перспективные требования вовсе не обязательно являются копией опережающих. Перспективные требования именно предвосхищают потребности, в то время как опережающее требование может быть основано на текущих потребностях клиента, оставленных без внимания конкурентами. Так, введение поддержки диаграмм и графиков и нового одноэтапного процесса ввода данных можно считать опережающими, но никак не перспективными. С другой стороны, поддержку карманных компьютеров можно одновременно рассматривать, как опережающее и как перспективное требование, которое приносит двойную выгоду.</p><subtitle>Наглядное представление требований</subtitle><p>Чтобы понять сформулированные требования в общем, можно использовать таблицу для анализа требований, расписав их по ячейкам таблицы. Эта таблица имеет вид квадрата. поделённого на четыре равные части. Ниже по одной оси находятся догоняющие и опережающие требования, а по другой — перспективные и ретроспективные требования (рис. 8-2).</p><image l:href="#pic82.jpg"/><p>Рис. 8-2. Набор требований, представленный в виде таблицы из четырёх ячеек.</p><empty-line/><p>Далее приводится описание содержимого каждой ячейки таблицы. Расписав собственные требования по ячейкам такой таблицы, вы поймёте, в каком направлении пойдёт работа.</p><p><emphasis>Ячейка 1. </emphasis>Вы предвидите будущие потребности потребителей и будете первым производителем, предоставившим соответствующее решение. Эти потребности пока ещё не до конца поняты и не полностью установлены. Вы первопроходец в этой области, поэтому уровень риска довольно высок. Из-за множества «неизвестных» нельзя заранее предоставить подробное определение требований. Основное внимание должно быть уделено созданию и последовательному улучшению прототипа ПО. Потребуется очень быстро пересматривать структуру ПО в процессе разработки, привлечь для тестирования реальных пользователей и обновить требования до начала этапа планирования.</p><p><emphasis>Ячейка 2. </emphasis>Ряд возможностей ПО, созданного конкурентами, предвосхищают нужды потребителей, поэтому хотелось бы наверстать упущенное. Следует изучить предложения конкурентов, понять, что они сделали правильно, а что — нет, и извлечь урок из допущенных ими ошибок. Риск, связанный с требованиями из этой ячейки, меньше в сравнении с риском в ячейке 1, так как уже существуют программные продукты, способные стать материалом для изучения и извлечения уроков. Однако следует ожидать быстрого изменения рынка и потребностей клиентов, поэтому, прежде чем перейти к формализации требований и созданию плана проекта, придётся затратить много усилий на моделирование технических характеристик и анализ удобства использования.</p><p><emphasis>Ячейка 3. </emphasis>Наверное, реализация требований из этой ячейки доставит меньше всего хлопот, так как нужно предоставить уникальный в отраслевом масштабе набор возможностей без риска ошибиться в прогнозе тенденций рынка. Поскольку вы работаете с хорошо известным и заслуживающим доверия заказчиком, риск при разработке ПО такого типа обычно связан с верной реализацией функций и своевременным завершением разработки, а не с применением инновационных технологий.</p><p><emphasis>Ячейка 4. </emphasis>Тактика заключается в расширении функциональности продукта, который уже поставляют конкуренты. Риск в случае такого ПО должен быть относительно невелик, так как вы работаете в основном с хорошо известными функциями и технологиями на устоявшемся рынке. Поскольку риск столь мал, на тестирование удобства использования и последовательное улучшение прототипа уйдёт меньше времени, чем в других случаях.</p><p>Помните: задача — обеспечение желаемого коммерческого эффекта при реализации сформулированных вами требований. Хотя вполне можно создать набор требований, распределяющийся по ячейкам таблицы практически поровну, в общем случае это нежелательно, поскольку так можно легко отойти от намеченной цели. Намного лучше сосредоточить большинство требований в одной из ячеек, а остальные требования разместить ещё в одной-двух ячейках.</p></section><section><title><p>Определение приоритетов</p></title><p>Определив и проанализировав требования, вы вплотную приблизились к обладанию полным набором функциональности. Но, прежде чем идти дальше, нужно задать приоритеты требований. Это поможет заранее оценить важность каждого требования и понять, как они связаны с другими требованиями.</p><subtitle>Почему это так важно</subtitle><p>Расстановка приоритетов определяет планирование и распределение задач. Вообще при планировании стараются наметить окончание реализации наиболее критичных требований на максимально ранние сроки. Если сначала сконцентрировать усилия команды на воплощении самых важных требований, можно снизить неопределённый риск, неизбежно присутствующий в любом плане. После завершения реализации критичных функций новая программа уже будет жизнеспособной. Если на этом этапе придётся сжимать сроки или вносить непредвиденные изменения, то вы окажетесь в выигрышном положении и сможете быстро завершить работу над новым выпуском программы, так как её основные функции будут уже готовы.</p><p>Коллектив должен заранее прийти к соглашению об уровне приоритета каждого из требований. Лучше, чтобы в момент принятия трудных решений (если такой момент настанет) об исключении той или иной функции вами не владели эмоции и напряжённость ситуации, что может сказаться на принятии решения. Не должно быть никаких сомнений в том, какие функции обязательны, а какие — нет. Приоритетные функции данного выпуска должны быть ясны каждому участнику проекта.</p><subtitle>Как это делается</subtitle><p>Каждому требованию должен быть назначен тот или иной приоритет. Детализация приоритетов может быть любой, в зависимости от потребностей. Уровни приоритета можно определить следующим образом:</p><p>• <emphasis>Необходимые</emphasis></p><p>Обязательно должны быть воплощены в программе, без этого её нельзя выпускать на рынок. Необходимые функции должны быть реализованы и испытаны как можно раньше; этому нужно уделить максимум внимания и все ресурсы.</p><p>• <emphasis>Желательные</emphasis></p><p>Присутствие этих требований крайне желательно. При достаточном обосновании от их реализации можно отказаться, но это не уменьшает важности их наличия в программе. Реализация и испытания желательных требований начинается сразу после обязательных.</p><p>• <emphasis>Возможные</emphasis></p><p>Эти требования также желательны, но реализуются в последнюю очередь и являются первыми кандидатурами на удаление, если вдруг возникнут проблемы со сроками.</p></section><section><title><p>Утверждение требований</p></title><p>Многие ошибочно считают, что сформулировав требования, они готовы к распределению заданий и планированию проекта. Это не так. Нужно выполнить ещё два важных действия: провести техническую экспертизу основных факторов риска, связанных с технологиями, и создать прототип пользовательского интерфейса вашей программы. См. об этом главы 9 и 10.</p><p>Представим на минуту, что прототип пользовательского интерфейса уже готов и технологическая экспертиза закончена. Готовы ли вы поставить свою подпись на списке требований? Ещё нет. Нельзя утверждать требования, пока не составлен план работы. Может оказаться, что на исполнение плана должно уйти слишком много времени, и придётся отказаться от реализации части требований. Если требования уже утверждены, то может оказаться, что при их реализации не удастся уложиться в заданные временные рамки. Не стоит утверждать требования поодиночке, пока не будет ясности с другими требованиями.</p></section><section><title><p>Управление внесением изменений</p></title><p>Разработка ПО — динамический процесс. Не важно, насколько всеохватывающими будут начальные требования — все равно по мере продвижения по циклу разработки придётся вносить изменения. Постоянно возникают неожиданные проблемы, рождаются идеи, меняются потребности рынка. Однако изменчивость требований — не самая большая проблема. Важнее организовать работу, чтобы поднимать эти проблемы для последующего решения, направлять процесс принятия решений и доводить результаты до сведения коллектива.</p><p>Вот ряд фундаментальных принципов, которые нужно учитывать:</p><p>• <emphasis>Создавайте команду в составе менеджера проекта и всех руководителей групп, которая будет рассматривать все вносимые изменения</emphasis></p><p>Команда должна регулярно собираться, ответственно подходить к рассмотрению запросов на внесение изменений и гарантировать, что руководитель каждой группы может оценить эффект изменения. Менеджер проекта должен следить, чтобы рассмотрение запросов на внесение изменений шло эффективно, а рассматриваемые запросы не выходили за рамки компетенции команды. Он также должен изучать влияние изменений на план исполнения проекта. При внесении изменений нужно пересмотреть и соответствующим образом изменить план.</p><p>• <emphasis>Необходимо не только разрешить, но и стимулировать группы, ответственные за реализацию определённых функций, к улучшению этих функций ПО</emphasis></p><p>Такая свобода поможет им быстрее пересматривать и улучшать продукт. Однако недопустимо, чтобы улучшения частных особенностей или более тонкая настройка негативно отражалась на исполнении проекта. Если изменение влияет на требования или на его внесение уйдёт больше времени, чем допускает план, при обработке запроса на внесение этого изменения нужно обязательно следовать вышеописанной процедуре.</p><p>Единственное исключение — обязательные требования. Они являются наиболее важными, и их нельзя изменять как таковые без оценки и санкций извне. От реализации этих функций зависит работа других подразделений компании, и их также необходимо включить в процесс принятия решения. Так, внешнюю экспертизу могут производить менеджеры по продукции, маркетингу, старшие менеджеры и другие ключевые заинтересованные лица.</p><p>• <emphasis>Необходимо ознакомить с изменениями всю команду</emphasis></p><p>Эти сведения можно просто разослать по электронной почте или обговорить на очередном рабочем собрании — главное, чтобы в курсе изменений был каждый.</p><p>• <emphasis>Все изменения должны быть документированы</emphasis></p><p>Документирование позволяет команде отслеживать и анализировать изменения в проекте. Следует указывать дату внесения изменения, его суть и краткое обоснование. Важно, чтобы на протяжении жизненного цикла выпуска ПО подобная информация хранилась в едином месте, чтобы все участники группы могли обращаться к ней по мере необходимости. Можно вести реестр изменений в начале документа со списком требований или регистрировать в специальном журнале все утверждённые запросы на внесение изменений.</p></section><section><title><p>Общие проблемы и решения</p></title><p>Далее обсуждается ряд типичных проблем и вопросов, возникающих при использовании описываемых здесь методик, а также их решения.</p><subtitle>Как изыскать время</subtitle><p>Одна из самых распространённых причин для отказа от формулирования требований (а также от затраты усилий на создание прототипов пользовательского интерфейса) в том, что на решение этих задач требуется время. Узнав, сколько времени уходит на это, некоторые спрашивают: а с пользой ли оно тратится? В начале проекта все находятся под давлением потребности поскорее выдать первые результаты, поэтому такой вопрос вполне закономерен.</p><p>Ответ однозначен: «Да». Некоторые подходы к разработке ПО подразумевают затрату значительного времени на анализ и вывод подробных формулировок требований. Но подход, рассматриваемый в этой главе (и в следующих двух) предлагает цикл определения требований — он экспериментально проверен и подтверждён положительными отзывами. Это не только не позволяет группе расслабиться, но и даёт возможность проявить творческий подход и поэкспериментировать, прежде чем черновики планов будут созданы и переданы на утверждение. Кроме того, использование прототипов пользовательского интерфейса и технических решений позволяет увидеть и почувствовать результаты работы над проектом.</p><subtitle>Формулируйте сами задачи, а не способы их решения</subtitle><p>Спецификация требования должна отвечать на вопрос «что должно быть сделано?», а не «как это сделать?». Ответ на вопрос «как?» проще всего получить с помощью анализа технической осуществимости и создания прототипа пользовательского интерфейса. К сожалению, часто формулировки требований включают описание способов их реализации, что может сузить выбор возможных решений. Вместо этого следует позволить команде задействовать свой творческий потенциал, чтобы генерировать множество возможных решений, а затем экспериментально проверить их в реальном мире.</p><p>Рассмотрим в качестве примера вышеупомянутое приложение для обработки заказов. Одно из ключевых требований таково: «Принимая заказ на товар, нужно собрать следующую информацию: X, Y и Z». Заметьте: требование содержит формулировку самой задачи, но не способа её решения. Можно привести пример требования с описанием способа его реализации: «Пользователь должен выбрать в меню пункт New|Create Order и ввести нужную информацию в диалоговом окне». Лучше позволить команде, ответственной за разработку пользовательского интерфейса, самостоятельно найти лучший способ реализации этого требования путём работы с прототипом.</p><subtitle>Не упустите главное</subtitle><p>В большинстве случаев участники проекта воспринимают формулирование требований в штыки именно из-за плохо налаженного управления требованиями. Проекты страдают из-за «размазанности» и неполноты требований, отсутствия приоритетов и из-за неуправляемых изменений. В этой главе мы сосредоточились лишь на главных вещах, необходимых для поддержания проекта в управляемом и предсказуемом состоянии, не перегружая группу обработкой второстепенной информации и бумажной работой. Не забывайте всё, о чём здесь говорилось, при работе над собственным проектом.</p></section></section><section><title><p>Глава 9</p><p>Исследования, оценка технологий и моделирование</p></title><section><p>В начале любого напряжённого проекта велико искушение принять решения о применении новых технологий, компонентов и платформ лишь на основе общих допущений. Производительность, масштабируемость и даже среду разработки и инструменты нередко оценивают и подбирают «на глазок». Если сделанные допущения верны, считайте себя большим героем, сэкономившим кучу времени. Но в случае ошибки проект с самого начала обречён.</p><p>Значит ли это, что любой проект — это лотерея? Да, во многом так оно и есть: не разобравшись в некоторых вопросах планирования, о которых пойдёт речь в этой главе, вы сильно рискуете. Иногда этот риск оправдан, но чаще — нет. Почему? Да потому, что в данном случае все против вас: чем больше вы делаете допущений, тем больше риск.</p><p>Не правда ли, здорово было бы знать, как делать предположения с минимальной вероятностью ошибки? И ещё лучше, если бы основные предположения можно было проверить до утверждения окончательной даты выпуска, правда? В этой главе мы обсудим, как с помощью исследований, оценки технологий и моделирования проверить предположения и не дать проекту сойти с дистанции.</p></section><section><title><p>Чем полезны исследования и прототипы</p></title><p>Исследования, оценка и использование прототипов позволят ещё до начала работы над проектом понять все возможности и ограничения технологий, которые планируется применить. Если максимально задействовать эти подходы, то все перечисленное ниже станет намного легче.</p><p>• <emphasis>Упрвление рисками и создание рациональных планов</emphasis></p><p>На ранних стадиях реализации проекта надо определить основные технологические проблемы и наметить пути их решения. Нерешённые технологические проблемы могут внести хаос в реализацию проекта. Фактически это одна из самых распространённых причин срыва планов. Не следует утверждать план или начинать работу над проектом, пока не решены основные технологические проблемы.</p><p>• <emphasis>Уверенность в успехе</emphasis></p><p>Когда технологии, подходы и архитектура применяются впервые, мало кто из коллектива верит, что всё заработает. Это и понятно: в отсутствие опыта решения подобных проблем шансы на успех могут казаться призрачными. Однако такого рода сомнения могут стать источником реальных проблем. От недостатка уверенности в успехе проекта страдает не только боевой дух группы, но и производительность труда. Поэтому задача — как можно раньше исключить всякие сомнения и создать уверенность, что проект может быть и будет успешным.</p><p>• <emphasis>Прогноз проблем с производительностью</emphasis></p><p>Почти всем ясно, что производительность приложений приобретает всё более важное значение. К сожалению, оптимизация производительности — это не та задача, которую можно отложить на потом, чтобы заняться ею в конце работы над проектом. Здесь нужен другой подход: следует заранее построить модель, воплощающую важнейшие черты архитектуры проекта, и как можно раньше протестировать её, чтобы выяснить, насколько хорошо она масштабируется.</p><p>• <emphasis>Прорывы в технологии</emphasis></p><p>Чтобы работать на рынке с жёсткой конкуренцией необходимы исследования. Следует направить часть усилий группы на прогноз нужд потребителей, а также на поиск революционных решений и идей. Прекрасные идеи, новые подходы и хитовые приложения не появляются по волшебству в одночасье — их вынашивают как младенцев.</p></section><section><title><p>Исследования</p></title><p>Хоть некоторые и считают исследовательскую работу чисто академическим занятием, она тем не менее играет важную роль в разработке ПО. В этом разделе мы обсудим основы ведения исследований в приложении к созданию программных продуктов.</p><subtitle>О чём пойдёт речь</subtitle><p>Исследования бывают <emphasis>фундаментальные </emphasis>и<emphasis> прикладные. </emphasis>Первые — это процесс открытий и изобретений в надежде создать что-то полезное. Однако у результата такого исследования может и не быть коммерческого применения. С другой стороны, прикладное исследование на основе логических построений и анализа ситуации в некоторой отрасли ведёт поиск потенциально выгодных решений и пытается превратить гипотезы в конкретные идеи, которые помогут создать некоторый продукт.</p><p>Прикладные исследования — наиболее важная форма исследований в контексте этой книги. Они могут обеспечить критически важное преимущество в конкурентной борьбе, особенно на нестабильном рынке, когда потребности пользователей, ПО и аппаратные платформы и технологии претерпевают стремительные изменения. Хотя изменения часто вносят неопределённость, они также дают невероятные возможности группам, способным предвидеть потребности потребителей и задействовать новые технологии для их удовлетворения. Если, занимаясь созданием новой технологии, вы хотите «остаться на плаву» вопреки всем неожиданностям, то параллельно циклу разработки нужно вести непрерывную исследовательскую работу.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Отладчик ядра SoftICE, созданный NuMega, был хитом на рынке программ для 16-разрядных платформ Microsoft DOS и Microsoft Windows. Нам даже без особых проблем удалось заставить его работать в Windows 95. Однако рынок неуклонно двигался к Windows NT, что вынудило нас заняться адаптацией SoftICE для работы с этой ОС, иначе рост прибылей нашей компании неизбежно снизился бы. Но эта задача казалась просто невыполнимой: новая система управлением виртуальной памятью Windows NT делала реализацию многих функций SoftICE чрезвычайно затруднительной и требовала от большинства участников группы разработчиков SoftICE знания недокументированных внутренних механизмов и структур данных Windows. Большинство работников компании (и не только они) сомневалось, что SoftICE когда-либо будет перенесён на Windows NT.</emphasis></p><p><emphasis>К счастью, среди нас оказался Фрэнк Гроссман, у которого хватило веры в осуществимость этой идеи и желания, чтобы провести соответствующие исследования. Он работал над этой проблемой день и ночь в течение двух недель, пока не создал довольно простой прототип, на примере которого смог продемонстрировать основные методики, необходимые для поддержки Windows NT. Ему достаточно было показать этот прототип группе, и дело было сделано: все поверили, что заставить SoftICE работать в Windows NT всё-таки можно. На реализацию сложных функций программы ушёл почти год, но в итоге мы создали продукт, в появление которого никто не верил. Проведённые исследования позволили нам не только обеспечить стремительный рост потока прибылей, но и воздвигнуть мощный барьер на пути у конкурентов, а полученные знания мы теперь можем использовать при разработке других продуктов.</emphasis></p><empty-line/><subtitle>Как это делается</subtitle><p>Ниже описаны разные модели нахождения оптимального баланса между исследованиями и разработкой. Первая требует наименьшей затраты ресурсов, последняя — наибольшей. Если ваша компания невелика или просто не хватает ресурсов. можно начать с первой модели, по ходу дела она. может перерасти в другие.</p><p>• <emphasis>Проведение исследований во время работы над неосновными выпусками программы</emphasis></p><p>Программные продукты развиваются циклически: сначала выходит основной выпуск, затем появляется ряд неосновных. Выход неосновного выпуска можно охарактеризовать как тактический шаг, т.е. в неосновных выпусках реализованы дополнительные функции и усовершенствования, улучшающие и расширяющие возможности продукта, уже присутствующего на рынке. Неосновные выпуски обычно появляются быстро, а их создание сопровождается меньшим риском, нежели создание основного выпуска. В силу своих особенностей неосновной выпуск — замечательный способ дать некоторым из ведущих разработчиков передышку от рутинных задач, во время которой у них есть шанс заняться исследовательской работой. Общее требование: к концу работы над неосновным выпуском исследование надо закончить.</p><p>Помимо самой возможности проведения исследований, совмещение исследований и работы над неосновными выпусками даёт участникам группы целый ряд других преимуществ. Ведущие разработчики могут перевести дух и заняться другими проблемами. Это реальная возможность дать главным «дарованиям» расслабиться, чтобы они не «перегорели», а другим членам коллектива — возможность выйти в лидеры. Взаимное обучение и возможность роста талантливых участников критичны для устранения текучести кадров и непрерывного роста мастерства группы.</p><p>• <emphasis>Дайте проявить себя каждому ведущему разработчику</emphasis></p><p>Если вам посчастливилось иметь в группе двух и более способных ведущих программистов, пусть они сменяют друг друга на посту ведущего разработчика от выпуска к выпуску. В то время как один из них работает над новым выпуском, остальные могут заняться исследованием новых технологий и поиском новых идей. Разработчик, до этого занимавшийся исследованиями, несёт в группу энтузиазм и знания, накопленные за время исследований. Это пробуждает у других участников группы желание продолжить исследовательскую работу.</p><p>• <emphasis>Кандидатуры ведущих исследователей. </emphasis>Если сложность, размеры и число продуктов растут, то весьма вероятно, что вскоре понадобится провести ряд исследований. При этом надо подумать о найме исследователей или о переводе на исследовательскую работу некоторых специалистов высокого уровня. У последних, помимо профессиональной этики и способности к независимому мышлению и действию, должны быть развитые навыки общения. Таких людей непременно нужно включить в команду, разрабатывающую продукт, хотя не обязательно, чтоб они принимали участие в её работе ежедневно. Такое разделение обязанностей может дать замечательные результаты, но может стать и причиной отчуждения между командой разработчиков и исследователями. Ответственность за то, чтобы этого не произошло, целиком и полностью лежит на ведущих исследователях и менеджере проекта. Регулярное общение, как формальное, так и неформальное, снижает вероятность возникновения барьеров между группами.</p><p>Остаётся обсудить, на чём сосредоточить усилия исследователей. Если работа идёт в среде с небольшими ресурсами, позаботьтесь о том, чтобы шансы на успех исследовательской работы были максимальны. Следует разумно распределить усилия исследователей. В общем случае приоритетными являются следующие направления:</p><p>• <emphasis>Анализ тенденций и перспектив рынка</emphasis></p><p>Каждые 3-4 года на рынке появляются новые, более совершенные технологии. Независимо от того, связаны ли новшества с графическим интерфейсом пользователя, клиент-серверными продуктами, моделями компонентных объектов или Интернетом, всегда следует идти в ногу с фундаментальными нововведениями и стараться, чтобы большие перемены не оставили вас позади. Направляйте исследования на поиск, анализ и мониторинг серьёзных изменений на рынке. Однако не заходите в своих исканиях так далеко, чтобы потерять связь с реальностью.</p><p>• <emphasis>Отбор новых идей</emphasis></p><p>Новые идеи, связанные как с продуктами, так и с технологиями, могут приходить в любое время и из любых источников — и внутренних, и внешних. Одни идеи могут стоить миллионы, в то время как другие могут быть лишь напрасной тратой времени. У исследователей должен быть навык быстрого отбора хороших идей и отсеивания плохих.</p><p>• <emphasis>Анализ инноваций и направлений работы конкурентов</emphasis></p><p>Одна из самых важных областей исследования — анализ инноваций и направлений работы конкурентов. Чтобы успешно состязаться с ними, надо понимать их технологии, знать их сильные и слабые стороны.</p><p>По завершении исследовательского проекта или при смене приоритетов исследования важно задокументировать результаты и сделать их доступными коллективу. Необходимо довести до сведения группы все без исключения результаты исследований, как положительные, так и отрицательные. Если исследовательский проект действительно обладает недюжинным потенциалом, было бы разумно создать прототип и продемонстрировать группе его возможности, пояснив принцип работы.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>К концу работы над BoundsChecker 3.0 энтузиазм нашего ведущего разработчика изрядно поубавился: проект отнял много времени и сил, и необходимость перемен была очевидна каждому его участнику. В это время возникла ещё одна задача: нужно было разобраться, что может дать новая технология от Microsoft под названием СОМ для наших продуктов. СОМ привлекла большое внимание, её даже считали «дорогой в будущее». Однако мы смутно представляли себе её суть, поэтому решено было взяться за обе проблемы одновременно.</emphasis></p><p><emphasis>В то время как остальная часть группы работала над следующим (неосновным) выпуском продукта, ведущий разработчик уделял все своё время изучению внутренней организации СОМ и моделированию новых функций BoundsChecker. Спустя три месяца, когда новая версия была практически завершена, главный разработчик был готов присоединиться к работе над BoundsChecker 4.0. Ему удалось не только восстановить свои силы, но и обучить остальных участников группы принципам работы с СОМ и показать им рабочие прототипы новых функций. Так что для начала наше положение было весьма неплохим: вовсю шли поставки BoundsChecker 3.0, только что закончена разработка версии 3.1, а мы уже обладали фундаментальной технологией для следующего выпуска программы.</emphasis></p></section><section><title><p>Оценка технологий</p></title><p>Прежде чем приступать к проекту, обязательно нужно разобраться в технологии, намеченной для использования в нём. Это особенно важно для проектов, в реализации которых будут задействованы новые инструменты, компоненты, платформы или решении.</p><subtitle>О чём пойдёт речь</subtitle><p>Сегодня практически ни одна программа не создаётся на основе одной технологии. Например, в типичном современном Web-приложении используются функции ОС, графические библиотеки, компоненты от сторонних разработчиков, Web-серверы, серверы транзакций и баз данных, поэтому приходится разбираться в возможностях самых разных технологий. Следует ещё до начала работы над проектом выяснить, соответствуют ли возможности каждой намеченной для применения новой технологии нуждам проекта. Оценка технологий позволяет решать поставленные вопросы путём тестирования и совместного обсуждения, что позволяет обнаружить новые проблемы, о существовании которых никто даже не подозревал до начала использования этой технологии.</p><p>Просто удивительно, как часто разработчики считают, что для использования новых технологий достаточно одних предположений или сведений, полученных из прессы или телеконференций. Любая команда должна тщательно изучить все новые технологии, которые она собирается применить в работе над проектом. Если значительную долю задействованных в проекте технологий составляют новые (для рынка или для самой команды), до начала работы над проектом потребуется затратить некоторое время на изучение новых технологий.</p><subtitle>Как это делается</subtitle><p>Оценивая технологию, нужно дать ответы на следующие вопросы.</p><p>• <emphasis>Возможности технологии: </emphasis>обладает ли новая технология возможностями, необходимыми для реализации проекта?</p><p>• <emphasis>Качество: </emphasis>приемлем ли уровень качества технологии?</p><p>• <emphasis>Совершенство: </emphasis>обеспечивает ли технология должную производительность, масштабируемость и устойчивость?</p><p>• <emphasis>Поддержка: </emphasis>обеспечена ли новая технология адекватной поддержкой?</p><p>• <emphasis>Простота использования: </emphasis>не слишком ли сложна новая технология в использовании и при отладке?</p><p>• <emphasis>Профессионализм команды: </emphasis>хватит ли у команды мастерства для применения этой технологии?</p><p>На самом деле собственно процесс оценки технологии не столь сложен, но нужно провести его довольно быстро, поскольку помимо всего прочего, именно результаты оценки технологий определяют срок утверждения окончательного плана проекта. Даже если время для вас — роскошь, при оценке любой технологии не забывайте:</p><p>• <emphasis>формулировать критерии: </emphasis>определяйте свои потребности заранее и делайте это как можно точнее с помощью критериев, данных выше;</p><p>• <emphasis>использовать сформулированные критерии при оценке: </emphasis>объективно оценивайте результаты, опираясь на факты, а не на мнения;</p><p>• <emphasis>учитывать отзывы заказчиков: </emphasis>собирайте отзывы заказчиков (как положительные, так и отрицательные) о результатах оценки; не забывайте интересоваться мнением заказчиков: удовлетворят ли новые технологии их нужды.</p></section><section><title><p>Моделирование</p></title><p>В начале работы над проектом почти всегда возникает ряд важных вопросов, связанных с реализацией той или иной технологии. Моделирование — важная методика, которая поможет получить необходимые ответы.</p><subtitle>О чём пойдёт речь</subtitle><p>Создание прототипа — важный этап, который любая группа разработчиков может осуществить ещё до начала работы над проектом. Работа с прототипом поможет понять, как эффективно воплотить ключевые функции программы, оценить сложность реализации ключевых технологий и необходимое для этого время, а также свести к минимуму общий риск ошибок и срыва планов.</p><p>Рассмотрим примеры того, что может случиться, если отказаться от работы с прототипом, Определив все компоненты программы, команда решила сначала реализовать её инфраструктуру, так как без этого компонента, обычно самого важного и самого сложного, ничего не работает. В результате этот компонент был спроектирован и построен без предварительной работы с прототипом. Когда он был готов, группа решила подключить к нему другие. Но после интеграции новых компонентов стало ясно, что возможности инфраструктуры недостаточны, конструкция её плоха или не масштабируется. После этого приходится искать места, где и что пошло не так, проектировать и кодировать все заново. Перепроектирование программы и изменение её кода во время цикла разработки, очевидно, приведёт к задержке выпуска ПО.</p><p>Рассмотрим ещё один пример, на сей раз с противоположным сценарием. Участники группы отдают себе отчёт в том, что нельзя строить компоненты инфраструктуры проекта, не поняв технических требований других частей системы, поэтому решено сначала создать полную спецификацию системы. Но эта задача оказалась затруднительной, так как не все проблемы, с которыми придётся столкнуться, известны заранее. Фактически здесь возникают сплошные вопросы, на которые никто не знает ответа. Конечно, можно попытаться действовать наугад в надежде, что всё будет хорошо, но это слишком рискованно.</p><p>Все эти проблемы позволяет решить прототип. В первом примере работа с прототипом помогла бы заранее смоделировать систему. Это позволило бы понять, как собрать все компоненты. Во втором примере работа с прототипом подсказала бы проектные решения.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Оба рассмотренных выше примера взяты из работы над реальными проектами. На заре нашей деятельности мы не уделяли должного внимания созданию прототипов тех элементов, использование которых таило в себе наибольший риск или неопределённость. Оглядываясь в прошлое, понимаешь, что всех проблем удалось бы избежать, если бы конструкция программы была заранее проверена с помощью прототипа.</emphasis></p><empty-line/><subtitle>Как это делается</subtitle><p>Прототип — не законченная программа, но он даёт возможность получить фактические данные, которые позволят принимать более удачные решения. Важнее всего — время, поэтому нужно действовать быстро. Ниже описаны этапы кратчайшего пути, который, однако, позволяет создать вполне приличный прототип.</p><p>• <emphasis>Определите ключевые факторы риска</emphasis></p><p>Первый этап — создание списка основных вопросов, на которые нужно ответить. Изучите все вопросы, в которых нужно разобраться, чтобы разработать точный план. Если вопросов много, нужно определить приоритетные и проработать их в первую очередь. Помните: нужно сосредоточиться только на ключевых моментах, а не на всех неизвестных.</p><p>• <emphasis>Составьте план экспериментов</emphasis></p><p>Следует создать план экспериментов, которые помогут ответить на поставленные вопросы. Можно искать ответ на каждый вопрос посредством отдельного эксперимента или решать несколько проблем одновременно, проводя ряд экспериментов.</p><p>Независимо от числа экспериментов нужно смоделировать взаимодействие любых ключевых технологий или компонентов. Здесь задача заключается в том, чтобы проработать продукт «вширь», а не «вглубь», т.е. охватить максимально возможное число функций, а не пытаться полностью воспроизвести какую-то одну из них. Вы не поверите, как часто мне приходилось встречать проекты, в которых возникали катастрофические проблемы при попытке собрать воедино все фрагменты программы. Обычно причина была в том, что в течение первых недель реализации проекта этим проблемам не было уделено внимания.</p><p>• <emphasis>Попробуйте сымитировать конечный результат</emphasis></p><p>Одно из ключевых требований, выполнив которое, можно считать создание прототипа завершённым, — имитация конечного результата. Для этого придётся заглянуть в будущее, чтобы увидеть программу в окончательном виде и попытаться заранее смоделировать её ключевые составляющие, Чтобы преуспеть в этом, придётся ограничиться созданием модели на основе набора временных компонентов и API, имитирующих готовую программу. Возможно, часть функций придётся запрограммировать жёстко, для других вообще написать заглушки, а реальные данные заменить имитационными. Все это допустимо на данном этапе — ведь создаётся всего лишь эмулятор реальной программы. Главная задача сейчас — создать «скелет» программы, а «мясом» он обрастёт позже.</p><p>• <emphasis>Используйте существующие наработки</emphasis></p><p>Ещё один важный способ ускорения создания прототипа — использование существующих решений. Вовсе не обязательно все писать «с нуля». Некоторые наиболее успешные прототипы появились в результате модификация копии исходного текста рабочей программы.</p><p>• <emphasis>Оценивайте результаты</emphasis></p><p>Когда прототип готов, не забудьте оценить результаты своей работы. В частности, работая с прототипом, можно оценить производительность на макроуровне, необходимый объём памяти и то, как она используется. Можно определить и сложность внедрения, и качество технологии, а также попытаться разобраться в её принципах. Короче говоря, какими бы ни были потребности, нужно выжать из прототипа максимум пользы.</p><p>• <emphasis>Документируйте результаты.</emphasis></p><p>Это полезно не только для сегодняшних участников группы, но и для будущих. Если при работе с прототипом обнаружились серьёзные проблемы, то они скорее всего снова возникнут и в будущем. Каждый участник группы должен знать, почему принято то или иное важное решение. Со временем у вас соберётся целая библиотека проектных заметок, которая станет историческим документом проекта.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Во время работы над BoundsChecker 5.0 разработчикам NuMega пришлось почти полностью переписать внутренние компоненты программы. При этом работа шла в основном на двух фронтах: обновление систем сбора и анализа информации. Из-за сложности проекта мы испытывали большой соблазн сначала довести до конца конструирование системы сбора данных, а затем закончить систему анализа. Но опять же в силу сложности проекта мы пришли к выводу, что лучше создать прототипы для обеих систем, чем тратить время на создание подробных спецификаций. Было решено смоделировать сбор части нужных данных и написать лишь части кода для анализа только этих данных. Если программа функционировала нормально, выводилось простое диалоговое окно с сообщением, что все работает.</emphasis></p><p><emphasis>Спустя неделю один из программистов зазвал меня в свой кабинет и продемонстрировал маленькое простенькое диалоговое окно. Прототип работал! Теперь мы знали, что все задуманное осуществимо от начала до конца и серьёзных проблем с производительностью не предвидится. Следующие две недели мы по очереди наращивали все функции, обретая все большую уверенность в успехе. Таким образом, окончательная архитектура и конструкция программы были существенно улучшены. Через три недели у нас был готовый проект, который мы могли точно спланировать. В конечном итоге это позволило нам сэкономить кучу времени при его реализации. Я не говорю, что после всё было прекрасно, но без этих простых действий у нас бы не хватило уверенности, знаний и понимания, чтобы правильно спланировать проект.</emphasis></p><empty-line/></section><section><title><p>Типичные проблемы и их решение</p></title><p>Далее обсуждается ряд типичных проблем и вопросов, возникающих при использовании описываемых здесь методик, а также их решения.</p><subtitle>Не торопитесь</subtitle><p>Как уже не раз было сказано, разработчики часто пытаются работать с новыми технологиями, основываясь лишь на допущениях. Эти допущения превращают проект скорее в азартную игру, чем в серьёзную техническую работу. Не торопите события: хотя некоторые проблемы можно и должно решать с ходу, всё же следует определить ключевые потребности и убедиться, что новые технологии в состоянии удовлетворить их. В этом случае вы сможете предвидеть проблемы и лучше подготовитесь к их решению, а также отреагировать на возникшие проблемы на более ранних этапах цикла разработки проекта.</p><subtitle>Не увлекайтесь моделированием отдельных функций</subtitle><p>Часто возникает искушение создать прототип какого-либо компонента без учёта контекста, не принимая во внимание характер его применения. Хотя сосредоточиться на узкой задаче много проще, в этом таится большая опасность. Моделирование не должно концентрироваться на отработке какого-то одного компонента, важно отработать совместную работу всех критически важных компонентов. Я очень рекомендую создавать общесистемные прототипы, в которых собраны воедино все критически важные фрагменты системы, даже если при этом приходится использовать искусственные данные, жёстко прошивать вызовы API или подменять их заглушками. Тем не менее в этом случае удастся составить хорошее представление о проблемах с интеграцией компонентов и убедиться в проектных решений на уровне системы.</p><subtitle>Не оставляйте анализ производительности напоследок</subtitle><p>Большинство считает, что производительность — это что-то, что «добавляется» к программе в конце цикла работы над проектом. Хотя настройка разного рода параметров, несомненно, может и должна выполняться после сборки всех частей проекта, также верно и то, что на этом этапе объём возможных изменений весьма ограничен. Неуместно вносить фундаментальные изменения в архитектуру или внутреннюю структуру продукта в последние недели работы над проектом.</p><p>Необходимо заранее проанализировать производительность на макроуровне: сначала на прототипе, а затем после сборки всех основных фрагментов программы.</p></section></section><section><title><p>Глава 10</p><p>Пользовательский интерфейс</p></title><section><p>Думаю, ни один участник команды не станет спорить с тем, что хороший пользовательский интерфейс — ключевое условие успеха продукта. Увы, на этом согласие заканчивается. В командах, одолеваемых проблемами с пользовательским интерфейсом, нередко отсутствует работа с прототипом пользовательского интерфейса, или члены команды не могут договориться о том, как организовать эту работу. Часто проблемы с пользовательским интерфейсом — самое серьёзное испытание, грозящее сорвать план реализации проекта.</p><p>Если в этом плане ваша команда не отличается от других, то скорее всего самые горячие споры разгораются при обсуждении вопросов, касающихся пользовательского интерфейса: что и как интерфейс должен делать и на что должен быть похож. Порой эти споры длятся в течение всего времени работы над проектом и становятся причиной столкновений участников команды, задержек в работе и фальстартов. Хуже того, часто проблемы с интерфейсом, о существовании которых никто не догадывался, неожиданно всплывают на поздних стадиях реализации проекта. Чтобы что-то изменить на этом этапе, разработчикам, тестировщикам и техническим писателям приходится многое переделывать, так что в этом случае дело пахнет серьёзным срывом планов.</p><p>Решение этой проблемы заключается в создании прототипа пользовательского интерфейса на ранних стадиях цикла разработки. Прототип следует как можно быстрее тестировать, оценивать и улучшать, пока не будут решены основные проблемы. В этой главе мы обсудим значение прототипа пользовательского интерфейса, а также поговорим о способах создания прототипов при работе над самыми разными проектами. Я не буду касаться здесь всех составляющих хорошего интерфейса, так как они могут существенно варьировать в зависимости от платформы. Вместо этого мы рассмотрим, как организовать в цикле разработки ПО эффективную работу по созданию пользовательского интерфейса, которая, однако, не потребует мощного оборудования, специальных ресурсов и существенных затрат времени. В завершение мы обсудим роль специалиста по инженерной психологии и рассмотрим роль этой ключевой фигуры в руководстве работой по созданию пользовательского интерфейса.</p></section><section><title><p>Прототип пользовательского интерфейса</p></title><p>Прототип — это наглядная модель пользовательского интерфейса. В сущности это функционирующий «черновик» интерфейса, созданный на основе ваших представлений о потребностях пользователей. Прототип может принимать множество различных форм, от бумажных макетов до реальных программ, имитирующих работу пользовательского интерфейса (способы создания прототипов мы обсудим ниже). Однако независимо от формы прототип должен давать команде чёткое представление о способе взаимодействия пользователя с программой.</p><subtitle>Почему прототип необходим?</subtitle><p>Как сказано в главе 8, требования к продукту определяют основные задачи, которые приходится выполнять пользователям. Однако в описании требований не сказано, как пользователи будут это делать. Ответ даёт прототип пользовательского интерфейса. Им занимается команда разработчиков программы и в большей степени — специалист по инженерной психологии. После создания прототипа появляется возможность привлечь пользователей для проверки деталей выбранного вами решения. Результаты тестирования позволяют убедиться, что пользовательские потребности были поняты правильно. Важнее всего при этом возможность легко вносить изменения и пробовать новые идеи, руководствуясь результатами тестов.</p><p>Прототип даёт команде разработчиков множество преимуществ.</p><p>• <emphasis>Возможность сосредоточиться на решении ключевых </emphasis><emphasis>задач.</emphasis></p><p>Необходимо сосредоточить усилия команды на самых важных частях продукта. Важнейшие части продукта — это ключевые задачи, наиболее ценные, нужные и важные для пользователя. Все участники команды (разработчики, тестировщики, технические писатели и др.) должны чётко представлять себе суть ключевых задач и не жалеть усилий для их правильного понимания. Отчасти верно, что остальная функциональность просто не имеет значения, если трудно решать основные задачи или не ясно, как это делать.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Когда в NuMega решили создать TrueTime, новую программу-профайлер, было ясно, что интерфейс для неё придётся создавать «с нуля». Но на что должен быть похож новый интерфейс? Какие действия наиболее важны для пользователя? Ознакомившись с положением в отрасли, мы обнаружили массу хороших продуктов, в целом составляющих весьма развитый набор ПО. Однако все существующие программы перегружали пользователя информацией, что, с нашей точки зрения, является недостатком, так как это очень затрудняет выполнение самой важной задачи продукта — поиск проблем с производительностью программ. Теперь мы знали, к чему стремиться: нужно сделать так, чтобы поиск проблем с производительностью с помощью нашей программы требовал не больше трёх щелчков. Вся команда сообща работала над созданием интерфейса, чтобы решить эту просто сформулированную, но такую трудную задачу. Мы решили не усложнять интерфейс и разработали новый подход к навигации по сложной иерархии функций, в которой зачастую таятся проблемы с производительностью. В результате первый выпуск TrueTime принёс нам премию «Best of Show», присуждаемую журналом Comdex/Byte Magazine. Основным фактором успеха была концентрация усилий команды на решении определённых задач.</emphasis></p><empty-line/><p>• <emphasis>Точность</emphasis></p><p>Одна из самых серьёзных проблем при разработке программы — переделки по причине многократных изменений конструкции и реализации пользовательского интерфейса. Чтобы уложиться в сроки, нужно исключить крупные переделки. Хотя получить совершенный продукт с первого раза практически невозможно, надо как можно раньше скомпоновать основные элементы пользовательского интерфейса. Мелкие изменения вполне допустимы, но большие изменения могут привести к катастрофическим последствиям, негативно отражаясь на времени разработки, качестве продукта и документации.</p><p>• <emphasis>Планирование</emphasis></p><p>Нельзя составить точный план, не зная структуры пользовательского интерфейса. Если интерфейс будет изменяться по ходу цикла разработки, то в план проекта также придётся вносить соответствующие изменения. Кроме того, необходимо предохранять план от <emphasis>перенапряжения</emphasis>, которое возникает, когда работа тестировщиков и технических писателей сдерживается изменениями пользовательского интерфейса. Таким образом, перенапряжение плана ведёт к задержке работы над проектом в целом. Помните: следует вести работу над всеми частями проекта в параллели с разработкой программы. Планирование требует чёткого понимания структуры пользовательского интерфейса уже в начале работы над проектом.</p><p>• <emphasis>Документация</emphasis></p><p>Вам обязательно понадобится документация, описывающая работу с программой. Очевидно, что документация тесно связана с интерфейсом программы. Команда технических писателей должна быть в курсе проблем, с которыми предстоит столкнуться пользователям, а также знать, как их решить с помощью программы. Если интерфейс не довести до ума в начале работы над проектом, техническим писателям придётся постоянно нагонять разработчиков, что сделает их параллельную работу невозможной.</p><p>• <emphasis>Тестирование</emphasis></p><p>Тестирование программы также сильно зависит от её интерфейса. Традиционно тестировщики просят разработчиков предоставить им подробные спецификации функций программы, точно описывающие все особенности её работы. К сожалению, полностью описать пользовательский интерфейс, особенно современный, практически невозможно. Лучшая замена описанию — прототип. Если предоставить тестировщикам прототип интерфейса, то, ознакомившись с программой и разобравшись в основах и принципах работы её функций, предназначенных для конечных пользователей, они смогут улучшить разработанные ими планы тестирования. Это не значит, что описание функций не имеет значения или можно пренебречь им, просто я хочу подчеркнуть, что прототип — один из лучших способов демонстрации особенностей продукта. Обладая прототипом пользовательского интерфейса, тестировщики смогут изучить продукт вдоль и поперёк, а разобравшись в работе функций программы, команда сможет подготовить лучшие планы тестов и испытаний до окончания разработки программы.</p><subtitle>Создание прототипа</subtitle><p>Возможно, дочитав до этого места, вы спросите: «Все это здорово, но как создать прототип?» Подход к созданию прототипов пользовательского интерфейса, который исповедует NuMega, основан на трёх простых принципах. Сначала мы определяем наиболее важные задачи, которые приходится решать пользователям. Затем мы быстро моделируем эти задачи на ранних стадиях работы над проектом, ещё до подготовки плана проекта в окончательном виде: это увеличивает шансы правильно оценить объём предстоящей работы. Наконец, мы очень быстро доводим прототип, внося в него ряд последовательных изменений, демонстрируя как внутренние, так и внешние его особенности. Такой подход позволяет тестировать прототип вместе с пользователями. Возможность быстрой доработки прототипа — ключевой фактор успеха, позволяющий как можно раньше привести его к окончательному виду.</p><p>Решив эти задачи, команда получит прототип пользовательского интерфейса, понятный всем её участникам ещё до создания самой программы. Только подумайте, какое значение это имеет для проекта: разработчики, тестировщики, технические писатели — короче, все получат чёткое представление о внешнем виде программы даже раньше, чем она будет создана. Представьте, насколько возрастёт эффективность и производительность труда каждого участника команды благодаря прототипу пользовательского интерфейса. Кроме того, администраторы, менеджеры по продукции, работники из отделов сбыта и технической поддержки смогут «увидеть» программу раньше, чем она появится на свет. Это поможет устранить равнодушное отношение к проекту, создать уверенность в его успехе и предвидеть возможные проблемы — в общем, создать особую атмосферу работы с высокими технологиями, направляющую усилия всех участников проекта в единое русло. И не будем забывать о самом важном: чем раньше будет протестирован интерфейс, тем больше шансов на то, что получится хороший продукт, так как тогда множество людей смогут познакомиться с программой и опробовать её прежде, чем она будет написана.</p><p>Хотя описанный сценарий очень похож на идеал, его можно реализовать при наличии соответствующих усилий и навыков. Давайте познакомимся с каждым из трёх этапов этого сценария поближе.</p><subtitle>Определение ключевых задач</subtitle><p>На первом этапе создания пользовательского интерфейса нужно определить самые важные задачи, которые потребуется решать пользователям. Число задач может варьироваться в зависимости от сложности продукта; попробуйте выделить хотя бы следующие категории:</p><p>• <emphasis>Задачи, которые скорее всего придётся решать новым пользователям программы</emphasis></p><p>Здесь надо понять потребности новичков и сделать так, чтобы они как можно скорее преуспели в решении своих проблем с помощью вашей программы. Программа должна вызывать у пользователей не ощущение беспомощности, а стимулировать их к дальнейшей работе с ней. Если известен набор вероятных действий пользователя, то можно оптимизировать интерфейс под их потребности.</p><p>• <emphasis>Задачи, которые чаще всего решают постоянные пользователи программы</emphasis></p><p>Нужно постараться не разочаровать постоянных пользователей, безошибочно определив их ключевые задачи. Успех здесь даёт замечательный шанс удовлетворить потребности пользователей на долгое время. Соответственно следует сосредоточить основное внимание команды разработчиков на этих задачах, которые нужно максимально обогатить полезными возможностями, качественно реализовать и хорошо описать в документации.</p><subtitle>Виды прототипов</subtitle><p>Когда основные задачи определены, всё готово к созданию прототипа пользовательского интерфейса. При этом очень важно выбрать инструмент, позволяющий создать прототип легко и быстро. Затем надо проверить свои варианты дизайна прототипа, разрешить все проблемы и вновь оперативно проверить результат. Познакомимся с наиболее популярными методиками создания прототипов и посмотрим, как с их помощью решать собственные проблемы. Вот эти методики по порядку, начиная с самой лучшей.</p><p>• <emphasis>Прототипы на бумаге</emphasis></p><p>Для создания такого прототипа нужно просто нарисовать фрагменты пользовательского интерфейса на бумаге. Чтобы облегчить художникам и пользователям работу с таким прототипом, рисовать каждый элемент интерфейса надо на отдельном листе бумаги соответствующего размера. Расположите нарисованные меню, панели инструментов, командные кнопки, поля и другие элементы так, чтобы результат напоминал пользовательский интерфейс программы. Например, каждый раскрывающийся список и каждое диалоговое окно в этом случае будет на своём кусочке бумаги. Не обязательно добиваться точности воспроизведения — достаточно, чтобы эти кусочки бумаги давали чёткое представление об элементах пользовательского интерфейса.</p><p>Преимущество бумажных прототипов в том, что их легко собирать и изменять. Изолируя основные элементы интерфейса, можно легко изменить ход управления, условия работы, а также их расположение или размер. Нетрудно стирать линии или даже перерисовывать отдельные страницы или прототип целиком. Благодаря тому, что бумажные прототипы так легко менять, их можно обновлять и модифицировать прямо во время демонстрации конечным пользователям, это позволяет тут же проверять новые идеи.</p><p>Кроме того, бумажный прототип не страдает от проблем, связанных с программированием, установкой и других помех, неизбежных при разработке ПО. Это его преимущество, так как лучше тратить время на тестирование и доводку пользовательского интерфейса, а не на решение технических или механических проблем, связанных с его созданием.</p><p>С появлением более совершенных графических программ и инструментов для разработки стало проще создавать реальные изображения элементов интерфейса и распечатывать их на бумаге, чем рисовать их от руки. Следует выбирать тот или иной метод на основе личных предпочтений, поскольку важные преимущества есть у каждого из них: оба позволяют легко создавать и быстро доводить прототипы.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Бумажные прототипы могут быть чрезвычайно эффективны, но если команда не верит в результативность этой методики, использовать её нельзя. Чтобы побороть эту проблему в NuMega, мы отправили всю команду на однодневный методический курс, который читали в институте UEI (Usability Engineering Institute). Особое внимание в этом курсе уделялось работе с бумажными прототипами. Это был замечательный способ продемонстрировать участникам команды, насколько важны и эффективны могут быть прототипы на бумаге. Этот курс изменил наши представления о разработке ПО.</emphasis></p><empty-line/><p>• <emphasis>Инструменты RAD</emphasis></p><p>Создание прототипов с помощью инструментов для быстрой разработки приложений (RAD, Rapid Application Development), — вероятно, самая популярная методика. Подходящим можно считать любой инструмент, позволяющий быстро создать наглядную функционирующую модель пользовательского интерфейса.</p><p>Одно из преимуществ инструментов RAD в том, что они позволяют создавать прототипы очень быстро (хотя бумажный прототип, как правило, делается быстрее). Ещё одно преимущество — реализм полученных прототипов. Многие думают, что прототипы, созданные с помощью RAD, обеспечивают более эффективное тестирование, чем бумажные, поскольку в первом случае тестированию подвергается настоящая программа. Однако программисты часто застревают на кодировании таких прототипов и напрасно теряют драгоценное время. Они пытаются довести прототип, улучшая его, а не реальный интерфейс. Другая проблема в сильном искушении перенести код прототипа прямо в рабочую программу, невзирая на его недостаточную проработанность и несовершенство дизайна.</p><p>• <emphasis>Описания</emphasis></p><p>Создание прототипов пользовательского интерфейса с помощью описаний, вероятно, вторая по популярности методика, однако наименее ценная из трёх представленных здесь. Описания пользовательского интерфейса страдают от трёх недостатков. Во-первых, их интерпретация часто неопределенна. Маловероятно, что все участники команды смогут одинаково воспринять и понять даже подробное описание. Во-вторых, описание трудно протестировать и оценить. Вряд ли вы рискнёте кинуть 20-страничное описание интерфейса на стол пользователю с просьбой прочитать его. Применять описания в качестве эталонов также очень трудно. Наконец, даже при наличии отзывов, поддерживать точность и внутреннюю согласованность описаний зачастую нелегко.</p><subtitle>Повторная оценка и доводка</subtitle><p>Получив прототип, можно приступать к его проверке с помощью реальных пользователей. Для этого нужно попросить пользователей выполнить определённые вами ключевые задачи с помощью только что созданного прототипа. При этом нужно выяснить, что работает хорошо, а что плохо, и внести в прототип соответствующие изменения, чтобы решить обнаруженные проблемы.</p><p>Рассмотрим пример с бумажным прототипом. Если вы попросите пользователя выполнить некоторую задачу, ему придётся «щёлкнуть» ряд элементов интерфейса. При этом часть работы придётся делать вам, управляя механикой интерфейса и имитируя для пользователя работу компьютера. Вам придётся собственноручно выкладывать перед пользователем новые «диалоговые окна», наблюдать затем, какие «кнопки» он выбирает, и убирать «окна», когда пользователь «щёлкает ОК»</p><p>Сколько времени занимает доводка интерфейса? Обычно немало. Приходится до 20 раз менять структуру интерфейса в зависимости от приложения. Следует вносить столько изменений, сколько потребуется, и доводить дизайн, пока не будет достигнут значительный прогресс. Помните: идея в том, чтобы быстро проработать множество вариантов дизайна, пока форма прототипа не станет более-менее постоянной. Полное представление о прогрессе прототипа дают результаты тестов. Удалось ли облегчить работу пользователей? Уменьшилось или увеличилось среднее время, которое пользователь тратит на решение некоторой задачи? Смогла ли последняя партия пользователей легко и быстро выполнить свои задачи или они столкнулись с проблемами? Ответы на эти вопросы позволят выяснить, как обстоят дела в работе над программой и сколько ещё предстоит сделать.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Во время разработки TrueCoverage, первого продукта NuMega для отображения результатов исполнения кода, команде снова пришлось искать форму пользовательского интерфейса. Чтобы помочь нам в этом, наш специалист по инженерной психологии (совмещавший эту должность с работой технического писателя) вдвоём с ведущим разработчиком создали бумажный прототип пользовательского интерфейса. Затем мы попросили других участников команды выполнить ряд задач, самых важных, по нашим оценкам. Когда новоявленные пользователи закончили свою работу, мы проанализировали их успехи и неудачи. Мы также собрали их отзывы и опробовали ряд новых подходов, решая проблемы, с которыми они столкнулись. Затем мы попросили поработать с прототипом других сотрудников компании, в частности менеджера по продукции и персонал технической поддержки, и также получили их отзывы. Наконец, мы испытали прототип за пределами компании, чтобы узнать, какое впечатление он произведёт на реальных пользователей. Мы выполняли доводку интерфейса очень быстро, прорабатывая до десятка прототипов в неделю. Действительно, во время проведения фазы тестирования нам удалось обнаружить ряд крупных проблем со слиянием данных. Страшно подумать, сколько времени отнял бы поиск и решение этих проблем обычными методами: наверное, не меньше, чем время полного цикла работы над выпуском, а может и больше. За короткое время (в сумме не больше двух недель) мы закончили проектирование интерфейса. Он не был совершенным, в дальнейшем пришлось вносить небольшие изменения. Но ещё до начала написания кода у нас была готовая на 90%, проверенная пользователями конструкция. Проработанный пользовательский интерфейс позволил точнее спланировать реализацию проекта, а тестировщики и создатели документации смогли если не опробовать программу на деле, то хотя бы разобраться в её особенностях раньше, чем она была написана.</emphasis></p><empty-line/></section><section><title><p>Роль специалиста по инженерной психологии</p></title><p>Специалисты по инженерной психологии играют критическую роль в разработке программ. Мне приходилось работать как с ними, так и без них. В результате я бы предпочёл всегда иметь одного или несколько таких специалистов в своей команде. Однако роль специалиста по инженерной психологии не всегда ясна и существенно варьируется в различных компаниях. В следующем разделе описана работа специалистов по инженерной психологии в компании NuMega.</p><subtitle>Сфера ответственности</subtitle><p>Специалисты по инженерной психологии отвечают за решение следующих задач:</p><p>• <emphasis>Формулирование требований к прототипу пользовательского интерфейса</emphasis></p><p>Создание прототипа пользовательского интерфейса — неотъемлемая часть разработки продукта. Специалисты по инженерной психологии руководят составлением требований к прототипам и их дизайном. Хотя это одна из основных обязанностей этих специалистов, отсюда не следует, что они работают в изоляции от команды или пользователей. Напротив, они должны возглавлять процесс создания ПО и воплощать как собственные идеи, так и идеи участников команды.</p><p>• <emphasis>Формулирование требований к прототипу программы установки</emphasis></p><p>Программа установки не менее важна для продукта, чем другие его части, и так же нуждается в прототипе пользовательского интерфейса. Специалисты по инженерной психологии играют ключевую роль в обеспечении максимальной простоты установки ПО, упрощая процедуру, насколько возможно, и освобождая её от излишка функций, параметров и ручного труда.</p><p>• <emphasis>Формирование первоначального впечатления от продукта</emphasis></p><p>Одна из задач проекта — сделать первоначальное впечатление от продукта положительным. Открыв коробку, пользователь в первые же десять минут без проблем должен установить программу и начать работать (т.е. решать свои проблемы с помощью вашей программы). Если он быстро преуспеет в этом, повышается вероятность того, что он и дальше будет тратить своё время, чтобы полностью освоить продукт и разобраться в его возможностях. Специалисты по инженерной психологии играют ключевую роль в решении этой задачи, беря на себя определение, формирование и оценку первоначального впечатления от продукта.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Специалистам по инженерной психологии NuMega удаётся заметно улучшить первоначальное впечатление от работы с продуктом путём учёта всех его аспектов. Один из предложенных ими способов улучшения первоначального впечатления включает использование быстрой справки, выполненной в виде четырёхцветных карточек с кратким описанием решения ключевых пользовательских задач, в котором применяются снимки экрана, выноски и короткие тексты. На обороте карточек также размещается краткая справка по основным вопросам работы с программой, которая помогает пользователям в поисках ключевой информации. Справочные материалы печатаются на высококачественной немнущейся и непачкающейся бумаге, что повышает срок их службы. Эти карточки полностью оправдали себя и стали популярным предпродажным материалом.</emphasis></p><empty-line/><p>• <emphasis>Создание графики, изображений, значков и цветовых схем</emphasis></p><p>Специалисты по инженерной психологии должны обладать навыками создания графических материалов для презентации ПО. Хотя подобные умения и не обязательны для этих специалистов, это ещё один довод в пользу найма людей с разносторонними навыками при любом удобном случае.</p><subtitle>Консультирование</subtitle><p>Практичность ПО часто определяется не только программой, но и упаковкой, лицензионным соглашением и документацией продукта. Хотя эти предметы не входят в сферу их прямой ответственности, специалисты по инженерной психологии консультируют менеджера по продукции, специалистов по сбыту и команды технических писателей по многим ключевым вопросам, к которым относятся следующие:</p><p>• <emphasis>Лицензионное соглашение</emphasis></p><p>Прототип лицензионного соглашения также влияет на впечатление, которое производит ПО на пользователей и в конечном счёте на их удовлетворённость работой с продуктом. Группе специалистов по инженерной психологии принадлежит ключевая роль в создании прототипа лицензионного соглашения и обеспечении максимальной простоты и ясности его формулировки, в то же время не подвергая риску задачи менеджеров проекта.</p><p>• <emphasis>Упаковка</emphasis></p><p>Упаковка может оставить очень сильное впечатление как о самом продукте, так и о выпускающей его компании. Специалисты по инженерной психологии вместе с менеджерами по продукции вместе создают простую, практичную и эффектную упаковку для вашей продукции. В частности, NuMega важно выглядеть максимально профессионально и не производить впечатление небольшой компании, которой она в действительности является.</p><p>• <emphasis>Документация, электронная справка и дополнительные материалы</emphasis></p><p>Специалисты по инженерной психологии также принимают ключевое участие в создании документации, электронной справки и дополнительных материалов. Они обеспечивают соответствие стиля этих материалов стилю продукта и упаковки. В частности, они контролируют подбор графики и цветовой схемы для всех составляющих товара, чтобы внешность продукта была выдержана в едином стиле. Где бы ни использовались логотипы компании, продукта, информация о продукте, стиль должен быть един. Специалисты по инженерной психологии также следят за техническими характеристиками, обеспечивая их согласованность в программе, документации, электронной справке, карточках быстрой справки и маркетинговых материалах.</p><subtitle>Исполнение проекта</subtitle><p>Ну, хороший прототип пользовательского интерфейса создан, работа над проектом начата и идёт полным ходом. Кажется, миссия специалиста по инженерной психологии закончена? Вовсе нет, работы для него ещё предостаточно. Основные задачи, которые приходится решать специалистам по инженерной психологии во время исполнения проекта таковы:</p><p>• контроль хода работы над пользовательским интерфейсом, как текущий, так и по завершении каждого существенного этапа работы над проектом;</p><p>• консультации и санкционирование мелких изменений пользовательского интерфейса;</p><p>• создание или поиск элементов графического оформления продукта;</p><p>• надзор за созданием упаковки, лицензионного соглашения и формирование первоначального впечатления от продукта (см. выше);</p><p>• внутренняя и внешняя проверка ПО: хотя для крупных изменений может не остаться времени, небольшие изменения могут быть вполне возможны — это поможет лучше подготовиться к работе над следующим выпуском;</p><p>• визуальный контроль за ПО для обеспечения соответствия стандартам платформы, для которой ПО создано.</p></section><section><title><p>Типичные проблемы и их решение</p></title><p>Далее обсуждается ряд типичных проблем и вопросов, возникающих при использовании описываемых здесь методик, а также их решения.</p><subtitle>Излишняя доводка кода</subtitle><p>Одна из наиболее распространённых причин срыва планов разработки ПО заключается в том, что команда пытается воплотить в программном коде каждое улучшение прототипа пользовательского интерфейса. Если излишняя доводка имеет место во время разработки настоящей программы, создание хорошего прототипа заметно замедляется, и дата завершения продукта становится абсолютно непредсказуемой. Второй или третий вариант интерфейса, как правило, принимается независимо от того, хорош он или нет, чтобы наверстать упущенные сроки реализации проекта или из-за того, что вышло отведённое на доводку время. Не устану повторять, что важно как можно скорее довести дизайн интерфейса, не зацикливаясь на совершенствовании его кода, и утвердить окончательный вариант прежде, чем переходить к составлению плана.</p><subtitle>Отсутствие отзывов извне</subtitle><p>Если спросить у разработчиков, нужны ли им внешние отзывы при разработке пользовательского интерфейса, в ответ почти всегда можно услышать «Да». И всё же в жизни совсем мало команд получает внешние отзывы о своих проектах, особенно в начале работы. Дело в том, что трудно дать отзыв о том, чего ещё нет. Описанная в этой главе методика позволяет более успешно собирать внешние отзывы.</p><subtitle>Лишние нововведения</subtitle><p>Представленные в этой главе идеи чаще всего критикуют за то, что они, якобы, «душат» инновации. А что, если спустя несколько месяцев работы над продуктом возникла замечательная новая идея? Стоит ли вносить изменения, если есть возможность?</p><p>Фундаментальная идея этой главы в том, что основные элементы пользовательского интерфейса должны быть «на местах» уже в начале работы над проектом. Их нельзя существенно изменять, если мы хотим уложиться в первоначальный план. Бесспорно, инновации не только возможны, но и необходимы, однако работу с ними нужно завершить на этапе работы с прототипом. Именно поэтому следует быстро проверять и отрабатывать разные варианты. Протестировав прототип заранее, вы избавляете себя от необходимости вносить значительные изменения в будущем. Даже при возникновении новой идеи, представляющей прорыв в данной области, сохранится уверенность в том, что текущие идеи в состоянии удовлетворить потребности рынка, что позволит уложиться в план. Я не говорю, что во время реализации проекта нельзя вносить небольшие изменения. Как правило, во время разработки возникает масса полезных идей, существенно повышающих ценность программы с очень небольшими затратами. Многие из них вполне могут быть реализованы без риска срыва плана или возникновения серьёзных проблем.</p></section></section><section><title><p>Глава 11</p><p>Планирование</p></title><section><p>Создание плана часто оказывается одним из наиболее затруднительных и насыщенных политикой аспектов проекта. Правильно составленный план становится эффективным средством управления проектом. Как бы усердно ни трудилась команда, при плохом планировании вся работа пойдёт насмарку, если опоздать с выпуском ПО. Сложность планирования проектов общеизвестна, однако именно понимание принципов рационального планирования часто отличает реалистичную оценку сроков реализации проекта от планов «с потолка».</p><p>В этой главе мы подробно рассмотрим сведения, необходимые для составления плана, и обсудим важнейшие понятия планирования. Кроме того, я покажу, как создать точный и реалистичный план.</p></section><section><title><p>Предпосылки</p></title><p>Прежде чем приступать к планированию, нужно уяснить требования к проекту, особенности технологии, намеченной для использования в нём, и конструкцию пользовательского интерфейса программы (рис. 11-1). Разобравшись в фундаментальных аспектах проекта, можно получить чёткое представление о том, что будет создано и как это будет работать.</p><image l:href="#pic111.jpg"/><empty-line/><p>Рис. 11-1. Исходные данные, критически важные для процесса планирования.</p><p>Однако если основные требования не определены, а самые рискованные фрагменты программы не отработаны на прототипах или моделях интерфейса, то для разработки точного плана просто не хватит данных. Тогда сформулировать все задачи проекта и точно оценить время, необходимое для выполнения каждой из них, будет невозможно. Поэтому весь проект будет составлен из расплывчатых задач, у которых слишком общая формулировка, препятствующая мониторингу и контролю их выполнения. При этом получится нереалистичный план, от которого придётся отказаться при первых признаках трудностей. В результате вы останетесь без средства управления реализацией проекта.</p></section><section><title><p>Основные понятия и трудности планирования</p></title><p>Чтобы создать план проекта или оценить план, созданный другими, нужно хорошо разбираться в основных понятиях планирования. В этом разделе мы обсудим основные понятия, которые должен знать каждый участник процесса планирования. Затем я опишу наиболее серьёзные трудности работы с людьми, возникающих при создании плана. И в завершение мы рассмотрим ряд наиболее распространённых проблем, с которыми сталкиваются команды разработчиков при планировании.</p><subtitle>Основные понятия</subtitle><p>Следующие понятия являются фундаментальными для создания надёжных планов.</p><subtitle>Равновесие</subtitle><p>Объём предстоящей работы, количество доступных ресурсов и время, отведённое на реализацию проекта, должны быть сбалансированы — вот старейшее и самое важное правило планирования. Если хоть один из этих параметров начинает перевешивать или, хуже того, наложены ограничения, которые нельзя сбалансировать, создать ПО вовремя будет невозможно. Даже если в начале работы проект был сбалансирован, велика вероятность, что в дальнейшем равновесие будет нарушено. В цикле разработки возникает достаточно препятствий, чтобы вывести из равновесия даже самый лучший план. По ходу работы менеджер проекта должен регулярно проверять план и всемерно поддерживать его равновесие. Способы мониторинга проекта и внесения изменений в процессе его реализации мы обсудим в главе 12.</p><subtitle>Задачи и оценка времени для их выполнения</subtitle><p>Задачи — это основные строительные блоки плана, они являются представлением конкретной работы, которую нужно сделать. В общем верно, что легче следить за ходом выполнения небольших задач. Кратко и точно сформулированные задачи позволяют быстро обнаружить отставание от плана. Если задачу нельзя завершите за 1-2 недели, её следует разбить на две или больше меньших задач. Исполнение плана, составленного из долгосрочных задач, труднее контролировать.</p><p>При составлении списка задач обязательно нужно учитывать их взаимосвязи в рамках проекта. Например, зная, как одни задачи зависят от других, можно расположить их в нужной последовательности, причём ключевые задачи всегда должны завершаться в первую очередь. Нужно выяснить, сколько времени займёт каждая задача. Это можно сделать, оценив время, необходимое для выполнения некоторой задачи (т.е. выдвинув обоснованное предположение о сроках). Поскольку для формулирования требований, конструирования интерфейса и реализации выбранной технологии сделано уже довольно много, должно быть накоплено достаточно информации, чтобы точно и без особых затруднений оценить срок для выполнения той или иной задачи. Если точно оценить время исполнения ключевых задач невозможно, вы, вероятно, провели недостаточно экспериментов, исследований и работы с прототипом.</p><p>Оценка должна учитывать всю работу, необходимую для выполнения задачи. Например, специалисты по ПО должны оценить суммарное время конструирования низкоуровневой структуры, а также реализации, отладки и блочного тестирования программы. Специалисты по обучению пользователей должны оценить, какое время потребуется на написание, рецензирование, редактирование и правку их материалов. Хотя каждый участник команды самостоятельно оценивает срок завершения своей части работы, его оценку всегда должен проверить ведущий специалист в соответствующей области. На основе этих оценок рассчитывается время реализации проекта, поэтому следует быть уверенным в цифрах.</p><p>Со временем вы увидите, что ваши оценки становятся все точнее, особенно при работе над аналогичным продуктом с использованием те же самых технологий. Обязательно проанализируйте задачи, на которые ушло значительно больше времени, чем ожидалось. чтобы понять, почему в оценку вкралась ошибка.</p><subtitle>Полнота плана</subtitle><p>Не совершайте ошибку, планируя лишь разработку самой программы: план должны отражать все аспекты проекта.</p><p>• <emphasis>Разработка</emphasis></p><p>Часть плана, регламентирующая разработку ПО, должна отводить достаточно времени на разработку, блочное тестирование и отладку всех функций программы. Команде разработчиков следует выделить дополнительное время на анализ результатов работы тестировщиков и материалов, подготовленных группой по обучению пользователей. Не исключено, что разработчикам также понадобиться время для анализа результатов специалистов по инженерной психологии и технологов.</p><p>• <emphasis>Тестирование</emphasis></p><p>Этот раздел должен давать достаточно времени для создания планов и сценариев испытаний, а также для тестирования самой инфраструктуры. План испытаний должен выделять добавочное время на тестирование ПО после окончания каждого промежуточного этапа работы.</p><p>• <emphasis>Обучение пользователей</emphasis></p><p>Здесь должно даваться достаточно времени на создание документации, электронной справки и учебника по работе с программой. На редактирование потребуется дополнительное время, которое также нужно учесть. И не забывайте проводить разбор технических особенностей ПК с участниками команды.</p><p>• <emphasis>Работа инженерных психологов</emphasis></p><p>Отведённого здесь времени должно быть достаточно для разработки детальной конструкции пользовательского интерфейса и его оценки. Выделите также время на оценку графических материалов продукта, внутренние и внешние испытания пользовательского интерфейса, и проверку документации. Кроме того, в плане должно быть время для проверки первоначального впечатления от продукта.</p><p>• <emphasis>Работа над выпуском</emphasis></p><p>Времени, запланированного в этом разделе, должно хватить для создания системы сборки ПО, разработки установочной процедуры, для конфигурирования и сопровождения системы управления исходным текстом.</p><p>• <emphasis>Зависимость от внешних факторов</emphasis></p><p>План должен в полной мере учитывать возможную зависимость проекта от внешних факторов и предусматривать выделение дополнительного времени в случае необходимости. К таким факторам относятся поставки и использование ПО от сторонних разработчиков, доступность оборудования и даже расширение штата или получение поддержки от других групп.</p><subtitle>Параллельная разработка</subtitle><p>Одна из основных идей этой книги может быть сформулирована так: параллельная реализация всех аспектов проекта повышает эффективность цикла разработки. Для её воплощения прекрасно подходит план проекта. При этом целью является реализация функций ПО путём интеграции различных задач по разработке, тестированию, обучению пользователей, инженерной психологии и работе над выпуском ПО.</p><p>Рассмотрим пример. Разработчики должны реализовать функции, соответствующие командам «Создать клиента», «Изменить клиента», «Удалить клиента». Как только эти функции станут готовы и появятся в ежедневной сборке ПО, команда тестировщиков должна испытать их и дать отзыв о качестве реализации этих функций. В то же время группа специалистов по инженерной психологии должна оценить пользовательский интерфейс с точки зрения его соответствия стандартам эргономики, практичности и задачам разработки. Группа по обучению пользователей должна привести описание этих функций к окончательному виду и дать отзыв о качестве их реализации и интеграции.</p><p>У параллельной разработки масса преимуществ. Во-первых, она концентрирует усилия всей команды, что позволяет как можно скорее завершить разработку набора функций. Это создаёт у участников команды ощущение срочной целенаправленной работы и (я на это надеюсь) успеха проекта уже на ранних стадиях его реализации. Кроме того, она позволяет сохранять синхронность работы команды в течение всего процесса разработки, так как все её члены обсуждают и решают одни и те же проблемы. Во-вторых, поскольку вся команда сосредоточена на разработке одних и тех же функций, можно будет намного раньше понять, действительно ли завершена функция или пока написан только её исходный текст, страдающий от недостатка качества интеграции и мало пригодный к использованию. Задача в том, чтобы заставить команду как можно скорее создавать надёжно работающие функции, чтобы не возвращаться к проблемам, давно считавшимся решёнными. Не правда ли, было бы очень неприятно получить сюрприз в виде плохого качества или недостатков в реализации функций, считавшихся законченными уже несколько недель, или месяцев тому назад.</p><subtitle>Баланс ширины и глубины охвата в работе над проектом</subtitle><p>Следует так упорядочивать задачи при создании плана, чтобы группы работали по всему фронту проекта, а не над отдельными его частями. Короче, не ограничивайтесь реализацией какой-либо одной части системы, игнорируя остальные. Например, работая над приложением для размещения заказов через Web, не составляйте план так, чтобы сначала был разработан пользовательский интерфейс, затем реализована прикладная логика, и лишь потом — весь код для работы с базой данных. Даже при наличии детальных спецификаций структуры, поочерёдное решение всех задач обернётся кошмаром при их интеграции, поэтому надо работать над всеми частями системы одновременно. Сосредоточьтесь на решении задачи, которая позволит ввести простой заказ, сохранить его и вывести подтверждение. Такой подход позволит сразу создать комплексное решение, пригодное для тестирования и объединяющее все необходимые программные подсистемы проекта.</p><subtitle>Контекст функций</subtitle><p>Часто в ответ на вопрос о планах от разработчика можно услышать такое: «Сначала нужно обновить менеджер ресурсов поддержкой 32-разрядных идентификаторов, потом изменить алгоритм анализа индекса PRODUCT ID, чтобы разрешить дублирование записей, а затем переписать обработчик ошибок, чтобы поддерживалась многопоточностъ». Каждый из этих пунктов вполне допустим, как элемент работы программиста, однако следует удостовериться, что все они находятся в контексте функций программы или не выходят за рамки её требований. В контексте некоторой функции задачу разработчика можно сформулировать, например, так: «организовать поддержку печати из диалогового окна ввода заказа» или «обеспечить возможность ввода нескольких заказов одновременно». Более узкая сосредоточенность также полезна для других разработчиков команды, поскольку им важно знать, когда некоторые функции станут доступны, а не срок завершения задач, необходимых для реализации этих функций. Когда план чётко определяет срок завершения всех функций или требований, остальные участники команды могут быть уверены, что их работа завершится в параллели с другими задачами.</p><subtitle>Трудности в работе с людьми</subtitle><p>Ниже описан ряд трудностей при составлении плана, имеющих отношение к работе с людьми.</p><subtitle>Распределение работы</subtitle><p>Не все разработчики от рождения наделены равными способностями. Некоторые лучше всего программируют интерфейсы, другие — системную логику. У одних опыта больше, у других — меньше. У некоторых производительность труда очень высока, у других средняя или даже низкая. Нельзя назначать задания случайным образом, полагая, что все люди обладают «типовыми» способностями. Распределяя задания между разработчиками, тестировщиками, технологами и другими членами команды, следует быть очень осторожным. В каждом случае надо учитывать уровень мастерства, индивидуальную производительность, опыт практической работы над проектами и привычки.</p><subtitle>Балансировка нагрузки</subtitle><p>Задача состоит в равномерном распределении рабочей нагрузки по реализации проекта на основе индивидуальных способностей участников команды. Однако будьте осторожны и не перегрузите лучших участников команды. Хотя они могут сделать больше других, у них тоже есть свой предел. Эти люди ещё пригодятся, чтобы помочь другим, когда возникнут неприятности.</p><subtitle>Возможные накладки</subtitle><p>Наивно полагать, что все своё рабочее время люди будут трудиться над своими основными задачами. В каждой организации возникают накладки, к которым относится время, потраченное на собрания, наладку технологии, отпуска, стажировки, командировки, больничные и выходные. Даже при 80 рабочих часах в неделю, нетрудно заметить, что 10 из них тратятся на отвлечённые действия. Это тоже следует учесть в плане. Кроме предсказуемых событий (отпусков, командировок и т.п.), план должен учитывать и неожиданные: болезни сотрудников, зимнюю непогоду и пр.</p><subtitle>Задачи: критичные и некритичные</subtitle><p>Одни задачи критичны для продолжения работы над проектом, другие — нет. Опоздание в выполнении некритичных задач не влияет на ход реализации плана в целом, а задержки с критичными задачами непременно отражаются на реализации плана. Планируя, нужно определить, к какому виду относятся те или иные задачи. Нужно постоянно следить за исполнением критичных задач, так как любая задержка повлечёт за собой срыв конечных сроков плана или рост сверхурочной работы команды. Лучше поручать решение критичных задач опытным людям, чтобы свести к минимуму риски проекта.</p><subtitle>Ловушки, подстерегающие любую команду</subtitle><p>Ниже описан ряд наиболее распространённых проблем с планированием, с которыми приходится сталкиваться командам разработчиков.</p><subtitle>Сроки: конечный и согласованный</subtitle><p><emphasis>Конечный срок — </emphasis>это предположительная дата сдачи проекта. Обычно он основывается на внешней рыночной конъюнктуре и состоянии дел в отрасли. Эта дата очень важна, поэтому нельзя соглашаться с конечным сроком, не составив прежде план. Подставьте этот срок в «уравнение» планирования, как одну из переменных и попробуйте уравновесить требуемую функциональность ПО и ресурсы для её разработки. Если уравнение не решается, придётся исключить часть функций, добавить ресурсы или сделать то и другое в некоторой пропорции. Конечная цель в том, чтобы составить уравновешенный, реалистичный и правдоподобный план, против которого не стал бы возражать ни один член команды.</p><p>Как только появится хороший план, необходимо удостовериться, что в команде нет возражений.</p><p><emphasis>Согласованный </emphasis>срок — это дата сдачи ПО, с которой согласны все участники команды. Они считают эту дату разумной и вполне достижимой. Таким образом, команда разработчиков принимает на себя обязательство закончить ПО к этому сроку. Ситуация в небольших начинающих фирмах и крупных компаниях сходна тем, что от своевременного окончания работы над ПО зависит результат работы множества людей и значительных затрат, как денежных, так и временных. Для компании чрезвычайно важно выдержать утверждённый согласованный срок, чтобы, выполнив принятые обязательства, завоевать доверие к своей компании.</p><subtitle>Ответственность за реализацию плана</subtitle><p>Чаще всего команду ставят перед фактом, жёстко определяя необходимый объём функциональности ПО, выделенные для этого ресурсы и срок, к которому всё должно быть готово. И получается, что ответственность за выполнение плана лежит не на разработчиках, а на организации или персоне, которая эти требования «спустила сверху». Такова общая формулировка этой серьёзной проблемы. Боевой дух участников команды будет невысок: ведь они будут чувствовать, что их поставили в заведомо проигрышное положение. Без чувства ответственности, не принимая на себя обязательств, команда не сможет вложить в реализацию проекта сердце и душу, и никакого энтузиазма.</p><p>Вместо этого группа разработки должна создать свой собственный план, точнее, сама поддерживать баланс в рамках плана. С принятием обязательств в команде появляется чувство ответственности. Выдвинув свой план разработки ПО, за который она отвечает, команда должна приложить все усилия, чтобы выдержать установленные в нём сроки. Доверие — это следствие выполненных обязательств.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Разработка ПО в NuMega обычно проходила под огромным давлением необходимости уложиться в срок. Конечные сроки сдачи наших продуктов обычно приурочены к выходу Microsoft Visual Studio или появлению новых платформ и технологий, например Microsoft Windows 95, Microsoft Windows NT или Microsoft COM. Чтобы воспользоваться преимуществом этих событий, наши группы маркетинга разработали всесторонние планы продвижения продукта, включающие рекламу, пресс-конференции, аналитические исследования, презентации и обучение продавцов. Ассигнования на эти мероприятия, зависящие от даты выхода ПО, достигают сотен тысяч долларов. Кроме того, наши специалисты по продажам и старшие менеджеры рассчитывали на существенный прирост прибылей с выходом каждой последующей программы. Любая задержка была чревата не только потерей больших денег и времени, но и упущенными возможностями по продаже и потерей выгодной для нашего товара рыночной конъюнктуры.</emphasis></p><p><emphasis>Чтобы обеспечить своевременный выпуск ПО, вся «домашняя работа» (поиск компромиссов между реализацией функций, доступным временем и ресурсами) выполнялась заранее, затем на основе конечного срока выхода ПО составлялись реальные планы. Таким образом, автором планов были технические специалисты, а не экономисты или старшие менеджеры. Приходилось брать на себя ответственность за реализацию этих планов независимо от их содержания. Любая ошибка планирования была нашей проблемой, и мы отвечали за то, чтобы найти решение, не допуская задержки выпуска ПО.</emphasis></p><empty-line/><subtitle>Вопрос доверия к техническим специалистам</subtitle><p>Одна из наибольших проблем, с которыми сталкиваются технические специалисты, — нехватка доверия. Постоянно нарушая сроки, техническая группа теряет доверие остальных подразделений организации. Это угрожает потерей доверия к плану и достоверности суждений о возможных компромиссах проекта, а также открывает лазейку в планировании для разного рода игр («липовым» срокам сдачи, заведомо завышенным просьбам в расчёте получить хотя бы часть от запрошенного). Однако хорошая репутация, завоёванная своевременным исполнением работы, — источник доверия, которое при необходимости позволяет бороться с серьёзными трудностями, привлекать дополнительную поддержку и извлекать выгоду из чужих сомнений.</p></section><section><title><p>Как составить хороший план</p></title><p>Теперь можно сосредоточиться на особенностях составления хорошего плана разработки ПО. В этом процессе три основных этапа: определение задач, объединение задач в группы, называемые базовыми уровнями, и группировка последних в этапы проекта.</p><p>Ниже я приведу пример типичного плана с описанием основных структур проекта, необходимых для разработки плана. Легко заметить, что целью планирования не является «микроуправление» каждой деталью проекта. Просчитать, чем будет заниматься каждый член команды в течение шести месяцев, начиная с сегодняшнего дня, скорее всего невозможно. Вместо этого нужно составить план со списком чётко определённых задач, плавно сменяющих друг друга по ходу цикла разработки. Такой план позволяет контролировать работу команды над каждой задачей, а также отслеживать ход реализации проекта со значительной определённостью.</p><subtitle>Задачи</subtitle><p>На первом этапе следует определить все задачи, решение которых позволяет реализовать некоторую функцию. Суммарное время выполнения этих задач составляет общее время реализации функции. Сначала надо спланировать реализацию необходимых функций и лишь затем переходить к планированию желательных и возможных функций. Такой метод позволит как можно скорее получить жизнеспособную программу.</p><p>Затем следует распланировать задачи групп тестирования, обучения пользователей, разработчиков пользовательского интерфейса и технологов. У каждой группы должен быть свой набор задач, определяемый на основе частей проекта, за разработку которых отвечает группа. Эти задачи должны быть организованы так, чтобы их можно было интегрировать и их реализация не слишком отставала от реализации функций разработчиками.</p><subtitle>Базовые уровни</subtitle><p>Базовые уровни определяют срок реализации группы связанных функций. Каждые 2-3 недели должен быть готов очередной базовый уровень. Помните: соответствующий фрагмент ПО должен устанавливаться с помощью программы установки, а его функциональность должна быть доступна для разработчиков. Реализация базовых уровней — важные краткосрочные цели, на достижении которых необходимо сосредоточить внимание и усилия команды. Вообще ничто не может быть важнее своевременного завершения очередного базового уровня. Если он запаздывает, можно официально говорить об отставании проекта от плана, что требует немедленных корректирующих действий. Ниже приводится ряд базовых уровней (из продукта BoundsChecker, разработанного NuMegaдля обнаружения ошибок в программах).</p><p>• Создана библиотека исходных текстов, выполнена первая ежедневная сборка программы, закончена установочная процедура для «скелета» программы.</p><p>• Программа позволяет активизировать основные функции для работы с памятью и вести регистрацию их работы.</p><p>• Программа выводит первое сообщение об ошибке при работе с памятью с помощью прототипа пользовательского интерфейса.</p><p>• Программа успешно обнаруживает утечки памяти типа 1 и 2.</p><p>• Программа успешно обнаруживает утечки памяти типа 3 и 4.</p><p>• Программа успешно обнаруживает утечки памяти типа 5 и 6.</p><p>• Появляется реальный пользовательский интерфейс программы, но без поддержки печати, сортировки и фильтрации.</p><p>• Закончена поддержка печати, сортировки и фильтрации.</p><p>• Программа интегрируется с другими программами пакета.</p><subtitle>Промежуточные этапы</subtitle><p>Промежуточный этап — это группа базовых уровней, представляющих законченную часть программы. Необходимо равномерно распределить их завершение по ходу работы над проектом. Например, если для проекта определено 4 промежуточных этапа, то каждому из них должны соответствовать 25% реализации проекта. Очевидно, что чем сложнее проект, тем больше у него промежуточных этапов.</p><p>У каждого промежуточного этапа должен быть период стабилизации и интеграции (см. главу 6). Напоминаю, что в это время (обычно 1-2 недели) вся команда концентрируется на решении проблем, обнаруженных в реализованных функциях. Периоды стабилизации жизненно важны для проекта, поскольку в это время проводится тестирование, исправление ошибок, устранение неполадок в структуре и интеграции, проводится оценка производительности, т.е. все мероприятия, способствующие стабилизации программы. Не приступайте к реализации новой функции, пока не убедитесь, что только что законченные функции работают хорошо. Помимо всего прочего, периоды стабилизации очень удобны для разного рода доработок. В это время отставшие участники или подразделения команды могут наверстать упущенное и догнать остальных, чтобы вновь работать синхронно.</p><subtitle>Внешние промежуточные этапы</subtitle><p>В завершении внешних промежуточных этапов участвуют люди или группы, не работающие над проектом постоянно. Внешние промежуточные этапы знаменуют собой критические точки проекта. Вот самые распространённые внешние промежуточные этапы:</p><p>• <emphasis>альфа-версия</emphasis> — выпуск, в котором реализован лишь ряд критических функций программы; альфа-версии не предназначены для широкого использования, однако могут быть полезны для демонстрации прогресса проекта или сбора внешних отзывов о работе критических функций;</p><p>• <emphasis>бета-версия</emphasis> — выпуск, в котором реализованы если не все, то большинство функций; бета-версии передаются клиентам для испытаний и оценки;</p><p>• <emphasis>кандидат на выпуск</emphasis> — в случае успешного окончания тестирования этот выпуск будет передан в производство для тиражирования; появление кандидата на выпуск — знак того, что проект почти закончен и выпуск ПО состоится;</p><p>• <emphasis>передача в производство</emphasis> — к этому времени рабочий выпуск будет передан в производство для тиражирования (или опубликован в Web, в зависимости от назначения ПО).</p><p>Любой из внешних промежуточных этапов требует распространения ПО за пределами команды или даже компании. Так как это очень важное событие, перед каждым промежуточным этапом нужен период стабилизации. Он позволяет команде сосредоточиться на его качестве, интеграции; выполнить «подгонку» частей и устранить оставшиеся неполадки перед выпуском продукта. (Подробнее о бета-версии и кандидате на выпуск см. главы 13 и 14)</p><subtitle>Пример</subtitle><p>Чтобы закрепить основы, давайте шаг за шагом рассмотрим подробный пример (табл. 11-1). В таблице показано упрощённое описание проекта, откуда удалена часть информации, обычно имеющейся в нём. Тем не менее, этот пример достаточно детализирован, чтобы продемонстрировать стыковку всех частей проекта. Ниже приводится ряд допущений, сделанных при планировании этого примера.</p><p>• Принципы планирования.</p><p>* С каждой функцией связан список технических задач. В этом примере они не показаны, однако их легко перечислить в реальном плане. На выполнение одной задачи отводится не более 2 недель, а на большинство — неделя или даже меньше. В зависимости от приоритетных требований к ПО, в первую очередь реализуются необходимые функции, а затем — менее важные.</p><p>* Тестирование функций осуществляется по мере завершения их разработчиками. Тестирование некоторых функций будет автоматизировано, другие же придётся тестировать вручную. Подробное описание испытаний приводится в плане тестирования.</p><p>* Специалисты по обучению пользователей составляют описания функций по мере их завершения. Работа по составлению документации должна как можно меньше отставать от реализации функции. Подробно эти действия описаны в плане обучения пользователей.</p><p>* Специалисты по инженерной психологии оценивают качество реализации всех функций пользовательского интерфейса, консультируют по поводу внесения изменений и контролируют впечатление от продукта по мере реализации проекта. Детали работы специалистов по инженерной психологии описаны в специальном плане.</p><p>* Во время работы над выпуском ПО сразу же создаётся простая сборка программы и установочная процедура. Затем сборка и установочная процедура будут регулярно пополняться новыми функциями, таким образом, они будут включать все большую долю функциональности готовой программы. Они также поддерживают подключение новых функций по мере их готовности. Конкретные усовершенствования функций и возможностей программы будут описаны в плане работы над выпуском.</p><p>• Участники работы над проектом:</p><p>— Мэтт — ведущий разработчик, занятый полное рабочее время;</p><p>— Джон — программист;</p><p>— Джим — ведущий тестировщик, также отвечает за автоматизацию;</p><p>— Фрэнк — тестировщик, исполняет автоматизированное и ручное тестирование функций;</p><p>— Сара — ведущий специалист по обучению пользователей;</p><p>— Кенни — ведущий специалист по инженерной психологии;</p><p>— Боб — ведущий технолог.</p><p>• Промежуточные этапы, внешние и внутренние.</p><p>— План проекта состоит из 4 базовых уровней, на реализацию которых отводится по 2 месяца, и 2-х главных промежуточных этапов. Будут выпущены 2 бета-версии, 1 версия — кандидат на выпуск и 1 версия для тиражирования.</p><p>— Каждый промежуточный этап образован 2 базовыми уровнями. Первому промежуточному этапу будет соответствовать наполовину законченный проект, а второму этапу — полностью законченный проект.</p><p>— Работа над бета-версией 1 займёт 1 месяц. Функции 14 и 15 будут добавлены во время работы над бета-версией 1, а оставшееся время будет потрачено на тестирование, настройку и исправление ошибок. У каждого участника группы есть некоторый список действий на время работы над бета-версией 1.</p><p>— В бета-версии 2 не будет новых функций по сравнению с бета-версией 1. Внесение значительных изменений в главные функции не допускается, разрешено лишь тестирование, настройка и исправление ошибок. У каждого члена группы есть список задач на это время.</p><p>• Кандидат на выпуск.</p><p>Версия — кандидат на выпуск будет готова к концу работы над бета-версией №2, если её тестирование пройдёт успешно и не будет обнаружено серьёзных ошибок.</p><p>• Контрольные собрания.</p><p>— Проведение собраний для контроля за состоянием проекта запланировано на каждый понедельник. Если достигнуть базового уровня вовремя не удалось (или все говорит об этом), придётся вносить изменения, чтобы наверстать упущенное.</p><subtitle>Табл. 11. Примерный план.</subtitle><image l:href="#pic112.jpg"/><p><emphasis>Цифрами обозначены функции, состояние функций обозначено следующими буквами:</emphasis></p><p><emphasis>Ф — функция запрограммирована, выполнено блочное тестирование и завершены все связанные с ней технические задачи;</emphasis></p><p><emphasis>А — тестирование функции автоматизировано:</emphasis></p><p><emphasis>Р — функция протестирована вручную;</emphasis></p><p><emphasis>Д — функция документирована:</emphasis></p><p><emphasis>И — проверена простота использования функции.</emphasis></p><empty-line/><subtitle>Добавления в бета-версии</subtitle><p>Легко заметить, что реализация двух задач в этом примере запланирована на период работы над бета-версией 1. Во время работы над любой бета-версией надо воздерживаться от добавления новых функций, особенно важных и сложных. Однако иногда есть смысл планировать включение в первую бета-версию функций, реализация которых не требует больших затрат и не вносит особого риска. Чем дольше задерживается передача программы в руки бета-тестеров, тем больше времени займёт сбор отзывов о качестве реализации и работе функций программы. Часто польза от раннего цикла бета-тестирования превышает риск включения небольших функций после начала программы бета-тестирования.</p><p>Хотя включить несколько дополнительных функций время работы над первой бета-версией ещё допустимо, в период работы над последней бета-версией реализацию дополнительных функции лучше не планировать. При работе над последней бета-версией функции остаются неизменными, и усилия команды концентрируется на качестве, производительности и интеграции. (О тестировании бета-версий см. главу 13.)</p><subtitle>Неожиданные проблемы</subtitle><p>Создавая план согласно описанным в этой главе принципам, вы, вероятно, будете планировать проект, как обычно. Однако разработка ПО — это не точная наука, и до проблем всегда рукой подать. Чтобы заметить малейшее отклонение проекта от намеченного пути, нужно регулярно проверять ход выполнения плана и после завершения каждого промежуточного этапа сравнивать фактическое состояние проекта с планом. Если работа отстаёт от плана, надо определить проблему, изменить план и постараться завершить очередной промежуточный этап в срок. Все так просто? Однако это та самая ситуация, когда от менеджера проекта и ведущих специалистов требуется полная самоотдача. Поскольку очень сложно вести работу над проектом, не отставая от графика, в третьей части основное внимание уделено именно этому вопросу.</p></section><section><title><p>Типичные проблемы и их решение</p></title><p>Далее обсуждается ряд типичных проблем и вопросов, возникающих при использовании описываемых здесь методик а также их решения.</p><subtitle>Ничего не получается!</subtitle><p>Создание хорошего плана требует серьёзных усилий, поэтому легко понять, почему некоторые группы используют планы без особого энтузиазма. Бывало, что, пересилив себя, некоторые люди всё же пытались спланировать проект, но часто из-за множества неожиданных проблем им приходилось оставлять план. Если план не отражает действительность, он будет в значительной степени игнорироваться.</p><p>Бесспорно, планирование — задача не из лёгких, однако решить её необходимо, поскольку план — это руководство к реализации проекта. Если вы намерены завершить программу в срок, нужно уяснить объём предстоящей работы и время, нужное для её выполнения. Описанные в этой книге методы упрощают планирование, делают его более предсказуемым и менее рискованным.</p><subtitle>Это сложнее, чем кажется на первый взгляд…</subtitle><p>Кажется, что втиснуть задачи в рамки 1-2 недель так просто, но это может быть настоящим испытанием. Наверное, в плане всегда найдётся задача, на выполнение которой отводится 3-5 недель. Такую долгосрочную задачу лучше разбить на несколько меньших. Чем чаще контролируется прогресс проекта, тем проще обнаружить отклонения от плана. Как правило, трудности при разбиении задачи возникают из-за неполного её понимания, а это тревожный признак. Чтобы лучше разобраться в том, что предстоит сделать, решение нужно смоделировать.</p><subtitle>Потеря согласованности</subtitle><p>В плане должны быть периоды синхронизации. Помимо стабилизации ПО, они позволяют остальным участникам команды наверстать упущенное/ Нельзя предусмотреть все проблемы заранее, но некоторые из них можно предсказать. Какими бы они ни были, в плане надо выделить время для их решения.</p></section></section></section><section><title><p>Часть 3</p><p>Исполнение проекта</p></title><section><title><p>Глава 12</p><p>Держим курс</p></title><section><p>Итак, основное планирование закончено — остаётся лишь «нажать на рычаг и выдать готовый продукт». Хотя процесс выглядит довольно механистичным, всё равно приходится постоянно следить за ходом реализации проекта и бороться с повседневными проблемами. В этой главе мы обсудим, как эффективно следить за состоянием проекта и какие меры принимать, чтобы не дать проекту отклониться от намеченного пути.</p></section><section><title><p>Анология с самолётом</p></title><p>Представим самолёт, следующий из Бостона в Сан-Франциско. Во время полёта бессчётное множество факторов могут нарушить график рейса или сбить самолёт с курса. Однако большинство самолётов, летящих прямыми рейсами, всё же прибывает в пункт назначения по расписанию и приземляется там, где нужно. Как и самолёт, проект нуждается в навигационной системе и управлении в полёте, чтобы не сбиться с курса и не нарушить график. Без такого механизма работа над проектом будет похожа на полет вслепую.</p><p>• <emphasis>План полёта</emphasis></p><p>План полёта разрабатывается задолго до взлёта. Среди прочего в плане описаны этапы полёта, следуя которым экипаж может привести самолёт из пункта отправления в пункт назначения (например: «лететь 100 миль на запад, в пункте X повернуть на северо-запад, затем 500 миль держать этот курс» и т.д.).</p><p>Аналогично работа с прототипом и моделью использования ПО позволила сформировать базовое представление о том, что создаётся в рамках проекта и на что это будет похоже в готовом виде. Грамотно проведённое планирование позволило наметить основные этапы создания продукта и определить сроки их выполнения. Таким образом, основное внимание во второй части этой книги (главы 12, 13,14) мы сосредоточили на создании «плана полёта» для проекта.</p><p>• <emphasis>Элемент непредсказуемости</emphasis></p><p>Хотя план полёта и регламентирует действия экипажа во время рейса, он не может и не должен предсказывать или решать все проблемы, которые могут возникнуть в полёте. Haправление ветра, турбулентности атмосферы, колебания тяги двигателей, пробки в воздушных эшелонах и масса других факторов влияют на полет и потенциально могут отклонить самолёт от курса и выбить его из расписания.</p><p>Проект тоже столкнётся с тысячами проблем, которые нельзя ни предсказать, ни запланировать. Любая из них может сбить его с курса или стать причиной задержки. Как и самолёту, проекту нужна система быстрого реагирования на события, происходящие во время полёта.</p><p>• <emphasis>Навигационная система</emphasis></p><p>Удерживать курс самолёта помогает навигационная система, которая постоянно (примерно каждые несколько минут) определяет его координаты и сравнивает результат с координатами пункта назначения. В полёте навигационная система постоянно вносит небольшие коррективы, чтобы вернуть самолёт на намеченный курс. Принцип работы навигационной системы состоит в допущении, что самолёт всегда летит в неверном направлении, и его нужно вернуть на правильный курс (рис. 12-1).</p><subtitle>Рис. 12-1. Навигация в непредсказуемых условиях.</subtitle><image l:href="#pic121.jpg"/><empty-line/><p>Проекту тоже нужна «навигационная система». Нужно почаще проверять состояние проекта и вносить небольшие коррективы, прежде чем он успеет сильно отклониться от намеченного курса. В ходе разработки надо регулярно оценивать прогресс проекта и своевременно вносить соответствующие изменения.</p><p>• <emphasis>Снижение</emphasis></p><p>По мере приближения к пункту назначения начинается работа по подготовке самолёта к посадке, которая включает ряд специальных действий — от выделения взлётно-посадочной полосы диспетчером аэропорта до поднятия столиков пассажирами. Члены экипажа знают, какие процедуры нужно выполнить, чтобы безопасно посадить самолёт в нужном месте и точно по расписанию. Им не приходиться лихорадочно соображать, что делать, когда самолёт уже пошёл на снижение.</p><p>Проект также нужно безопасно «посадить», не допуская никаких промахов при приближении конца пути. Надо организовать процесс плавного «снижения», направляющий завершающие этапы проекта. Этот процесс нужно спланировать заранее, а не создавать в спешке во время «захода на посадку». Из-за важности последнего этапа я решил полностью посвятить ему главу 14.</p></section><section><title><p>Процесс измерений и мониторинга состояния проекта</p></title><p>Как сказано в главе 9, план проекта — это совокупность описаний отдельных его этапов, каждый из которых харак-теризуется определённым уровнем законченности некоторых функций программы, который должен быть достигнут к заданному сроку. Эти этапы можно формально рассматривать как контрольные точки для оценки прогресса проекта. Если функциональность программы реализуется в срок, в заданном объёме и работает должным образом, значит, вы не сбились с курса. Обратная ситуация является проблемой, которую нужно сразу решать. Если программа собирается каждый день, в любой момент её можно установить и её тестирование ведётся параллельно разработке, значит, у вас есть необходимые инструменты и процедуры для регулярного контроля проекта. Кроме того, обладая планом, в котором отмечены даты и параметры контрольных точек, всегда можно определить, на каком этапе находится проект в данный момент. Сравнив текущее положение проекта с планом, можно узнать, в верном ли направлении идёт работа.</p><p>Внесём ясность в значение понятий, рассмотренных выше. Если работа над проектом только начата и через две недели должен быть закончен первый этап, во что бы то ни стало нужно закончить его вовремя. Если вы всерьёз собираетесь уложиться в конечные сроки, следует устанавливать промежуточные сроки и выдерживать их. Если для этого придётся работать по ночам и по выходным — работайте. Не дожидайтесь конца работы над проектом, чтобы наверстать упущенное: тогда будет уже слишком поздно. Следует успевать выполнить намеченное к определённому сроку прямо перед наступлением этого срока. Удалось уложиться в срок — это хорошая работа, и успех обязательно нужно отметить всем вместе. Но если работа просрочена, соберите группу, выясните, в чём дело, и устраните проблему. Также необходимо составить план навёрстывания упущенного. Чтобы закончить проект к намеченному сроку, группа должна работать очень серьёзно и напористо, выдерживая промежуточные контрольные сроки.</p><p>А есть ли способ заранее узнать, удастся ли достичь следующую контрольную точку вовремя? Завершение отдельных этапов проекта — формальные события, с которыми обычно связаны объективные параметры. Но их, как правило, разделяет несколько недель, а для мониторинга проекта в периоды между соседними контрольными точками нужны дополнительные инструменты.</p><p>Решению этой проблемы и будет посвящена остальная часть главы. Я расскажу о правилах сбора текущих сведений о проекте и о том, как при необходимости менять направление и темп проекта. Помните: срыв плана в конце работы над проектом случается не вдруг, а назревает потихоньку, день за днём.</p><subtitle>Определение состояния проекта</subtitle><p>Сбор и распространение информации между участниками группы — ключ к эффективному исполнению плана проекта. В этом разделе я покажу, как лучше всего собрать сведения о состоянии проекта и довести их до сведения каждого, не таская всю группу по собраниям из-за мелочей, и избежать различных накладок. И, что важнее всего, вы узнаете, как с помощью собранной информации увидеть проблемы до того, как они станут причиной крупных задержек или существенных трудностей.</p><subtitle>Ежедневные сборки и базисные тесты</subtitle><p>Как сказано выше, ежедневные сборки программы и базисные тесты — это пульс проекта. Оба мероприятия критичны для определения состояния проекта. Если в течение нескольких дней или недель вы не в состоянии скомпоновать программу, проект в беде. Возможность сборки ПО нужна для поддержания его внутренней согласованности, интеграции и визуализации изменений. Если нельзя выполнить сборку программы, оценить состояние проекта также невозможно.</p><p>Кроме того, необходимо проводить базисные тесты, критичные для регулярной (ежедневной) оценки базового, качества ПО. Обнаруженные проблемы надо сразу решать, поступать иначе — то же самое, что сидеть сложа руки, когда самолёт быстро снижается.</p><subtitle>Собрания</subtitle><p>В той или иной форме контрольные собрания проводятся почти в каждой группе. Контрольные собрания — замечательный способ сбора и распространения ключевой информации о состоянии проекта, поддержания контактов и совместной работы в коллективе. Но если контрольные собрания проводятся плохо, они могут до смерти наскучить людям, породить ощущение беспомощности и нарушить сплочённость группы. Ниже перечислен ряд правил, придерживаясь которых, можно извлечь из контрольных собраний максимум пользы.</p><p>• <emphasis>У собрания должна быть определённая цель</emphasis></p><p>На контрольном собрании участники группы сообща обсуждают крупные достижения, неудачи и трудности. Сосредоточьтесь на том, что удалось и что не удалось. На собрании также поднимают важные проблемы, требующие внимания одного или нескольких участников группы.</p><p>• <emphasis>На собраниях должны быть все</emphasis></p><p>На контрольном собрании должны быть все участники реализации проекта. К ним относится основной состав группы (см. главу 4): менеджер проекта, разработчики, тестировщики, специалисты по обучению пользователей и технологи.</p><p>• <emphasis>Не посвящайте собрание решению частных проблем</emphasis></p><p>Собрания часто становятся местом встречи нескольких участников группы, которые хотят обсудить свои проблемы. Несомненно, эти проблемы важны и требуют разрешения, но контрольное собрание — не место для «мозговой атаки», решения технических и других серьёзных вопросов. Если попытаться охватить проблемы всех участников группы, то лучшую часть дня придётся потратить на собрания, при этом значительная часть времени остальных участников группы будет потеряна зря: люди должны знать суть решения, а не его подробности.</p><p>Должен ли каждый разработчик отсиживать на собрании, посвящённой новому формату электронной справки? Должен ли каждый тестировщик выслушивать, как разработчики обсуждают набор изменений в API? Нет. Если проблему нельзя решить за две минуты, для её решения надо провести отдельное собрание, пригласив только тех, кого эта проблема касается. Решения, выработанные на собраниях, посвящённых частным проблемам, следует доложить на общем контрольном собрании. Не используйте общегрупповые контрольные собрания для решения частных проблем.</p><p>Столь же неправильно докладывать на контрольном собрании о всех задачах, над которыми пришлось работать за неделю. Нужно лишь сказать, идёт ли разработка проекта по намеченному пути. Если нет, надо перечислить причины, всё остальное несущественно.</p><p>• <emphasis>Не затягивайте собрание</emphasis></p><p>Контрольные собрания должны быть краткими и проводиться чаще. Рекомендуется проводить их хотя бы раз в неделю, предоставляя каждому участнику группы пять минут на доклад о состоянии дел в вверенной ему области с учётом вышеописанных требований. Организатор собрания (обычно это менеджер проекта) должен поддерживать обсуждение в определённом русле и не позволять ему переходить на отвлечённые темы. Однако все важные вопросы, поднятые любым участником группы, следует внести в список проблем проекта.</p><p>• <emphasis>Ведите список нерешённых проблем</emphasis></p><p>Во время реализации проекта обычно возникают проблемы, которые надо решать. Чтобы не забыть о них, в главе 5 я рекомендовал регистрировать такие проблемы, назначать ответственных за их решение и обязательно разъяснять найденное решение другим. Аналогичную концепцию можно применить при проведении контрольных собраний. На собраниях проводится анализ нерешённых проблем, назначаются ответственные за их решение и устанавливаются сроки. Таким образом, каждый будет знать, что все проблемы будут рассмотрены и решены.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>В преддверии завершения важного промежугочного этапа сотрудники компании NuMega должны были сообща устранять последние неполадки и ошибки. Чтобы гарантированно обеспечить себя актуальной информацией, мы составили список неполадок, упорядоченный сначала по их приоритету, а затем — по именам ответственных за их устранение. Каждый участник контрольного собрания получал копию этого списка (позже печатные списки были заменены подключёнными к сети лэптопами, что позволило работать прямо из системы). Такие обзоры позволили мобилизовать всю группу на решение важных проблем и устранение ошибок, сдерживавших работу других или бывших источником особого риска. Интенсивное общение имеет очень большое значение на завершающих стадиях работы над проектом, бета-версией или новым выпуском программы.</emphasis></p><empty-line/><subtitle>«Управление мимоходом»</subtitle><p>Очень полезна технология «управления мимоходом» (Managing by Walking Around, MBWA). Контрольные собрания — формальность, но менеджер проекта и ведущие специалисты, даже просто находясь в группе, могут встречаться с участниками для неформального обсуждения тех или иных проблем.</p><p>• Каждый видит, что менеджер проекта участвует в работе и заботится об успехе проекта. Он не собирается отгородиться от исполнителей проекта цифрами, графиками и рисунками, управляя проектом лишь через компьютер. При таком подходе менеджер проекта и ведущие специалисты становятся доступнее, и с ними можно быстро и без проблем обмениваться информацией.</p><p>• Люди часто ощущают дискомфорт, выступая на контрольных собраниях. Удивительно, что во время беседы тет-а-тет за чашкой кофе они высказывают такие мысли, о которых скорее всего даже не заикнулись бы на групповом собрании.</p><p>• Такая практика допускает спонтанное обсуждение важных предметов и проблем, в ходе которого часто рождаются совершенно новые подходы к их решению. Замечательные идеи не рождаются в два часа пополудни каждый понедельник. Чтобы они возникали, нужно поощрять внеплановое, неформальное и нерегламентированное общение.</p><p>• Поскольку почти все ведущие специалисты когда-то были просто инженерами, они очень не любят отрываться от компьютера и покидать свой офис. Но происходят просто удивительные вещи, когда кто-то мимоходом спрашивает их: «как идут базисные тесты?», «что нового с проблемой X?» или «ну как, уже заканчиваем второй этап?»</p><p>• Хороший менеджер проекта и ведущий специалист обязательно проводит некоторое время наедине с участниками группы. Такие встречи не обязательно должны быть формальными или проводиться по расписанию. Одного короткого визита участника по какому-нибудь личному или рабочему вопросу достаточно для поддержания сосредоточенной и слаженной работы. Кроме того, это замечательный способ избавиться от проблем с кадрами или иных трудностей при реализации проекта прежде, чем они возникнут. Если вы не хотите получить неприятный сюрприз во время контрольного собрания или, что ещё хуже, накануне сдачи проекта, как можно чаще общайтесь со всеми участниками группы и с каждым по отдельности.</p><subtitle>Обмен информацией</subtitle><p>Менеджер проекта и ведущие специалисты должны эффективно взаимодействовать друг с другом и с другими членами группы, поскольку совместное переживание главных успехов и неудач имеет решающее значение для прогресса проекта. Поскольку как успехи, так и неудачи одинаково важны, рассмотрим те и другие.</p><p>• <emphasis>Успехи</emphasis></p><p>Отмечайте каждый крупный успех и делайте его достоянием группы. Это важное доказательство того, что проект живёт и здравствует. Поэтому, создав ежедневную сборку программы, первый вариант установочной процедуры или закончив важную функцию ПО, не забудьте разослать участникам группы поздравления по электронной почте, разделив со всеми это радостное событие. В торжества по поводу особо важных событий необходимо вовлекать большую часть коллектива: отделение или даже весь персонал компании.</p><p>• <emphasis>Неудачи</emphasis></p><p>Неудачи необходимо как можно скорее обнаруживать, сообщать о них всем участникам команды и устранять. Не стоит ожидать от команды абсолютно безупречной работы. Знайте: проблемы возникнут непременно. Работа команды заключается в том, чтобы как можно скорее найти их и решить. Худший способ борьбы с проблемами — замалчивать их или вовсе не признавать их существования, так как это не поможет ни решить проблему, ни вернуть проект на намеченный путь.</p><p>Чтобы не допустить этого, менеджер проекта и ведущие специалисты должны быть доступны и открыты для общения. Если у члена команды возникает ощущение, что неудачи или проблемы не получат профессионального решения, сокрытие проблемы и неверие в её существование станет хроническим источником бед.</p></section><section><title><p>Внесение изменений</p></title><p>Беспроблемных проектов не бывает. Конечно, есть надежда, что «навигационная система» заранее предупредит о трудностях. Это поможет ликвидировать их, прежде чем они перерастут в серьёзные проблемы. Однако чтобы устранить отклонение проекта от намеченного пути, потребуется изменить направление работы и, возможно, увеличивать её темп. Посмотрим, как можно это сделать…</p><subtitle>Смена курса</subtitle><p>Анализируя возможность изменения существенных элементов проекта (функций, технологии, платформ или плана реализации), нужно обязательно придерживаться следующих правил. Они помогут избежать неприятностей и принять правильное решение.</p><p>• <emphasis>Собирайте факты, но не перестарайтесь с их анализом</emphasis></p><p>Часто решение принимают на основе впечатлений, эмоций или единичного случая, а не анализа набора неопровержимых фактов. Прежде чем вносить в проект изменения, убедитесь в их абсолютной необходимости. В частности, не позволяйте эмоциональным утверждениями типа «Программа виснет на каждом шагу» стать причиной отказа от реализации половины функций программы и переброски дополнительных ресурсов на тестирование. Прежде чем действовать, соберите факты. При каких условиях происходит зависание? Кто сообщает о зависаниях? Как часто они происходят? Вполне возможно, выяснится, что все эти зависания связаны с заурядными ошибками, устранёнными ещё на прошлой неделе.</p><p>С другой стороны, постарайтесь не попасть в ловушку «паралича анализа». Не убивайте недели на анализ проблем лишь затем, чтобы оказалось, что момент для исправления упущен. Например, если после долгих раздумий так и не удалось собрать достаточно данных, чтобы решиться на изменение какой-то функции, примите решение немедленно, исходя из текущих знаний.</p><p>• <emphasis>Вовлекайте в обсуждение проблемы других специалистов</emphasis></p><p>Собрав факты, обязательно обсудите проблему с ключевыми специалистами группы, включая разработчиков, тестировщиков, специалистов по инженерной психологии, технологов и менеджеров по продукции. Проводите «мозговые штурмы», проверяя различные идеи, и обсуждайте альтернативы. Если решение касается других членов команды, дайте им шанс поучаствовать в обсуждении. Приняв решение (даже если решено ничего не предпринимать), известите о нём каждого. Держите команду в курсе всех важных изменений и их причин, а также планов действий на будущее. Плохая информированность об изменениях проекта ведёт к падению боевого духа коллектива. </p><p>• <emphasis>Используйте помощь других групп при разработке и тестировании</emphasis></p><p>Часто, когда возникает необходимость что-то добавить, подправить или проверить, все участники группы, как назло, оказываются по уши занятыми своими делами и ни у кого просто нет времени. В этом случае нужно подумать о привлечении дополнительных сотрудников. Если есть свободные люди из отдела технической поддержки, справочного бюро, специалисты по выпуску или продаже или другие члены команды по созданию продукта, обязательно попросите их помочь.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>В NuMega группа технической поддержки часто используется для подстраховки при разработке программ. В службе поддержки компании много ярких личностей, которые хотели бы повысить свой опыт разработчиков. Мы дали им возможность поработать над созданием самых настоящих программ, а они в свою очередь помогли группе разработчиков не выбиться из плана. Естественно, такая помощь часто означала для членов группы технической поддержки сверхурочную работу, но они почти всегда были готовы потратить несколько лишних часов, чтобы помочь разработчикам и приобрести дополнительный опыт. Кроме того, это возможность сделать карьеру. Благодаря полученному опыту и оказанной ими помощи, участники группы технической поддержки завоевали уважение разработчиков и энергично продвигались на должности разработчиков. Это ещё одна причина нанимать стоящих людей на любую должность.</emphasis></p><empty-line/><p>• <emphasis>Нанимайте консультантов и исполнителей</emphasis></p><p>Следует подумать о найме консультантов и исполнителей для выполнения чётко определённой и относительно краткосрочной работы. Ваша задача — закрыть критические участки проекта, на которые не хватает собственных кадров. Но остерегайтесь использования консультантов в качестве ведущих специалистов, так как они, скорее всего, покинут группу по завершении проекта.</p><p>• <emphasis>Лучше отказаться от части функций, чем расширятъ план</emphasis></p><p>При необходимости подумайте об отказе от некоторых функций программы. Если приоритетные функции определены и их реализация запланирована на ранних этапах работы над проектом, вполне можно отказаться от ряда второстепенных функций. Прежде чем решиться на расширение плана, рассмотрите возможность исключения ряда функций второго или третьего плана. Отказ от реализации некоторых функций позволяет разгрузить все группы и снизить риск срыва. Расширение плана лишь повышает риск срыва даты выхода продукта. Тривиальное добавление новых функций, не имеющих значения для успеха ПО — не самое мудрое решение: важнее вовремя выпустить продукт, чем реализовать все второстепенные функции.</p><subtitle>Задавайте верные вопросы</subtitle><p>Есть хороший способ решить, вносить или не вносить изменение. Для этого нужно спросить у себя: «А что, если я не стану этого делать?» Такие вопросы особенно полезны в борьбе с так называемым «дрейфом функций», который может существенно прибавить работы группе. Однако зачастую изменения вносят без солидного технического или экономического обоснования. Изменение может воплощать хорошую идею, но она может не стоить того риска, которому подвергает весь проект. Конечно, должен быть определённый уровень совершенствования функций, но не до такой степени, чтобы проект был захлестнут потоком мелких изменений. Всегда спрашивайте себя: «А что, если я не стану этого делать?» Это заставит сравнить цену отказа от изменения с ценой его реализации.</p><p>Вот примеры хороших вопросов, на которые нужно ответить при поступлении предложения о реализации новой функции.</p><p>• Какая часть прибыли будет потеряна, если отказаться от реализации новой функции?</p><p>• Скольким клиентами будет полезна новая функция?</p><p>• Не сорвёт ли (или подвергнет риску) новая функция срок выхода продукта?</p><p>• Снизится ли конкурентоспособность продукта без этой функции?</p><p>• Какому риску подвергнется качество продукта при отсутствии новой функции?</p><p>• Какое влияние окажет новая функция на использование программы, документацию, а также на процессы её сборки и установки?</p><p>Это не означает, что нужно отказаться от изменений вообще, — просто всегда нужно быть уверенным, что выгода от изменения намного больше расходов на её реализацию.</p><subtitle>Стремление к согласию не должно мешать принятию решений</subtitle><p>Решать проблемы нужно как можно скорее, не позволяя им долго оставаться открытыми. Так или иначе, решение должно быть принято. Прийти к согласию — ваша задача, но помните, что она не всегда достижима. Кроме того, консенсус означает не единодушное согласие, но согласие большинства. Если после сбора информации и её анализа согласие все ещё не достигнуто (т.е. существуют разные мнения) абсолютно необходимо, чтобы менеджер проекта или один из его ведущих специалистов принял решение самостоятельно. Не откладывайте это и не проявляйте нерешительность — здесь нужна сильная рука лидера. Группе необходимо решение для продолжения работы, задержка с его принятием снижает мотивацию группы, и можно упустить благоприятный момент. Помните: лучше принять неверное решение, чем долго тянуть с его принятием и так никогда не узнать, что правильный выбор был совсем рядом.</p><subtitle>Смена темпа работы</subtitle><p>Несмотря на самые благие намерения и усилия по планированию, порой приходится увеличивать темп работы, чтобы уложиться в сроки или отреагировать на изменившиеся условия. На первых порах сверхурочная работа требуется для решения большинства проектов; такая ситуация также типична для большинства проектов, которые нужно завершить в сжатые сроки, но бывают случаи, действительно требующие особой самотдачи, и речь здесь идёт не просто о паре лишних часов в неделю. Прежде чем принять решение об увеличении нагрузки на группу, нужно знать, когда это уместно и как делать это эффективно.</p><subtitle>Когда нужно увеличить нагрузку</subtitle><p>Менеджеру проекта и ведущим специалистам очень важно знать, когда нужно проситъ команду или её участника о дополнительных усилиях. Чтобы эта просьба нашла отклик, её причины должны быть обоснованы, а задачи — ясны каждому. Дополнительная работа потребуется, если необходимо следующее:</p><p>• <emphasis>Завершить очередной этап в срок</emphasis></p><p>Если очередной этап работы близится к концу и при этом есть ощущение, что можно не уложиться в сроки, нужно начинать сверхурочную работу уже сейчас, а не позже. Как сказано выше, не следует дожидаться начала следующего этапа, чтобы обнаружить проблемы с завершением текущего. Если чувствуете, что план может быть сорван, лучше приложить дополнительные усилия раньше, чем позже.</p><p>• <emphasis>Наверстать упущениое</emphasis></p><p>Если не удалось уложиться в срок при выполнении промежуточного этапа работы, упущенное придётся навёрстывать. Помимо этого, нужно завершить следующий этап в срок. Если вы всерьёз хотите вовремя закончить работу над проектом, приложите дополнительные усилия уже сейчас.</p><p>• <emphasis>Справиться с возросшей конкуренцией</emphasis></p><p>Если на рынке произошли серьёзные изменения, чтобы достигнуть успеха или просто не быть вытесненным конкурентами, реализацию проекта придётся ускорить. При этом, возможно, придётся добавлять новые функции к продукту или ужать план на месяц. Это потребует от всей группы полной самоотдачи.</p><p>Прежде чем просить кого бы то ни было посвятить проекту дополнительное время, убедитесь, что ваша просьба обоснованна. Постоянно прося команду об изменении графика работы или штурмуя каждую проблему работой в сверхурочное время, вы быстро исчерпаете продуктивность и эффективность команды. Нельзя заставлять людей слишком долго и слишком много работать сверхурочно. Этот подход следует использовать для навёрстывания упущенного или для адекватной реакции на внешние события, но нельзя делать сверхурочные частью нормального графика работы.</p><subtitle>Как увеличивать нагрузку</subtitle><p>Сверхурочная работа может потребоваться от одного из участников команды, функционального подразделения или от команды целиком. Не важно, сколько людей и кто именно привлекается к сверхурочной работе, существует ряд основных правил, которых необходимо придерживаться.</p><p>• <emphasis>Определите продолжительность сверхурочных работ</emphasis></p><p>Необходимо чётко определить продолжительность периода сверхурочной работы — он не может быть открытым или неопределённым. Следует поставить конечную задачу: уложиться в заданный срок или достичь определённого конечного результата;</p><p>• <emphasis>Создайте комфорт</emphasis></p><p>Сверхурочная работа должна доставлять удовольствие. Обязательно предлагайте питание работающим во время обеденного перерыва, а также тем, кто задерживается на работе допоздна. Следите за тем, чтобы работники могли взять из дома всё необходимое для работы. Организуйте максимально комфортабельную рабочую среду для тех, кто не может работать дома, а также организуйте для них беспрепятственный вход и выход из офиса по окончании обычного рабочего дня. Следует подумать об организации дополнительного обслуживания, например, привлечения посыльных для разных поручений или возможности сдать вещи в химчистку, чтобы помочь сотрудникам сохранить силы и сосредоточиться на работе.</p><p>• <emphasis>Поддерживайте боевой дух</emphasis></p><p>Когда от группы требуется самоотдача, проследите, чтобы все её участники работали сообща: все остаются, все помогают и вносят свой вклад. Если не нужно писать новый код, займите людей тестированием. Если нечего тестировать, бросьте всех на редактирование документации. Общая преданность делу и общая ответственность теснее сплотит группу и способствует развитию духа товарищества.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>В начале истории компании NuMega нам нередко приходилось работать сверхурочно. Мы часто работали по ночам и в выходные. Чтобы скрасить это время, дочь одного из сотрудников взялась готовить для нас. Она как раз училась стряпать и хотела попрактиковаться на нас. К счастью, у неё был талант и ей помогала мама. Конечно, свою пиццу мы получали тоже, но приготовленные ею обеды помогали нарушить однообразие.</emphasis></p><p><emphasis>Когда работы было особенно много, как правило, все работали сверхурочно, оставаясь после работы. Это было весёлое время, и часто сверхурочные часы превращались в вечеринку. Хотя людям приходилось жертвовать собственным временем и допоздна задерживаться на работе, все знали, для чего это делается, и верили, что наша работа важна для успеха общего дела. Когда работа была закончена, мы решили пригласить на празднование нового выпуска своих родственников. Мы понимали, какие неудобства сверхурочная работа доставила нашим семьям, и хотели как-то отблагодарить их за проявленное терпение.</emphasis></p><empty-line/><p>• <emphasis>Информируйте о прогрессе</emphasis></p><p>Если людям приходится много работать сверхурочно, они обязательно должны знать, что именно они являются двигателем проекта. Как менеджер проекта или ведущий специалист, вы должны показать команде, что их усилия оправдываются.</p><p>• <emphasis>Благодарите за труд</emphasis></p><p>Это можно делать на собраниях или при личных встречах с отличившимися. Подумайте о специальных футболках, подарках и других наградах за особые заслуги. Непременно позаботьтесь, чтобы все работающие сверхурочно ощущали признательность за свой труд. Не забывайте и об их семьях. Все это отражается в первую очередь на них, и следует найти способ отблагодарить членов семей сотрудников за их жертвы.</p></section><section><title><p>Общие проблемы и решения</p></title><p>Далее обсуждается ряд типичных проблем и вопросов, возникающих при использовании описываемых здесь методик, а также их решения.</p><subtitle>Вы уверены, что завершили эту работу?</subtitle><p>Вас никогда не спрашивали на контрольном собрании: «Вы уже закончили работу над Х?» На самом деле это очень расплывчатый вопрос, однозначный ответ на который дать очень трудно. Означает ли это, что код написан и его можно скомпилировать? Или реализованная функция нормально работала пару раз, когда вы пытались использовать её? А, может быть, выполнено блочное тестирование программы на всех поддерживаемых платформах и конфигурациях? А что это означает для тестировщиков из соседнего отдела? Обязательно заведите для себя определение «законченной» работы, и ознакомьте с ним всех, иначе вы запросто обнаружите людей, в поте лица работающих над тем, что вы «закончили» несколько недель назад.</p><empty-line/><subtitle>Борьба с нехваткой оборудования</subtitle><p>Один из главных грехов фазы исполнения проекта — задержка работы из-за «нехватки оборудования». Если разработчику понадобится более ёмкий жёсткий диск, техническому писателю — новая мышь, а тестировщику — программа для мониторинга, следует доставить их немедленно. Никакие мелочи и пустяки не должны задерживать работу над проектами или снижать эффективность команды. Менеджер проекта должен неусыпно заботиться о личных нуждах, проблемах и потребностях каждого члена группы.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>В преддверии выпуска последней бета-версии одного из продуктов NuMega нам приходилось работать все ночи и выходные напролёт. К сожалению, нельзя сказать, что наш сервер был с нами солидарен: в течение дня он постоянно зависал без видимых причин, останавливая при этом всю сеть. В результате мы не могли проводить сдачу разработанных фрагментов ПО и делать контрольные сборки, что просто убивало нашу производительность.</emphasis></p><p><emphasis>Проблемы продолжались в течение двух недель — чтобы избавиться от них, мы перепробовали все возможные средства. Наконец, мы подумали, что сервер перегревается, так как он стоял в старом помещении в самом центре здания (мы ведь только начинали!). Возможно, там плохая вентиляция, думали мы. На следующий день мы купили большой вентилятор на стойке и пару дней обдували им сервер, но — увы! — он продолжал виснуть.</emphasis></p><p><emphasis>Наконец мы поумнели настолько, что просто купили новый сервер. Если бы мы догадались поменять его в первые два дня, то смогли бы сэкономить три недели работы, времени и усилий.</emphasis></p><empty-line/><subtitle>Навёрстывайте упущенное</subtitle><p>Хотя мало кто будет спорить с тем, что выдерживать внутренние сроки очень важно, они не помогут составить план действий при угрозе срыва конечной даты. Если что-то пошло не так, нужно внести коррективы, чтобы вернуть проект на намеченный путь. Это ещё одна ситуация, когда менеджер проекта зарабатывает свой хлеб. Непременно контролируйте ход проекта по внутренним контрольным точкам, а если при исполнении промежуточных этапов не удаётся уложиться в срок, предпринимайте соответствующие действия.</p><subtitle>Миритесь с недостатками своих сотрудников</subtitle><p>Человек несовершенен. Не исключено, что придётся столкнуться с людьми, которые не желают верить в существование проблем или дают рекомендации на основе неполной информации. Спесь, как и застенчивость, утомление, истощение сил или личные проблемы могут стать причиной разных трудностей. Поддерживая работу над проектом в нужном русле, приходится иметь дело не только с технологиями, но и с человеческими недостатками. Изучите сильные и слабые черты характера каждого участника группы и обязательно руководствуйтесь этими сведениями, принимая решения.</p></section></section><section><title><p>Глава 13</p><p>Бета-тестирование</p></title><section><p>Бета-тестирование — это процесс проверки ПО внешними силами. В начале программы бета-тестирования новое ПО рассылается реальным или потенциальным заказчикам (бета-тестерам) для изучения, оценки и предоставления отзыва о его работе. Задача — получить от бета-тестеров объективную оценку возможностей и качества ПО.</p><p>Бета-тестирование позволяет получить ценные сведения о готовности ПО, прежде чем оно попадает к заказчикам. Программы бета-тестирования являются решающим фактором успеха в начале развития компаний, когда объём ресурсов, выделенных под проекты, ограничен. Бета-тестирование, как никакой другой способ, позволяет эффективно организовать тестирование программы. Оно не только расширяет возможности группы разработчиков в сфере контроля качества, но и обеспечивает поступление из внешнего мира объективных и достоверных отзывов о возможностях вашего ПО.</p><p>С другой стороны, плохо проведённое бета-тестирование означает, что не только разработчики, но и бета-тестеры лишь зря потратили на него своё время. В этой главе мы обсудим ключевые аспекты проведения хорошей программы бета-тестирования и способы улучшения программных продуктов с помощью бета-тестирования.</p></section><section><title><p>Ценность бета-тестирования</p></title><p>Прежде чем говорить о способах проведения хорошего бета-тестирования, обсудим, в чём вообще его польза. Не понимая ценности бета-тестирования или не веря в её существование, вы никогда не выделите достаточно времени и средств, чтобы провести его на должном уровне. Вот самые значительные аспекты пользы от бета-тестирования:</p><p>• <emphasis>Проверка ПО в условиях реального мира</emphasis></p><p>Независимо от того, насколько хорошо проведено внутреннее тестирование, воспроизвести в полном объёме все испытания, проводимые многочисленными бета-тестерами, было бы чрезвычайно сложно (если такая задача вообще выполнима). Если вы не ошиблись с подбором бета-тестеров, они помогут проверить работу новой программы на широком спектре вычислительных платформ и в самых разных ситуациях, все разнообразие которых вы скорее всего никогда не смогли бы охватить. Поскольку бета-тестирование выполняется реальными пользователями в реальных условиях, они часто обнаруживают такие ошибки, которые никогда бы не были найдены без их помощи.</p><p>Хорошие бета-тестеры позволяют проверить готовность ПО к использованию прежде, чем оно будет отправлено заказчику. Эта информация сама по себе уже стоит усилий, затраченных на проведение бета-тестирования;</p><p>• <emphasis>Оценка работы ПО</emphasis></p><p>Второй аспект пользы бета-тестирования — это получение отзывов о качестве функций, о производительности и о качестве пользовательского интерфейса ПО. Поскольку бета-тестеры работают с программой в самых разных условиях, они лучше всего смогут обеспечить вас информацией о пользовательских потребностях, симпатиях и антипатиях. Кроме того, они подскажут вам массу новых идей. Хотя на данном этапе вносить существенные изменения в программу не желательно, эти идеи послужат превосходной отправной точкой для работы над следующим выпуском;</p><p>• <emphasis>Помощь в маркетинге</emphasis></p><p>Бета-тестирование позволяет сделать программу более заметной на рынке и повысить доверие к ней, что будет вовсе не лишним для маркетинговой политики нового продукта. Бета-тестеры, получившие положительное впечатление от работы с новой программой, — отличный источник материалов для пресс-релизов и рекламных каталогов. Они также пропагандируют вашу программу в данной отрасли, поскольку склонны обсуждать, рекомендовать и высказываться за использование программы как в своих фирмах, так и публично. Бета-тестеры также распространяют слухи о новой программе, что особенно ценно для её презентации и при выходе на рынок.</p><p>Однако от плохо организованной программы бета-тестирования вряд ли стоит ожидать помощи в маркетинге и раскрутке новой программы. Нужно тесно взаимодействовать с бета-тестерами, идти навстречу их нуждам и оказывать им всестороннюю поддержку. Кроме того, необходимо дать бета-тестерам почувствовать, что вместе с разработчиками они являются единой командой. Чем больше усилий вложено в бета-тестирование, тем больше шансов получить от него пользу.</p><p>• <emphasis>Дополнительная рабочая сила</emphasis></p><p>Один из главных аспектов бета-тестирования — возможность увеличить число работающих над проектом. При реализации как начальных, так и крупномасштабных проектов, программы бета-тестирования обеспечивают изрядное количество дополнительной рабочей силы, которая обошлась бы в сотни тысяч или даже миллионы долларов при найме по контракту или иным способом. В следующий раз, когда вы задумаетесь над вопросом, нужна ли вам программа бета-тестирования, проведите нехитрый расчёт. Умножьте число бета-тестеров на время, которое тратит каждый из них на испытания ПО, умножьте результат на размер почасовой оплаты труда наёмных тестировщиков и получите денежное выражение ценности бета-тестирования.</p></section><section><title><p>Самая распространённая ошибка при проведении бета-тестирования</p></title><p>В том, что результаты бета-тестирования становятся определяющими при формулировании основных требований к программе. Не следует использовать программу бета-тестирования для поиска функций, которые должны быть реализованы в программе, чтобы обеспечить её успех. Так подбирать функции уже слишком поздно, их нужно было определить на этапе формулирования требований и коммерческого анализа программы (см. главу 9). Если стало ясно, что программа обречена на провал на рынке, не старайтесь впихнуть новые функции в продукт, который вот-вот будет закончен. Возьмите тайм-аут и обсудите возможные альтернативы: может, лучше начать всё с самого начала, составив новый набор требований и план?</p><p>Помните: цель программы бета-тестирования — испытание и усовершенствование продукта, поиск идей на будущее и помощь в продвижении продукта на рынке. Во время работы с бета-версией идёт сбор отзывов о реализации функций, возможных улучшениях, практичности и качестве программы. Кое-что из этого ещё можно изменить, но для добавления новых сложных функций этот период совершенно не годится.</p></section><section><title><p>Типы программ бета-тестирования</p></title><p>Программа бета-тестирования обычно состоит из нескольких фаз. Каждая последующая фаза включает в себя все большую группу пользователей, и результатом её является все более сложный и стабильный продукт. Несмотря на отсутствие формального определения фаз программы бета-тестирования, принятого в отрасли, приведённое ниже описание поможет составить общее представление о каждой фазе.</p><p>• <emphasis>Фаза 1</emphasis></p><p>К началу этой фазы должно быть написано 60-80% кода. Задача этой фазы — как можно скорее передать основные функции программы для испытаний лучшим бета-тестерам.</p><p>Допустим, первую фазу решено начать уже после завершения основных функции. В программе пока нет поддержки печати, реализована лишь малая часть справочной системы, нет сложных алгоритмов сортировки, фильтрации и функций пользовательского интерфейса. Однако продукт уже пригоден для работы, и отзывы окажут существенную помощь при тестировании и доводке его функций.</p><p>На этом этапе ещё есть время для внесения небольших, но важных изменений. Это вполне обычная практика, в ней нет ничего неожиданного. Необходим подходящий момент для улучшения ПО на основе отзывов клиентов и углублённого понимания продукта. Однако нужно быть уверенным, что изменения не нарушат плана и не снизят качества продукта. Если такой уверенности нет, подумайте, перевесит ли выгода от реализации новых функций затраты на расширение плана.</p><p>• <emphasis>Фаза 2</emphasis></p><p>К началу второй фазы код продукта готов на 100%. Все функции, которые намечено реализовать в окончательном выпуске продукта, запрограммированы и работают. Хотя существенно менять какие-либо функции не планируется, некоторые изменения всё же можно внести, если они действительно важны и не влекут за собой серьёзного риска. В этом случае тоже необходима уверенность в отсутствии негативного влияния изменений на исполнение плана проекта или качество продукта.</p><p>• <emphasis>Фаза 3</emphasis></p><p>В начале этой фазы функции продукта приобретают окончательный вид. Изменений возможностей программы или набора её функций не планируется. Согласно плану, внешний вид программы получит здесь окончательную форму, никаких важных изменений пользовательского интерфейса не ожидается. Набор функций блокируется, и группа концентрируется на повышении качества, производительности и «шлифовке», необходимой для успеха хорошей программы. На этом этапе задачей всей группы является подготовка продукта к коммерческому использованию путём тестирования, исправления ошибок и приведения документации к окончательному виду.</p><p>• <emphasis>Маркетинговое бета-тестирование</emphasis></p><p>Это особый тип программы бета-тестирования, в рамках которой потенциальные клиенты получают ПО, чтобы оценить, насколько оно соответствует их потребностям. Маркетинговое бета-тестирование особенно важно, когда новая программа даст клиентам существенные, потенциально революционные возможности, а также в случае продукта, имеющего большое значение для роста продаж компании. В таких ситуациях имеет смысл продемонстрировать клиентам успехи при создании продукта и спектр возможностей, которые они получат после его завершения.</p><p>Поскольку важно произвести положительное впечатление на клиентов, не спровоцировав у них необоснованных ожиданий, лучше использовать для маркетингового бета-тестирования одну из поздних бета-версий продукта (вторую или третью). Таким образом, можно быть уверенным, что клиенты увидят высококачественное и технически совершенное ПО.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Когда работа в NuMega вступала взавершающие фазы бета-тестирования, мы всегда рассылали копии тем, кто «делает погоду» в отрасли. В этот список входили наши партнёры, основные производители, специализированные издания и аналитические службы, занятые в отрасли. Прежде всего мы хотели, чтобы ПО было свободно доступно каждому, кто может способствовать нашему успеху. Это было маркетинговое бета-тестирование в полном смысле этого слова, так как мы не ждали (и даже не хотели!) извещений о каких-либо ошибках или затруднениях, Этот очень эффективный способ позволил донести наше имя и нашу продукцию до людей, способных к содействию в нашем деле.</emphasis></p><empty-line/></section><section><title><p>Элементы программы бета-тестирования</p></title><p>Мы проанализируем ключевые элементы бета-тестирования и рассмотрим, что необходимо сделать для максимального повышения эффективности этого процесса в группе.</p><subtitle>Начало программы бета-тестирования</subtitle><p>Прежде чем приступать к набору первых бета-тестеров, надо решить ряд простых, но важных вопросов.</p><p>• <emphasis>Каковы основные черты вашего бета-тестера?</emphasis></p><p>Определите профиль потенциального пользователя вашей программы. Какими навыками он должен обладать, какой опыт работы с подобными продуктами в данной отрасли ему нужен? Какие технологии, конфигурации и платформы должны быть ему доступны? Сколько времени и усилий потребуется от бета-тестеров на испытание программы?</p><p>• <emphasis>В чём основная цель программы бета-тестирования?</emphasis></p><p>Независимо от того, начинаются ли испытания основного или неосновного выпуска ПО, нужно, чтобы люди сосредоточились на испытании ключевых функций программы, находящихся в разработке. Принципы работы этих функций должны быть ясны всем бета-тестерам, чтобы они смогли лучше проанализировать и оценить ПО.</p><p>• <emphasis>Сколько бета-тестеров потребуется?</emphasis></p><p>Количество бета-тестеров критично для эффективности программы бета-тестирования. Если их слишком мало, то и информации будет собрано немного, а если их число чересчур велико, то можно не справиться с администрированием, управлением и поддержкой всех пользователей, что вызовет у бета-тестеров ощущение беспомощности и приведёт к потере важной информации. Как правило, лучше привлекать на 30% больше бета-тестеров, чем по расчётам понадобится для испытания программы. Это позволяет подстраховаться от неизбежных накладок, возникающих, когда бета-тестеры неэффективно работают или вообще прекращают тестирование.</p><p>Обычно в первой фазе бета-тестирования задействовано меньше всего тестеров, так как продукт ещё не вполне готов для всесторонней оценки. К участию в первой фазе следует привлекать таких бета-тестеров, которые смогут справиться с проблемами и трудностями, а также помогут при отладке и диагностике ошибок. Однако во время третьей фазы к испытаниям программы должны присоединится все привлечённые для участия бета-тестеры.</p><p>• <emphasis>Каковы сроки программ бета-тестирования?</emphasis></p><p>Продолжительность программы бета-тестирования также имеет решающее значение для её эффективности. Хотя бета-тестирование, как правило, стремятся максимально сократить (чтобы быстрее отправить продукт заказчику), не следует урезать её настолько, чтобы лишиться преимуществ, которые она даёт.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Поскольку в NuMega работают компетентные специалисты по технической поддержке и администратор бета-тестирования, мы могли проводить довольно большую программу бета-тестирования, приглашая до 200 бета-тестеров, которые помогали охватить широкий спектр приложений и платформ при испытаниях ПО. К тому же такое большое число участников бета-тестирования позволяло подстраховаться на случай отказа от участия или выхода из программы части бета-тестеров. Бета-тестеры играют очень важную роль в обеспечении качества выпускаемой нами продукции. Нам никогда бы не удалось воспроизвести все разнообразие окружений и конфигураций, используемых бета-тестерами, внутри компании, поэтому наша признательность бета-тестерам безгранична.</emphasis></p><p><emphasis>Продолжительность программы бета-тестирования зависит от вашей специализации, занимаемой на рынке ниши и сложности ПО. Потому не существует правил, применимых к любому случаю. Тем не менее мы обнаружили, что месяца более чем достаточно для проведения любой фазы бета-тестирования (в общей сложности вся программа занимает 3 месяца). За месяц бета-тестеры успевали поработать с продуктом и дать отзыв о нём. Первая фаза бета-тестирования особенно ценна тем, что позволяет вести испытания программы в параллели с разработкой. Вторая и третья фазы, посвящённые небольшим изменениям и исправлению ошибок, играют важную роль в повышении качества продукта по мере приближения срока начала поставок. Поскольку, начиная со второй фазы, набор функций программы был «заморожен», оставалось целых два месяца на повышение качества, производительности и «шлифовку» программы.</emphasis></p></section><section><title><p>Набор бета-тестеров</p></title><p>Первым этапом любой программы бета-тестирования является поиск и привлечение бета-тестеров. Один из самых важных критериев для набора бета-тестеров — наличие у них личной заинтересованности в использовании и успехе ПО. При отборе наилучших бета-тестеров надо уделить особое внимание их мотивации. Вот наилучшие источники бета-тестеров:</p><p>• <emphasis>Потребители (внешние заинтересованные лица, внутренние конечные пользователи) </emphasis></p><p>Чаще всего именно потребители больше всех заинтересованы в разработке нового продукта и поэтому могут стать прекрасными бета-тестерами. У них имеется законное желание наблюдать за разработкой продукта в соответствии с их потребностями и в их собственном окружении. Даже в отсутствие настоящих клиентов у вас наверняка найдётся несколько потенциальных клиентов, серьёзно заинтересованных в создаваемом вами ПО.</p><p>• <emphasis>Персонал технической поддержки</emphasis></p><p>Другой замечательный источник бета-тестеров — группа технической поддержки. Клиенты часто звонят в службу технической поддержки, чтобы пожаловаться на ошибки или спросить, как работает та или иная функция программы. Если в бета-версии программы проблемы клиента будут решены (путём исправления ошибки или облегчения работы с программой), он также может быть заинтересован в том, чтобы стать бета-тестером программы.</p><p>• <emphasis>Посетители Web-узла компании </emphasis>Как правило, посетители корпоративного Web-узла интересуются продуктами компании, поэтому им также может быть интересно поучаствовать в бета-тестировании. Обязательно дайте эту возможность потенциальным пользователям, зарегистрировавшимся через Web. Этот способ позволяет существенно расширить штат бета-тестеров, однако надо убедиться в наличии у них достаточной для этого квалификации.</p><p>• <emphasis>Партнёры и союзники</emphasis></p><p>Партнёры и поставщики компании также могут стать отличными бета-тестерами. При наличии деловых или технических связей с другими компаниями попробуйте привлечь их к бета-тестированию продукта. Взаимный интерес может быть достаточно велик, чтобы протестировать совместную работу продуктов.</p><p>Необходимо составить профили бета-тестеров, которых хотелось бы привлечь к участию в программе бета-тестирования. Например, желательно, чтобы часть бета-тестеров пользовалась локализованными версиями Microsoft Windows для тестирования продукта, предназначенного для японского, корейского и китайского рынков, а другая часть бета-тестеров работала на многопроцессорных системах. Не важно, какова формулировка задач, главное, чтобы при распределении их между бета-тестерами последние обеспечивали доскональную проверку ПО в соответствии с требованиями программы бета-тестирования.</p><p>Кроме того, перед получением ПО каждый бета-тестер должен подписать соглашение о неразглашении коммерческой тайны. Это соглашение поможет обеспечить конфиденциальность ПО и свести к минимуму потенциальную утечку информации к конкурентам.</p><subtitle>Взаимодействие с бета-тестерами</subtitle><p>Регулярный обмен с бета-тестерами достоверной и правдивой информацией имеет решающее значение для успеха программы бета-тестирования. Нужно заранее определить все ожидания и обеспечить своевременное решение любых проблем, а также удовлетворение любых потенциальных потребностей и запросов. Вот основные правила.</p><p>• <emphasis>Определите ожидания</emphasis></p><p>Чётко обозначьте начало и конец бета-тестирования, проинформируйте бета-тестеров о новшествах в текущем выпуске ПО, заострив внимание на всех специфичных моментах, требующих проверки. Поставьте тестеров в известность о том, что желательно как можно скорее сообщать о найденных ошибках, а после завершении бета-тестирования — заполнить анкету. Дайте понять, что их отзывы представляют большую ценность и вы постараетесь как можно скорее устранить найденные неполадки.</p><p>• <emphasis>О серьёзных проблемах и найденных решениях должны знать все</emphasis></p><p>Если какая-то важная часть программы не работает, дайте бета-тестерам знать о возникшей проблеме и что над её решением уже работают. Для этой цели лучше всего подходит электронная почта. Однако если требуется более интерактивное обсуждение трудностей, проблем и потребностей, надо подумать об открытии на вашем Web-узле специализированной телеконференции.</p><p>• <emphasis>Решайте проблемы по мере их возникновения</emphasis></p><p>Бета-тестеры должны сообщать о своих трудностях и обнаруженных проблемах специализированному (и достаточно опытному) персоналу из группы поддержки. Если у вас пока нет группы поддержки, нужно выделить для работы с бета-тестерами одного из разработчиков. В любом случае нужно регистрировать возникшие затруднения и обнаруженные ошибки.</p><p>Также следует рассмотреть возможность создания или, если надо, покупки системы для обработки поступающих сообщений об ошибках, обнаруженных в бета-версии. Системы по обработке сообщений специально сконструированы для обработки обращений клиентов, желающих сообщить о возникших трудностях. Возможность следить за сообщениями, поступающими от бета-тестеров, регистрировать их адреса и контактную информацию, обстоятельства возникновения ошибки, частоту обращений и другие данные, а также взаимодействовать с группой технической поддержки представляет настоящую ценность. Эта задача превосходно решается с помощью систем обработки поступающих сообщений, в то время как большинство систем отслеживания ошибок с ней не справляется. Присланное пользователем сообщение об ошибке следует регистрировать в системе, только если оно достоверно и ошибка воспроизводится.</p><p>• <emphasis>Доводите решение проблемы до конца</emphasis></p><p>Как правило, лучше выделить специального разработчика, который в прямом контакте с бета-тестером доведёт решение найденных проблем до конца. Прямое взаимодействие ускоряет процесс разрешения проблем и способствует упрочению связей между бета-тестерами и группой разработчиков. Кроме того, это прекрасная возможность для технических специалистов поближе познакомиться с клиентами, их проблемами и их манерой работы с программой.</p><p>• <emphasis>Не закрывайте глаза на проблемы бета-тестеров</emphasis></p><p>Вам наверняка придётся столкнуться с проблемами, возникающими у бета-тестеров. Ваше ПО может повредить реестр их ОС, а программа удаления ПО может заодно стереть ключевые системные файлы. Обязательно проследите, чтобы под рукой всегда были нужные люди, способные разобраться с этими проблемами.</p><subtitle>Оценка прогресса бета-тестирования</subtitle><p>Чтобы облегчить начало программы бета-тестирования, бета-тестеры должны быстро получить и установить ПО. Это можно сделать, опубликовав ПО в Web или разослав его на CD-ROM. Если выбрать публикацию ПО в Web, можно отслеживать число скачиваний и сравнивать его с числом привлечённых бета-тестеров. С другой стороны, рассылка бета-версий на CD-ROM позволяет быть уверенным, что тестеры получат продукт целиком.</p><p>Когда ПО будет у каждого, проследите, чтобы все бета-тестеры работали с ним. В любом случае разумно обязать администратора бета-тестирования обзвонить или списаться по электронной почте с каждым бета-тестером, чтобы убедиться, что все они работают с ПО. Важно стимулировать усилия бета-тестеров и не дать им остановиться на полпути.</p><p>В начале поступления отзывов выделите самые распространённые трудности, с которыми пришлось столкнуться бета-тестерам. В частности, немедленного решения требуют проблемы, возникшие из-за ошибок при установке или из-за недостаточного качества, ставших причиной затруднений у значительной части бета-тестеров. Самыми подходящими кандидатами на эту роль являются администратор бета-тестирования и ведущий специалист технической поддержки, реагирующие на любые возникающие проблемы. Такие неполадки нужно устранить как можно скорее, иначе под угрозой окажется вся программа бета-тестирования и её польза для группы.</p><subtitle>Завершение программы бета-тестирования</subtitle><p>При свёртывании бега-тестирования обязательно попросите прислать сведения обо всех ошибках и трудностях, до сих пор оставшихся без внимания. Это также самое подходящее время, чтобы разослать бета-тестерам анкету, представляющую формальный план отзыва о работе продукта. С её помощью очень легко выяснить, насколько интенсивно и для каких целей использовался продукт, какие при этом возникли трудности и проблемы. Такая информация слишком часто остаётся в голове бета-тестера, а анкета — прекрасный способ выудить оттуда все ценные мысли и идеи, чтобы позже извлечь из них выгоду. Ниже приводятся примеры вопросов анкеты.</p><p>• Как долго использовался продукт?</p><p>• Удалось ли легко и быстро установить его?</p><p>• Помог ли продукт быстро решить ваши проблемы и достичь поставленных целей?</p><p>• Какая из функций программы оказалась самой полезной для вас?</p><p>• Какая из функций оказалась наименее полезной и почему?</p><p>• Какую из функций вам больше всего хотелось бы увидеть в следующем выпуске программы?</p><p>• Как можно было бы улучшить документацию или справочную систему ПО?</p><p>• Оправдала ли производительность продукта ваши ожидания?</p><p>• Собираетесь ли вы регулярно использовать продукт?</p><p>• Собираетесь ли вы стимулировать использование продукта в вашей группе? Почему?</p><p>• Порекомендовали бы вы его другим? Почему?</p><p>• Готов ли продукт? Если нет, то почему?</p><p>Обязательно поинтересуйтесь, нет ли у бета-тестеров комментариев для пресс-релизов. Оказалось, что авторами лучших отзывов о продуктах компании NuMega были именно участники бета-тестирования. Мы донесли эти отзывы до всех работников компании и клиентов и, конечно же, опубликовали.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>По окончании бета-тестирования мы в NuMega оцениваем эффективность каждого бета-тестера как высокую, среднюю или низкую. Лучшим бета-тестерам мы посылаем бесплатные программы, фирменные футболки и даже куртки. Средним достаётся только один подарок, а тех, кто не принимал заметного участия в тестировании, мы вовсе исключаем из программы. Со временем мы почувствовали, что можем положиться на наших бета-тестеров как в получении объективных отзывов, так и в испытании новых продуктов при работе над бета-версиями и кандидатами на выпуск.</emphasis></p><p><emphasis>Как-то раз мы выпускали бета-версию в пятницу около четырёх часов дня. Разослав бета-тестерам сообщения, мы уже готовились отправиться по домам, когда один из тестеров прислал ответ, где говорил, что отложил свидание лишь для того, чтобы увидеть наш новый выпуск! В тот же вечер он сообщил, что на первый взгляд новый выпуск неплох, но он ещё не успел полностью его изучить. Вот так порой сталкиваются преданность делу и личные дела!</emphasis></p><empty-line/><subtitle>Поощрение лучших бета-тестеров</subtitle><p>По завершении бета-тестирования важно проанализировать, что прошло хорошо, а что — нет. В рамках этого анализа нужно оценить работу самих бета-тестеров. Необходимо выделить и поощрить тех, кто вовремя предоставлял ценную информацию. Если какие-либо тестеры вообще не предоставили никакой информации, от их услуг лучше отказаться, чтобы освободить место для новых участников.</p></section><section><title><p>Менеджер бета-тестирования</p></title><p>Курирует бета-тестирование и управляет её исполнением. Поскольку программы бета-тестирования зачастую масштабны и сложны, эту работу должен выполнять штатный специалист. Это может показаться чересчур для такой работы, но с учётом ценности хорошо проведённого бета-тестирования, все затраты должны оправдаться с лихвой. В компетенцию менеджера бета-тестирования входит следующее:</p><p>• <emphasis>Определение целей и задач</emphasis></p><p>Менеджер бета-тестирования должен следить за тем, что для программы бета-тестирования определены цели, профиль клиента, масштаб и продолжительность.</p><p>• <emphasis>Набор бета-тестеров</emphasis></p><p>Менеджер бета-тестирования должен следить, чтобы к моменту выпуска бета-версии было набрано достаточно бета-тестеров, готовых принять участие в испытаниях программы. Очевидно, что любая задержка с набором достаточного числа бета-тестеров уменьшит объём и снизит качество получаемой информации.</p><p>• <emphasis>Распространение ПО</emphasis></p><p>Менеджер бета-тестирования составляет и реализует план распространения ПО среди бета-тестеров как через Интернет, так и на физических носителях. Он должен обеспечить быструю и эффективную передачу ПО каждому бета-тестеру. Если решено распространять программы через сеть, надо убедиться в наличии линий связи и серверов, необходимых для поддержки большого числа одновременных обращений бета-тестеров. Если для распространения ПО выбран физический носитель, необходимо обеспечить достаточные производственные мощности для своевременного распространения ПО.</p><p>• <emphasis>Распространение сведений о состоянии бета-тестирования</emphasis></p><p>Менеджер является информационным центром, снабжающим всех бета-тестеров сведениями о состоянии программы бета-тестирования. В частности, он объявляет начало и конец бета-тестирования, а также сообщает о новом доступном ПО. Он также является связующим звеном между бета-тестерами и группой создателей продукта, обеспечивая обмен важными сведениями, включая изменения в плане программы бета-тестирования, появление обновлений ПО, исправлений критических ошибок и передачу специальных запросов на отзывы.</p><p>• <emphasis>Управление результатами бета-тестирования</emphasis></p><p>От менеджера во многом зависит успех программы бета-тестирования. Почти сразу после её начала он должен обзвонить бета-тестеров, чтобы проверить, получили ли они ПО и, если да, начали ли работать с ним. Менеджер бета-тестирования должен следить за успехами каждого бета-тестера и обязательно стимулировать отстающих, чтобы они установили ПО и приступили к работе.</p><p>• <emphasis>Завершение программы бета-тестирования</emphasis></p><p>Менеджер должен так провести свёртывание бета-тестирования, чтобы не разочаровать тестеров, ещё не закончивших работу с продуктом. Менеджер запрашивает у тестеров их окончательные идеи, комментарии и сообщения об ошибках, а также обеспечивает их своевременное получение.</p><p>• <emphasis>Поощрение бета-тестеров</emphasis></p><p>Бета-тестеры — чрезвычайно ценные участники проекта. Хороших тестеров необходимо поощрять, плохих — исключать из программы.</p></section><section><title><p>Общие проблемы и решения</p></title><p>Далее обсуждается ряд типичных проблем и вопросов, возникающих при использовании описываемых здесь методик, а также их решения.</p><subtitle>Начинайте пораньше</subtitle><p>Набор бета-тестеров требует времени, как и подписание соглашения о неразглашении коммерческой тайны. Набор непременно нужно начинать задолго до готовности бета-версии программы. Для программы, в которой участвует 200 бета-тестеров, я рекомендую оставлять 60-90 дней.</p><p>Не забывайте, что бета-тестеры заняты своими делами не меньше вас и могут приступить к оценке ПО с опозданием. В общем случае эту проблему можно решить тремя способами. Во-первых, если продукт сложен и для его установки нужны значительные ресурсы, можно послать к бета-тестерам своих людей, чтобы они помогли установить и запустить ПО для тестирования. Во-вторых, можно предположить, что до трети бета-тестеров не смогут начать тестирование вовремя или вообще откажутся от него. Поэтому следует включить в программу дополнительных бета-тестеров, чтобы компенсировать их возможный недостаток и не допустить задержки. В-третьих, следует непременно связываться с каждым бета-тестером лично (если можно, по телефону), чтобы следить за их успехами в начале проекта и составить представление об их возможности участвовать в программе бета-тестирования.</p><subtitle>Бета-версии должны быть проверены</subtitle><p>Как я говорил в главе 1, выпуск каждой бета-версии знаменует завершение крупного промежуточного этапа в работе над проектом. Таким образом, прежде чем рассылать бета-версию бета-тестерам, нужно завершить период стабилизации и интеграции. Этот период (обычно 1-2 недели) используется для тестирования, исправления ошибок и решения серьёзных проблем. Качество ПО должно быть достаточным для работы на местах бета-тестирования. До выпуска продукта во внешний мир надо подумать о проведении внутренних испытаний, о которых пойдёт речь в главе 14. Бета-версия — это ещё не окончательная версия ПО, однако изложенные в этой главе концепции помогут извлечь пользу даже из неё.</p><subtitle>Необходима мощная инфраструктура</subtitle><p>Для нормального проведения бета-тестирования нужна подходящая программная и аппаратная инфраструктура. Скажем, для управления поступающей от бета-тестеров информацией, статусом соглашений о неразглашении коммерческой тайны, оценки работы бета-тестеров скорее всего потребуется специальная программа. Нельзя недооценивать объём информации, с которым придётся работать.</p><subtitle>Как справиться с потоком информации</subtitle><p>Самой большую пользу от бета-тестирования представляет информация, которую оно позволяет получить. Процедуры передачи, обработки и продвижения информации должны быть чёткими и понятными. Для поддержки бета-тестирования обязательно нужны компетентные и хорошо обученные специалисты. Также необходимо оставаться в контакте с бета-тестерами в течение всего процесса бета-тестирования.</p><subtitle>Не жалейте времени</subtitle><p>Для бета-тестирования должно быть выделено достаточно времени. Начав его в понедельник, не надейтесь закончить его в пятницу, если рассчитываете на хорошие результаты.</p><subtitle>Собирайте отзывы</subtitle><p>Как я уже говорил, ценность программы бета-тестирования определяется числом отзывов, которые она помогает собрать. Если отзывов слишком мало, нужно собрать их. Звоните и спрашивайте, установили ли тестеры программу и успешно ли они с ней работают. Пишите по электронной почте, чтобы убедиться, что у всех бета-тестеров всё идёт нормально. Анкеты также помогают собрать сведения, позволяющие решать проблемы и следить, чтобы реализация проекта шла по намеченному пути.</p></section></section><section><title><p>Глава 14</p><p>Кандидат на выпуск</p></title><section><p>Вот и исправлена последняя ошибка — всё готово к окончательной сборке ПО, которая станет «кандидатом на выпуск, (relise candidate, RC). Хочется думать, что на этом этапе неприятностей уж точно не случится, однако вероятность возникновения серьёзных проблем все ещё велика. В конце концов, после выпуска с вашим ПО будут работать сотни, тысячи и даже миллионы пользователей. Можно ли быть заранее уверенным в готовности продукта? Как знать наверняка, что последний набор изменений не привёл к существенному падению производительности или что функцию, протестированную на прошлой неделе, не нарушили вчера или позавчера? Нельзя просто сидеть и надеяться, что всё идёт хорошо. Отзыв ПО из производства или из сети после того, как было публично объявлено о его выходе, чреват не только большими убытками, но и потерей репутации компании.</p><p>При работе над кандидатом на выпуск проводится систематическая и объективная проверка окончательной сборки программного продукта, чтобы выяснить, готова ли она к выходу. В этой главе будут раскрыты базовые принципы организации работы над кандидатами на выпуск, преследующей цель подготовки ПО к выходу во внешний мир.</p></section><section><title><p>Начальные требования</p></title><p>К началу тестирования кандидата на выпуск все работы над продуктом (кроме собственно испытаний кандидата) должны быть закончены. Несмотря на это простое требование, всегда есть сильное искушение найти ещё несколько ошибок или внести изменения в программу и её документацию. Начав работу над кандидатом на выпуск, следует вести очень строгий контроль любых изменений. Не обманывайте себя, думая, что всё готово, когда на самом деле все наоборот. Чтобы внести ясность в этот вопрос, пройдёмся по основным требованиям, предъявляемым к кандидатам.</p><p>• <emphasis>Готовы все функции программы</emphasis></p><p>Все без исключения функции должны быть завершены на 100%. Участники команды должны быть уверены, что цель разработки ПО достигнута и в случае успешного завершения тестирования в ПО больше не планируется вносить никаких изменений.</p><p>• <emphasis>Справочные материалы приведены в окончательный вид</emphasis></p><p>Команда полностью завершила работу над справочной системой программы, электронной документацией, информационными файлами и электронными учебниками. Материалы проанализированы, выверены и полностью закончены. Можно дать ещё неделю на завершение подготовки печатной документации, но электронная документация, которая будет поставляться с ПО, должна быть готова.</p><p>• <emphasis>Завершена последняя проверка пользовательского интерфейса</emphasis></p><p>Группа уже закончила оценку и доводку пользовательского интерфейса, так что интерфейс останется неизменным вплоть до отправки продукта заказчику;</p><p>• <emphasis>Закончено тестирование программы</emphasis></p><p>Группа выполнила план тестирования в полном объёме: проведено блочное, системное, нагрузочное тестирование, тестирование производительности и испытание пользовательского интерфейса, а также автоматизированное тестирование. Все тесты пройдены, по крайней мере, известны все неполадки и решено поставлять продукт, не устраняя их.</p><p>• <emphasis>Все ошибки исправлены</emphasis></p><p>Все ошибки, которые планировалось исправить, уже исправлены. Что касается остальных ошибок, то, проанализировав все сообщения о неисправленных ошибках, группа пришла к выводу, что они не могут или не должны быть исправлены в этом выпуске ПО.</p></section><section><title><p>Тестирование кандидата на выпуск</p></title><p>Фактически кандидат на выпуск и есть та версия ПО, которая будет отправлена заказчику, если последний цикл тёстирования не выявит серьёзных проблем. Даже если время ограничено, всё равно нужно протестировать ключевые функции ПО на его окончательной сборке, а это значит, что тестирование придётся вести очень напористо. Рассмотрим основные процедуры тестирования кандидатов на выпуск.</p><subtitle>Создание окончательной сборки</subtitle><p>Обеспечив соответствие программы начальным требованиям к кандидатам на выпуск, можно приступать к созданию окончательной сборки ПО. На этом этапе необходимо:</p><p>• остановить все изменения в системе управления версиями и заблокировать систему управления исходным текстом;</p><p>• создать одну полную сборку программы на основе окончательной версии исходного текста (с использованием оптимизации при компиляции);</p><p>• прекратить создание новых сборок — с этого дня ежедневная сборка ПО отменяется;</p><p>• пометить нужные файлы в системе управления исходным текстом;</p><p>• уведомить всех участников команды о том, что кандидат на выпуск готов!</p><subtitle>Автоматизированное и ручное тестирование</subtitle><p>Одной из трудностей в работе с кандидатами на выпуск является отбор функций, которые должны быть испытаны в окончательной сборке. Помните: полностью протестировать весь продукт ещё раз не получится, так как на это уйдет несколько месяцев (а то и лет). Вместо этого нужно составить конкретный и чётко сформулированный план тестирования кандидата на выпуск, который можно будет выполнить в очень сжатые сроки. При этом ваши вложения в автоматизацию тестирования воздадутся сторицей. Если в своё время тестирование ключевых функций продукта было автоматизировано, затруднений возникнуть не должно. Тестирование избранных функций кандидата на выпуск должно быть на 70-80 или даже на 90% автоматизировано, что позволяет максимально сократить период испытаний кандидата на выпуск. При отсутствии полной автоматизации потребуется дополнительное время на проведение тестирования вручную. Помимо исполнения набора автоматизированных тестов, при проведении ручных тестов следует сосредоточиться на:</p><p>• проверке установки и функций, связанных с лицензированием;</p><p>• тестировании базовой функциональности продукта, а именно:</p><p>— ключевых функций;</p><p>— основных элементов пользовательского интерфейса;</p><p>— важнейших ссылок в справочной системе;</p><p>— программ-примеров и электронных учебников;</p><p>• самых необходимых тестах производительности и нагрузочном тестировании;</p><p>• других специфичных для данного проекта функциях, которые требуется протестировать.</p><p>Все эти тесты нужно проводить внутри группы. Однако, поскольку скоро ПО будет отправлено заказчикам, надо создать небольшую группу из тщательно отобранных бета-тестеров. Они смогут оценить пригодность программы для коммерческого использования. С помощью такого рода внешней проверки можно получить объективные данные о готовности ПО к выпуску. В последние дни работы над любой программой на плечи ведущих участников программы ложится огромная нагрузка, и сведения из внешнего мира могут дать им непредвзятую оценку ПО, необходимую для принятия правильных решений. В конце концов, если до отправки ПО заказчику ни один из десятка пользователей не смог добиться успеха в работе с программой, как можно ожидать, что у сотен и тысяч других пользователей, которые получат программу, всё получится?</p><p>Отбор части лучших клиентов для участия в испытаниях кандидата на выпуск находится в компетенции администратора бета-тестирования. Хорошие тестировщики должны согласиться поработать с ПО в реальных ситуациях, быть способными уложиться в сроки плана работы с кандидатом и предоставить информацию о неполадках в случае их возникновения. Во время работы над кандидатом на выпуск нужно практически ежедневно контактировать с тестировщиками, чтобы контролировать их работу и собирать как положительные, так и отрицательные отзывы. Поскольку с тестировщиками кандидатов на выпуск часто складываются даже более интенсивные взаимоотношения, чем с другими бета-тестерами, их обычно меньше, чем других бета-тестеров.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Для работы над кандидатами на выпуск в NuMega обычно приглашают только лучших бета-тестеров. По завершении внутренних тестов мы посылаем программу тестерам кандидатов на выпуск с просьбой вынести в течение 3-5 дней вердикт: готово ПО или нет. Администратор бета-тестирования остаётся на связи с тестерами: если возникают проблемы, тестеры получают приоритетную поддержку, часто прямо от разработчиков. Когда сильно поджимают сроки, отзывы клиентов могут быть как весьма обнадёживающими, так и очень тревожными. После начала поставок продукта мы часто дарим нашим тестерам его копию вместе с футболками разработчиков в благодарность за их труд.</emphasis></p><empty-line/><subtitle>Обеспечьте «мягкую посадку» проекта</subtitle><p>Возвращаясь к аналогии с самолётом (см. главу 12), можно сказать, что задача в том, чтобы в сжатые сроки постепенно вывести проект «на снижение» и плавно «посадить» его. Как и экипажу самолёта, вам нужен набор предопределённых процедур, направляющих действия при «посадке». Вот и пришла пора убрать столики и привести спинки кресел в вертикальное положение.</p><p>Поскольку работа над кандидатом на выпуск — критический период проекта, он требует открытого обмена точной информацией о состоянии проекта, отражающей как успехи, так и неудачи. В этот период необходимо оперативно принимать решения, чтобы устранять ключевые затруднения, исправлять ошибки, контролировать риск и выбирать между альтернативами. Чтобы справиться с этими задачами, нужно создать «штурмовую группу», состоящую из лидеров всех функциональных подразделений:</p><p>• разработчиков;</p><p>• тестировщиков;</p><p>• группы по обучению пользователей;</p><p>• группы инженерной психологии;</p><p>• технологов;</p><p>• технической поддержки;</p><p>• менеджера продукта;</p><p>• администратора бета-тестирования.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Пока в NuMega не начала работать «штурмовая группа», на завершающих стадиях работы над проектами всегда возникала куча проблем. Они были буквально везде: с мониторингом текущего состояния работы над программой, передачей сообщений о найденных ошибках, назначением ответственных за их устранение, координацией тестирования, контролем слухов, принятием решений и обменом информацией в группе. Когда численность групп возросла и от создания отдельных продуктов мы перешли к разработке пакетов программ, наши проблемы особенно обострились. Порой это напоминало шоу трёх простофиль<a type="note" l:href="#note1">1</a>. К счастью, мы всё же догадались создать «штурмовую группу», что позволило решать большинство проблем, преследовавших нас на завершающих стадиях проекта.</emphasis></p><empty-line/><p>Идея состоит в создании штабного помещения — единственного места, где можно ставить, анализировать и обсуждать проблемы. Антикризисные собрания должны проводится ежедневно в одной и той же комнате. Такой подход, использующий предварительное планирование, позволяет формализовать и упорядочить область ответственности каждого специалиста, докладывающего о состоянии дел в ней, а также о накопившихся проблемах. По мере проведения заключительных тестов и поступления клиентских отзывов извне, накапливается значительная информация, которую можно и нужно довести до сведения каждого члена группы. Даже когда проблемы и трудности отсутствуют, всё равно неплохо собраться всем вместе, чтобы разделить эту хорошую новость. Наконец, если требуется немедленно принять критически важное решение, можно просто созвать экстренное собрание «штурмовой группы».</p><subtitle>Если что-то идёт не так, стоит задуматься</subtitle><p>При проведении последних тестов служба поддержки, тестировщики, администратор бета-тестирования, инженеры да и любой участник группы могут обнаружить серьёзную проблему. Её следует рассмотреть на собрании «штурмовой группы», которая может предпринять следующие действия:</p><p>• <emphasis>Прояснить проблему</emphasis></p><p>Прежде всего надо убедиться в реальности проблемы, затем исследовать её природу и определить её значение для проекта: выяснить, воспроизводится ли она, а также какие и сколько платформ она затрагивает.</p><p>• <emphasis>Оценить затраты на исправление ошибок или внесение изменений</emphasis></p><p>Сначала нужно определить, можно ли устранить неполадку в принципе, а затем оценить масштаб и величину изменений, которые для этого придётся внести в программу.</p><p>• <emphasis>Решить, делать ли новую сборку программы</emphasis></p><p>Следует взвесить затраты на решение проблемы и сравнить их с ущербом, которая она нанесёт, если оставить её без решения. Достаточно ли серьёзна проблема, чтобы оправдать затраченное на её решение время, особенно если при этом задержится выпуск продукта?</p><p>Если решено создать новую сборку, следует назвать её с учётом схемы именования RC<emphasis>n</emphasis>+1, где <emphasis>n</emphasis> — номер версии последнего кандидата на выпуск. Проследите, чтобы номер сборки нового кандидата стал известен каждому.</p><p>• <emphasis>Выполнить повторный цикл тестирования кандидата на выпуск</emphasis></p><p>Если неполадка локальна, достаточно повторного тестирования лишь той части программы, что была изменена при её устранении. Однако повторное тестирование программы установки следует провести в любом случае.</p><p>Эти решения очень важны, и следует проследить, чтобы их принимали компетентные представители каждого из функциональных подразделений. Поскольку эти проблемы решаются на собраниях «штурмовой группы» с участием всех ключевых специалистов, можно быть уверенным в наличии достоверных данных, солидном опыте принимающих решение и в распространении сведений о принятых решениях от первого лица.</p><subtitle>Если всё в порядке, можно заканчивать</subtitle><p>Если тестирование кандидата на выпуск успешно прошло в полном объёме, его можно утвердить. Последнее утверждение продукта — во многом формальность, так как именно успешное окончание испытаний кандидата определяет момент, когда проект можно считать завершённым. Однако эта процедура гарантирует, что каждый внёсший свой вклад в создание проекта, будет готов поддержать проект и, если понадобится, отстаивать его. Проект должны утвердить следующие специалисты.</p><p>• <emphasis>Технические специалисты</emphasis></p><p>Все подразделения: разработчики, тестировщики, специалисты по обучению пользователей, инженерные психологи и технологи — должны единогласно утвердить проект. Это означает, что каждое подразделение внесло свой вклад в создание реального продукта и готово дать ему «зелёный свет». В рамках модели, принятой в NuMega, за готовность проекта в конечном счёте отвечает менеджер проекта, а сама готовность определяется по согласованию с командой. Технические специалисты первыми ставят свою подпись под проектом, без их визы проект дальше не пойдёт.</p><p>• <emphasis>Менеджеры продукта</emphasis></p><p>Если группа менеджеров утвердила проект, это означает, что качество реализации функций ПО позволяет выйти с ним на рынок. Планы лицензирования, формирования цены, обучения продавцов, производства дистрибутивов и сбыта также уже составлены, и можно приступать к их реализации.</p><p>• <emphasis>Группа технической поддержки</emphasis></p><p>Виза группы технической поддержки означает, что ни одна критическая проблема не осталась нерешённой и группа готова осуществлять поддержку продукта после выхода его на рынок.</p><p>• <emphasis>Заказчики</emphasis></p><p>Виза заказчиков означает, что продукт готов к использованию в их производственном или коммерческом окружении.</p><subtitle>Когда продукт готов, можно передать его заказчику</subtitle><p>После того, как все дали «зелёный свет» можно передавать проект заказчику и принимать поздравления с окончанием работы! Но прежде, чем считать проект завершённым, обязательно прочитайте следующую главу, «Закрытие проекта» (вот тогда проект действительно будет закрыт).</p></section><section><title><p>Общие проблемы и решения</p></title><p>Далее обсуждается ряд типичных проблем и вопросов, возникающих при использовании описываемых здесь методик, а также их решения.</p><subtitle>Отсутствие руководства</subtitle><p>Одна из наиболее распространённых проблем, мешающих плавно завершить проект, — нехватка руководства и дисциплины на завершающих стадиях. В этот период менеджер проекта отрабатывает свой оклад, поскольку должен быть кто-то один, ответственный за выпуск ПО. Обеспечить эффективную работу на завершающих этапах проекта нелегко. Возможно, придётся задержать группу в выходные, чтобы провести повторные тесты или отвергнуть последний набор действительно классных изменений из-за слишком высокого риска. Не ограничивайте себя в средствах. чтобы выполнить эту работу в лучшем виде.</p><subtitle>Обмен информацией</subtitle><p>Когда на группу обрушиваются все заботы, связанные с выходом ПО, обмен информацией между участниками группы часто нарушается, что провоцирует возникновение слухов и сомнительных разговоров. Обязательно нужно организовать управление работой над проектом вплоть до его закрытия, обмен информацией о его состоянии и решение любых проблем по мере их возникновения.</p><subtitle>Ответственность</subtitle><p>Поскольку в производстве ПО участвует много людей и постоянно приходится принимать решения, важно назначить ответственных в каждом подразделении, работающем над кандидатом на выпуск. Очень плохо, когда ответственность постоянно переходит от одних людей к другим. Нужны люди, которые могут отвечать за вверенные им команды и за принятые решения.</p><subtitle>План тестирования</subtitle><p>Необходим конкретный план тестирования кандидата на выпуск. Нельзя тестировать все подряд, на это просто не хватит времени. Нужно сосредоточиться на важнейших фрагментах. Однако у многих групп отсутствует чёткое представление о том, что и как нужно делать. Заключительное тестирование должно быть продумано, прежде чем проект вступит в фазу работы с кандидатом на выпуск.</p><subtitle>Автоматизация</subtitle><p>Если тестирование автоматизировано недостаточно, дело плохо. Возможность автоматизированного тестирования ключевых функций на окончательной сборке программы (и на новых сборках программы, если они будут созданы) имеет решающее значение для своевременной и полной проверки продукта. Нельзя тратить время на тестирование каждого кандидата на выпуск вручную.</p></section></section><section><title><p>Глава 15</p><p>Закрытие проекта</p></title><section><p>Наконец, проект завершён, программа отправлена заказчикам! Это все, не так ли? Ещё нет. Завершить работу над проектом — это больше, чем просто вынести его за дверь и уйти домой. В проект вложено много времени и сил, команде пришлось принести большие жертвы, теперь критически важно должным образом провести закрытие проекта, не забыв никого из участников. Если отказаться от этого этапа, можно упустить прекрасную возможность отблагодарить людей, выразить команде признательность за внесённый вклад и подготовить её к работе над следующим проектом.</p></section><section><title><p>Почему это так важно?</p></title><p>Закрытие проекта венчает работу команды. Оно также позволяет участникам осознать всю важность проекта, а также почувствовать, что их вклад и самопожертвование получили признание и были оценены по достоинству. Слишком часто упадок сил после завершения проекта ведёт к неразберихе и даже к депрессии. Люди должны быть уверены, что их усилия, сверхурочные часы и бессонные ночи не пропали зря. Они могут спросить себя: «Была ли моя работа замечена? Стоило ли так на напрягаться?» — или, что ещё важнее: «Буду ли я выкладываться в следующий раз?» Правильно проведённое закрытие проекта даёт ответ на эти вопросы. При правильно проведённом закрытии необходимо:</p><p>• известить всех об окончании проекта и о передаче программы заказчику;</p><p>• выделить индивидуальные достижения, вклад и преданность делу;</p><p>• отметить общие усилия и эффективность работы команды в целом;</p><p>• помочь участникам команды увидеть их ошибки и извлечь из них урок;</p><p>• решить текущие проблемы с кадрами или проектом;</p><p>• начать подготовку к следующему проекту.</p></section><section><title><p>Как это делается?</p></title><p>Провести закрытие проекта несложно, но для этого нужно решить множество задач.</p><subtitle>Передача программы</subtitle><p>Выпуск во внешний мир программного продукта его создателями должен быть общественным событием. Нельзя придумать более удачной церемонии закрытия проекта, чем передача прав собственности командой заказчику. Это событие должно происходить на глазах у всей команды. Оно представляет собой яркий и запоминающийся момент для каждого участника работы над проектом.</p><p>Например, если ПО передаётся производственной организации, можно устроить небольшую церемонию, во время которой менеджер проекта передаёт компакт-диски с ПО представителю этой организации. Если программа передаётся через сеть, то поводом для сбора всех участников команды может быть последнее нажатие клавиши ввода. Как бы это ни происходило, главное — собрать всю команду, чтобы каждый участник узнал о передаче проекта заказчику.</p><p>Конечно, событию должна предшествовать краткая речь. Всегда весело, когда люди вспоминают самые трудные задачи проекта и как команда решала их сообща. Забавно припомнить самые комичные эпизоды работы над проектом, поинтересовавшись, как же всё-таки удалось пережить их живым и невредимым!</p><p>А теперь рассмотрим противоположную ситуацию, когда закрытие не проводилось. Если участникам команды приходится спрашивать, отправили ли проект заказчику или они обнаруживают, что их не пригласили на передачу проекта, они ощущают себя вовсе не игроками одной команды, а скорее винтиками, которые сослужили свою службу в составе большой машины, но так и не стали её неотъемлемыми частями. Так быть не должно.</p><subtitle>Заключительное письмо</subtitle><p>Если команда многочисленна или её участники разбросаны по обширной территории, собрать всех вместе может быть сложно. В таких случаях обычно прибегают к рассылке по электронной почте писем, приуроченных к завершению проекта. Получив такое письмо, все смогут одновременно и в равной степени почувствовать, что проект закончен и команда выполнила поставленную перед ней задачу. Это письмо также может послужить катализатором празднования выхода нового выпуска.</p><subtitle>Празднование нового выпуска</subtitle><p>Один из самых замечательных моментов, наступающих после выхода программного продукта, — праздник по случаю нового выпуска. Чувство выполненного долга, после которого приходит праздник, — это что-то потрясающее. Чем дальше отстоят эти моменты во времени, тем меньшее впечатление от праздника. После выпуска ПО можно:</p><p>• открыть бутылку шампанского;</p><p>• подать всем мороженое прямо на рабочие места;</p><p>• пригласить команду на ужин в ресторан;</p><p>• устроить совместный поход в кино;</p><p>• собраться на пикник в доме одного из участников команды;</p><p>• отправиться в боулинг и т.п.</p><p>Какое бы мероприятие вы ни выбрали, главное, чтобы все смогли принять о нём участие: некоторые могут и не изъявить желания участвовать в турнире по пейнтболу или в катании на горных велосипедах.</p><subtitle>Общественное признание</subtitle><p>Общественное признание может стать мощным средством выражения благодарности группам и отдельным участникам за исключительные достижения. Общественное признание может быть как на уровне подразделения, так и на более высоком — группы или целой компании. Однако независимо от размера команды следует придерживаться некоторых основных правил.</p><p>• <emphasis>Должны быть отмечены лишь значительные достижения</emphasis></p><p>Награды заслуживают только усилия, выходящие за рамки должностных обязанностей.</p><p>• <emphasis>Необходимо отмечать отличную работу на любом поприще</emphasis></p><p>Следует поощрять отличившихся работников всех отделов, а не только какого-либо одного.</p><p>• <emphasis>Излагайте суть достижения коллективу</emphasis></p><p>Не следует предполагать, что все в курсе всех событий. Расскажите немного людям о возникших проблемах и о том, как действия группы или отдельного специалиста помогли справиться с ними.</p><p>• <emphasis>Благодарностъ должна быть материальной</emphasis></p><p>Памятный знак или премия сделают поощрение по-настоящему запоминающимся.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Практически каждый месяц в NuMega проводятся общие собрания компании. Сотрудники в полном составе заслушивают новости, поступающие из разных групп. В завершение собрания мы присуждаем награду «Спасителю компании». Ею отмечается беспримерный вклад работника, который помог решить критическую проблему, выйти из затруднительной ситуации или существенно увеличить прибыль. Эта церемония всегда сопровождается рассказом о действиях работника или группы, чтобы убедить всех в том, что награждаемый сыграл важную роль и награда получена заслуженно. Отличившиеся получают на память бейсболки с надписью «Я спас компанию», которые они с гордостью носят или держат в своём кабинете.</emphasis></p><empty-line/><subtitle>Личная благодарность</subtitle><p>Личная благодарность — очень эффективный способ продемонстрировать ценность вклада отдельного участника команды в реализацию проекта. Фактически искренняя личная благодарность часто значит для людей даже больше, чем любая форма общественного признания.</p><p>Личную благодарность обычно выражают на собраниях, где менеджер проекта или ведущий специалист открыто и искренне благодарит человека за сделанный вклад. Простая фраза вроде «я очень, рад, что в конце работы над проектом вы смогли протестировать программу на других платформах; если бы мы не обнаружили эту ошибку, продукт пришлось бы отозвать» может быть очень важной для того, кто, вложив дополнительные усилия, смог решить ключевую проблему. Это даёт работнику понять, что администрация в курсе его достижений и признательна ему.</p><p>К способам выражения личной признательности также можно отнести благодарственное письмо, присылаемое по электронной почте. Надеюсь, вы получали раньше неожиданные благодарственные послания, и ощущения, сопровождающие получение такого письма, вам знакомы.</p><subtitle>Премии, подарки и акции компании</subtitle><p>Ещё один способ выразить благодарность — наградить отличившегося. Ничто не может так подчеркнуть и подкрепить устную благодарность, как получение премии или подарка. Вручение подарка или премии говорит о том, что хорошая работа замечена, и, что ещё важнее, не осталась без награды. Часто, когда люди знают, что администрация видит, ценит и поощряет отличную работу, они стремятся работать ещё лучше.</p><p>Хотя денежные и материальные формы поощрения самые желательные, они не всегда доступны или возможны. Постарайтесь тогда придумать иные способы наградить отличившихся. Почётная грамота или прибавка к отпуску тоже могут быть выражением искренней благодарности.</p><subtitle>Памятные фотографии и «пасхальные яйца»</subtitle><p>Как было сказано в начале книги, реализованный проект является результатом усилий всей команды. Что может подчеркнуть это лучше, чем групповая фотография после выхода нового выпуска? Подарите такую фотографию каждому участнику команды, а ещё одну повесьте в рамке на видном месте, лучше всего на стене, посвящённой достижениям компании. Эти фотографии свидетельствуют, что в компании всегда видели и ценили командную работу. Пройдёт время, и будет здорово вспомнить, с кем вы работали над разными выпусками, взглянув на эти фотографии.</p><p>Кроме того, во многих коллективах любят помещать в программы так называемое «пасхальные яйца» — это скрытые окна, которые можно вызвать определённой комбинацией нажатий клавиш, команд меню и щелчков, содержащие список всех создателей программы, а иногда и их фотографию. Они похожи на заключительные титры кинофильма.</p><empty-line/><p><strong><emphasis>Из собственного опыта</emphasis></strong></p><p><emphasis>Группа специалиста NuMega, работавших над программой BoundsChecker, поместила в программу «пасхальное яйцо». Те, у кого есть эта программа, могут увидеть его. Для этого нужно вызвать диалоговое окно «О программе» командой меню Help/About, навести указатель на клетчатый значок продукта, затем при нажатой клавише Shift трижды щёлкнуть правой кнопкой.</emphasis></p><empty-line/></section><section><title><p>Что дальше?</p></title><p>Когда все благодарности розданы, пора переключаться на подготовку к следующему проекту. Хотя этот период очень важен, часто о нём забывают. Это самое подходящее время для извлечения уроков из прошлых ошибок и подготовки к решению грядущих задач.</p><subtitle>Учимся на ошибках прошлого</subtitle><p>Чтобы встретить будущее во всеоружии, следует разобраться в ошибках прошлого. Что удалось? Что нет? Чем больше всего будет отличаться работа над следующим проектом? Определите, в каких продуктах, процессах, технологиях или оборудовании ощущалась острая нехватка на протяжении последних месяцев и проследите, чтобы все это теперь было в наличии.</p><p>Классический способ анализа законченного проекта — это обсуждение его на итоговых собраниях. Как правило, такое собрание проводится с участием всей команды вскоре после выхода нового выпуска. Оно служит для обмена мнениями о том, что удалось, а что нет, а также для «мозгового штурма» проблем. Цель такого собраний не в том, чтобы кого-то обвинить или отыскать личные просчёты, а в том, чтобы сообща извлечь уроки из прошлых ошибок и наметить, что нужно сделать во время следующего проекта. Эти собрания идеально подходят для подготовки почвы для грядущих изменений.</p><subtitle>Усиление инфраструктуры</subtitle><p>Первые дни и недели после выпуска ПО также очень удобны для расширения инфраструктуры — организации новых рабочих процедур, повышения автоматизации, пополнения оборудования и инструментария. Как известно, вносить существенные изменения в эти сферы во время работы над проектом очень трудно. Рассмотрим их поочерёдно.</p><p>• <emphasis>Рабочие процедуры</emphasis></p><p>Как следует изучите все рабочие процедуры: создание ежедневных сборок ПО, базисные тесты, формулирование требований, планирование, оценку практичности и набор антикризисных мер. Как налажен обмен информацией с командой? Адекватны ли планы и методики задачам проекта? Нуждаются ли эти сферы в улучшении?</p><p>• <emphasis>Автоматизация</emphasis></p><p>Часто команды находят степень автоматизации разработки и испытаний программы недостаточной для решения поставленных перед ними задач. Время до начала следующего проекта идеально подходит для повышения автоматизации и навёрстывания упущенного в этой области.</p><p>• <emphasis>Оборудование</emphasis></p><p>Следует использовать полученную возможность для приобретения оборудования, которое потребуется для работы над следующими проектами.</p><p>• <emphasis>Инструментарий</emphasis></p><p>Замена инструментов для управления исходным кодом и отслеживания ошибок во время работы над выпуском, как правило, является ошибкой и всегда требует больше времени (см. главу 5). Но когда проект завершён, можно уделить часть времени оценке новых версий полезных программ и обновлению имеющегося инструментария.</p><subtitle>Работа с кадрами</subtitle><p>Вложения в кадры не менее важны, чем в инфраструктуру. Как это сделать конкретно?</p><p>• <emphasis>Анализ эффективности работы</emphasis></p><p>По окончании проекта следует проанализировать эффективность работы его участников, Хотя в большинстве компаний такое мероприятие проводится лишь в день приёма сотрудника на работу, индивидуальный анализ работы каждого члена команды по окончании каждого проекта позволяет держать в памяти свежие данные о его эффективности и устранить ряд проблем прежде, чем начнётся работа над следующим проектом.</p><p>• <emphasis>Взаимное обучение</emphasis></p><p>Следует подумать об обмене обязанностями между участниками команды. Очень важно, чтобы при работе над разными фрагментами ПО они обучали друг друга. Плохо, когда разработка какого-либо фрагмента программы полностью зависит от единственного специалиста. Взаимное обучение придаёт большую гибкость планам и позволяет каждому члену команды получить более чёткое представление о многочисленных аспектах проекта.</p><p>• <emphasis>Повышение квалификации</emphasis></p><p>Это прекрасное время для повышения квалификации сотрудников. Когда работа над проектом позади, участники команды смогут сосредоточиться на изучении новых технологий или новшеств в уже известных им методиках, появившихся во время работы над последним проектом.</p><p>• <emphasis>Отпуска</emphasis></p><p>В любом случае у каждого участника команды должен быть отпуск. Промежуток между проектами лучше всего посвятить семье и личным интересам. Люди стремятся трудиться интенсивнее и много работают сверхурочно, если знают, что смогут хорошенько отдохнуть после завершения проекта.</p><p>Те, кто особенно интенсивно работал в течение долгого времени, заслуживают дополнительных выходных. Следует беречь силы тех, кто вносит ключевой вклад во внутренний цикл реализации проекта и давать им дополнительное время для отдыха. Ваша задача — не допуская чрезмерного расслабления, помочь людям восстановить свои силы, чтобы спустя некоторое время они вновь смогли работать с максимальной самоотдачей.</p><p>В первоначальный период работы любой компании, когда особенно часто приходится работать сверхурочно, потребность в увеличении времени отдыха после интенсивной работы ощущается особенно остро. В NuMega мы смогли взять месяц оплачиваемого отпуска лишь после пяти лет работы. Все были рады наконец получить компенсацию за все наши сверхурочные. К счастью, все больше компаний признают необходимость увеличенного периода отдыха и осознают то благо, которое он может со временем принести как работнику, так и компании.</p></section><section><title><p>Общие проблемы и решения</p></title><p>Далее обсуждается ряд типичных проблем и вопросов, возникающих при использовании описываемых здесь методик, а также их решения.</p><subtitle>Чувство опустошённости</subtitle><p>Когда проект завершён, у некоторых появляется ощущение опустошённости и разочарования. Возникает чувство, что их вклад и усилия — всё впустую. Поэтому они вновь и вновь берутся за работу, но без особых шансов решить реальные проблемы в масштабах всего проекта или повысить свой личный уровень. Чтобы избежать этой проблемы, следует правильно проводить закрытие проекта, отмечать людей, внёсших основной вклад, проводить итоговые собрания и анализировать эффективность работы участников, которые должны меняться обязанностями и получать достаточно времени для отдыха.</p><subtitle>Истощение сил</subtitle><p>Истощение сил — самая серьёзная причина возникновения ощущения опустошённости. У «перегоревших» на работе нет ни сил, ни интереса для участия в проекте или даже для выполнения своих профессиональных обязанностей. Истощение развивается со временем и становится настоящей бедой после того, как оно нанесёт свой удар. Основная цель этой главы — обсудить действия, необходимые для предотвращения истощения сил, а не для борьбы с ним после того, как оно проявилось.</p><subtitle>Нужно довести проект до конца</subtitle><p>Вероятно, многие изложенные в этой главе идеи не новы, но уж слишком часто люди относятся к ним очень легкомысленно. Следует составить конкретный план, чтобы все действия по закрытию были обязательно проведены в полном объёме. Не следует приступать к работе над следующим проектом, не завершив текущий.</p></section></section></section><section><title><p>Об авторе</p></title><p>Ветеран индустрии программных средств Эд Салливан отдал ей 18 лет. Он получил степень бакалавра информатики с отличием в колледже Мерримака. Позже в Бостонском университете он стал магистром этой дисциплины.</p><p>Эд 11 лет трудился и отделении корпорации DEC по разработке ПО, расположенном в Нашуа (штат Нью-Гемпшир). На самых разных технических и руководящих должностях он занимался разработкой инструментальных средств для проверки ОС VAX/VMS. В конце концов он перешёл в консалтинговый отдел DEC, где возглавил разработку и развёртывание ряда специализированных программных продуктов для системы работы с клиентами на основе портативных компьютеров общей стоимостью более 6 млн. долларов.</p><p>С 1994 г. Эд в небольшой молодой компании NuMega Technologies, Inc., где сначала совмещал должности менеджера по разработке и менеджера по маркетингу BoundsChecker C/C++, продукта для поиска ошибок в программах. Как менеджер по разработке, Эд полностью курировал создание четырёх выпусков продукта в критический период истории NuMega. Будучи первым менеджером по маркетингу, он сыграл значительную роль в определении стратегии, позиционировании продукта, его популяризации, рекламы и продвижении на рынке.</p><p>Позднее, как начальник отдела разработки NuMega, он направил компанию на развивающийся рынок средств разработки на Visual Basic и Java, а также создания ПО для Web. Он одновременно управлял стратегией и реализацией восьми различных продуктов занимающих четыре уникальных сегмента рынка. В период его пребывания на должности директора и менеджера по разработке, программные продукты компании NuMega завоевали множество отраслевых премий, включая призы за техническое совершенство и «Выбор редакции» журнала PC Magazine, шесть призов Jolt Cola, и несколько раз были отмечены различными изданиями «Выбором читателя».</p><p>В 1999 г. NuMega Technologies вошла в состав корпорации Compuware. В настоящее время Эд — директор центра разработки NuMega, ставшей одной из лабораторий Compuware. Он возглавляет коллектив из 100 сотрудников и курирует разработку продуктов, дающих ежегодный оборот на сумму более чем 40 млн. долларов.</p></section><myfooter><empty-line/><p>Спасибо, что скачали книгу в <a l:href="http://royallib.ru">бесплатной электронной библиотеке Royallib.ru</a></p><p><a l:href="http://royallib.ru/comment/sallivan_ed/vremya__dengi_sozdanie_komandi_razrabotchikov_programmnogo_obespecheniya.html">Оставить отзыв о книге</a></p><p><a l:href="http://royallib.ru/author/sallivan_ed.html">Все книги автора</a></p></myfooter></body><body name="notes"><title><p>Примечания</p></title><section id="note1"><title><p>1</p></title><p>Популярное в США телешоу «Three Stooges» с участием трёх комиков. — прим.ред.</p></section></body><binary content-type="image/jpeg" id="cover.jpg"></binary><binary content-type="image/jpeg" id="pic1.jpg"></binary><binary content-type="image/jpeg" id="pic31.jpg">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</binary><binary content-type="image/jpeg" id="pic32.jpg"></binary><binary content-type="image/jpeg" id="pic33.jpg">/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/wAALCABOAO4BAREA/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/9oACAEBAAA/APqnNGaKKM0UZozRXN+PtS1PS9AkudChhn1BWHlwzZxJgElRg9SBge9cfa/E1W1u4luINmhf2bb3kLbCJi0swi+bJwFBP5DJq9c/FLTrW8kgudPvozGu58qCVHkySngHriJh+I7Vfn8fWcVja3X2Scx3EyQrkrkb5ERW6/dPmA59jWTa/F3RLifUYzFOv2CJ5pGGGDqi5byz0fr27c9K0IPiNZPr9ppTWN4slyyKrkLt+dpFVuDkqfLJyOxB9ay5Pi9pyKSdOvD8xUAMnUNOvr/07v8AmKu/8LT0Y/Y8W96PtjtFDuj2/Mrqh3ZPyjLDBPXt2pn/AAtCya51a3WwuVn02B7maKRlRiiwpKdvOCQJACAeCPQitPRvHlnqHiC10j7NLHc3ETTKdysoARHwcHg7ZF4PPX2J7QHIozRRRmjNGaM0ZoorF13XIdJmt0mViJEllZh/CkaFmPueBxWZdeNLa3E261uW8kSM+NvRNhOOeeJFP406HxpaXCt9ntruZkk8mQIi/u23Bfm56fNnPoDUNr470+cQARz+bcRCWKMBSWyobbnOAcEdTWlD4hWWC/lFncqtmQJAQuSSivwM+jCq1p4y065hnlUyBIY45GYgEYdyi4IOPvKfpTJPGVrDfC1uLe4jkJVQcKQWbbgZBx/F+hpE8a2ckUkkNvcyLFL5EmFA2Sb0XaeeuZAeOCAaig8d2E3k/uLtFmYRo5VcFyqMF4PHEg698io5/G2l/aUgvra4ilRwdssYygMe9ZOvAPK59Qw7Gm3HiHS0lkWbSZA5jCOGiTJXbK+089MQtx7ik/4SHQkM0h04I1uAzMIUJVAkfzDHoJgMDnGamF5oT6ck39lReVO6QxI0KATfIZFxk4xgnGcc5pq6tokMc7xaWpEMMsh2QJnbH8jgfTIHuDxxVJ9W8PaZq1xqJ04x3MNuke+MKQIgZSAqg4GNr9B35qHUdR8N3L2f2vRzm3uBLGVRVAcSSwjIB+bnfxz971rY0zWdJ1q3LJp5eOSDzpRJEvHyo4RhnrhxjtwfSnreaRMI5F0yJzOHKfu4yz/J8w9eQuPypIta05JpJINOIeIEvIsagoBwPfHy4rQn177OrCW0mVkTzCNynjOM8H1qCLxRFJtdbScxM6x7/l+8xHGM570weLIDBHL9nk2sATgjgFWb+SnipT4kRZpYvszmSHHmDeMAkgDB79RzSX3ieGzt0llhmO4zjCkHHlIztznnIXiq8HjK1luUgFtdK8jOke4Lh2VsMM547dcZzTJ/G1nCsMjQzmCVFlEvygIjGMAsM5H+tX9aSLxtbS/bgtpciSyZUnjO0MhYgDjPI56/X0qR/F9uJGCxSYiuIYJgccebI0S4wSDh159q6sdKKr3NnDctG00as0ZLISOhIIP6Ej8ahfSrN1Cva25AUqAYxjBxkfjgflRDpVnDKZYraBJChQusYB25zjPpzUR0LTTEYjYWflnHy+SuOMY4x2wPyFWVsbdVlCwxASnc/wAo+Y4xk+vAA/Co49Kso45Y0tLdY5QVkURqA4PUEY56n86RNJskzttbcAgLxEBxgDH5ACkbSLFpGkazti7AKWMQyQDkDPoDzUEXh7ToxdL9lhdLlw8iOgZSQqqAAeAMIvHtU76PYyZ8yztmyCvMYPBBBH5Ej8TSf2NYbQBZ22AAoHlDoAQB+RI/E1Kmm2iZKW0AJbdkRjrgDP1wB+QqMaRYi0NqLO1+zFt5i8pdhbOc4xjOeakbT7Y78wRfP975Bz25qna6Tp00KMLG3AUFFzGDgAkf1P5mrB0ewLBvsdvkHIPljjkt/Mk/UmnQaVZW7M0Fpbxs0YiJSMAlBwFPsPSnJptpHKsiW0CyL0YIMij+zbTfv+zw7+fm2DPPX86VdOtViEa28IQLsxsGMdcUq2Fqrbhbw7uOdg7dKBY2wPEEP/fApwsoASRDHyMH5RyPSo5tNtZkVJbeFkTIVSgwARg4+oyD9agsdEsrKOZIYU2yytM+4bvmY5PXtnoO1R3Ph7T51QNAihWLfINu7JBIPqCQMjvU7aPYs7s1pblnOWJjGW5B59eQD9RR/ZNmJFdbaFWD+Z8qAZYZIJ9Tkk/U5rQAwKKKKKKKKKKKKKKKDVXTgBbAD+83/oRq1RRRRRRRRRRRRRRRmjNFFFBOBmqq6hbsuVkyPUAn+lL9thzjLdM/cb/ClF5Cehb/AL4b/Cg3kIHJb/vhv8KBewkZBb/vhv8ACj7XD6t/3w3+FH2yHOMtn/cb/Cka8h9W/wC+G/wqCzuUSHDB87mP3G7k+1TfboR94sPqjf4U4XkJ6Fv++G/wo+1xerf98N/hQb2EdS3/AHw3+FNN/B6v/wB+2/wp32yH1b/vhv8ACkF7CRkF/wDvhv8ACmjUIDKkYLB3OFDIwycZxkj2q3RRRRRRSZopRRRTJDhGJ6VT0NSukWgIIPljg1fwKTI9aWiiiiijFFGRRRgelFFZ2qKWutOwM4nLH2Gxv8a0aKKKKKK5Px54gu9A/sMWUUcp1DUEsmDgkqGRzuABHOVHFZXhL4j2ur2MC3NvINQAH2lIBuSEnzMbien+rIPYEgZqdfiTpxuYYfsN+DNdPZIxRcGZVVtnXjIbj/dNVF+LWjNBFKLW+2yxxyL8i9HSVx/F6Qv+lUtS+MOlpa+fY207qN3Mi4DYthccYyT8pA9OvbmtSX4m6RBdNbTW96GCK27auCTAZwv3uuwH2z3p8/xL0e20VdTaC7NoZprfcqrkPEJNwxnv5TY9cimL8T9Gd4I2iu4pJblbXayrlXYxgZwen71OR6+tUdF+JtvNORqQKGdPNtoYoWDBAJiSzE4ziB+wrVi+IdpPMiW2l6lMpFs7MkanZHOWEcjDdkL8uT3AI4rMT4w6C6oRbX+51Rwuxc4ZJHBPzYHETfpXW+DvE9j4s0oajpm/7OW2/PgMDgZBHYjOOf5YrdooopH+6a8suviNdWOv3sF9Bbpp1pqsmnyTZYEItsJg3U5b7w2gc10Uvj/T4bCG7a1vPJlkjRCUA3CRolVhk8rmZeR6GqM3xS0qCOVprK/RoZJ4ZUKLujkhjkkZTz12x5GP7y+tVrz4vaFarcGW2vx5IfICKSdiQucc+k6/kat+HfH8WseILnS4LaRpIluWQA8sYZAjA54BORjnvzirsfji1kljQ2V2rMrv/CQFRtrHr2P6VKvjGNxZtHYTul2CYWDphgFLHvxgDpVS3+IFpcRq0NjdMXEe3JUZ3hiOp/2DzU//AAsDSTai5RLhocN8wUdVTeRjOeh+lLH4902SREWG43uQAMKOd+zHX1p0HjzTZp4Ykgut83llAVHIcEg9eOhrU8O+IbbXomks0kEa4BL4HJ7YzWzVS90+1vvL+2W8U/lNvTzFDbW6ZGeh561Tm8PaVLs3adZ/IvlqRCoKpnO0cdM9qYnhzTl1Jb1bcJMCXIUkIzkYLlehbHG7risXUoNBh1caVNpFo5EcJXEKjlmcRqOMcbX78Z96z5dY0HyHmTQg6AICfJjyQ6FFGM91Tb9AB0qCHUPDkJvtVtdJlu47qMtPJ5asmI42UphjheI9uBwfl9as3t74c1G2utKbTVYSqyNDDCqsyt8rFSOh5POc9av2o0eHRJLsaKnkacZIxvijZx5ZwxB5zynrnIBq5ol1o+uSXUMFnETEFkk3RLhtxcA988q/5+9bsdjbxzSTJBEssihHdVALKOgJ9Bk1TXw9pKjC6bZheOBCvYEDt6MR+J9at6fp1pp4kFlaw24kIL+UgXcQMAnHsAPwq3RRRSMMjFZw0TTluHuFsbXz3Yu0nlLuLEYLE4644z6VB/wjWkiN41020WJwAUWJQuAdw49jz9abbeGtMgs/s7WyzoCzbrn96xLLtJLNknK8fTiub+1+HUk1GSTRrctGZkkxCpLxxMqOTnA6447hR7U4+ItF01o7ttLNuGM6+csSZUCYJJnBzguQT64zU83iDSrYxMdKcQo4MU3lIFyxIypz+P406117R5iyWmn72iZ9yJEo8v72Sc44OxufpTNauNHXStO1G90547UyRyJtCjaf4d2CBjBPXjmtnSItK1i1N5DYwlWLwkvEATsYoR9Mr+VXTommnGdPtTt4H7peP0pkGg6ZAmyOwtgud2PLB5yT/U1atLG1s8/ZbeKEHAPloFzjp0q1WVresw6QkJmimlMpYKsSgn5UZz1I7Kazv+Ey0w2y3Cmd7dgCsqxna3JBx9CpyOvT1o1PxlYaZLNHdRXIaIkEKgOSIzJgc8kqp/GoNQ13Rlv917bSfaBHGDujB+Vm+Xv68+1Z9x4m8NqnmT6c+HjWT5oEJICSso69cRuAPUgd6s2WseHZHuraKxEYleOO4UwLhvMwELY6g5A5/lTJdT8PwTQRLpJMpncRhLdM+YkhjyOeu5jg+5qZPEuhf2fGsNrI1rdOBsWEAM77CQR6/vAT+NNg8R6JpjStHYyWhIlyVgVd/lMQ4GD2J/8AHuO9WJPHGnJNcw+TePcW4laSJYfmCxhWLAZ5BDgj159KcvjfSWWV1aUxIsrCTaAsnl7M7STznzFx61qaNrEWp3F1FGrK0Ajb5h1V13Kf5jHtWrRRRSMdozXNt4x09GmWWO5jaEsJAY8lQpAZjgngZGT70t54utLRN01td7PLaYMEXBRSoLfe6fOtVx470vy5JXjukgRirStHwvzSKD1zgmJsfh61Wm8Q6DDfywzWcol80s5aIEB8HPOepEfb1HrUD+IfDaRu/wDZzFYGfLLAvBPmO2OfWFz9cVa0/VPD19Ctha6eHgjm2LCLYFF/28DjbzjdTbnVPD9ndmI6WfOjd7UFLdDjJj3Ac9CZU+vNJd+IdAk0kC4snktYN0bQGBT5bKrHyyp4Bwje3TnmrkfiXTLCdrJbWe3COUwIwEDlQ/Y9w2c/XvSp420157eER3Xm3IiaFfK5kWTOCOegIwfQkeopLTxxpdyEKeeoJiVi8e3y2ff8rZPBHlsD6Yq1pfiS21LUbe3hVwtxFNLEzY+YRSCN+nuwI9Qa36z9S0q31Ga0kuQW+zSGRF/hJKMhyO4wxqu3h3Sizn+z7TLuXY+UOWI5P40n/CPaWwIextmyu07kByNpTH/fJI+lSTaFp0soklsrZ5AMBmjBIHp9M1GfDelNtzYWxKrsGYxwuGGPyZh/wI1PBo1hbuHgtLdHDbsrGM5wBn9B+VVrvw3ptw8Mht0R4ZfODIACW3bzk9wW5PvVmXRrCTh7S3blTzGOqkEfltX8h6VXi8OacsUiS26Th5XmJmUMdzklscdPmPHoaeNB04TeaLK280gjfsGcHtn8KYfDmk+X5f8AZ1psxjb5Qxg47f8AAV/75HpV7T7C3sTMbeNU8wgtj2AUD6AACrlFFFIwyMVmNoemvKsr2Vs0odpAxjBIZvvHPvgfkKj/AOEe0sQrCNPtRCqFAgjGApIYjHoSoP4Ckt/D2nw3dzPHbx5nUK6FQV4LnIHqTI+fXNOm0DTJgRLYWrhhtO6MHIGcf+hH8zSP4d0llZG0+1KucsPLHJ+Yc/g7/wDfR9akj0LTYrlJ47G2WZCWVxGMqxxkg/8AAV/IVDqHhvTb0HzLaNZGkEhkRQGJ3Ix599i59cVYn0ewnRkmtLd0dNjBowcrzwfzP5n1qD+wLAzXsssCTG6dZHEgBAKqqjHpwi/iKcdA03MbfYbbdHjYfLHyYxjHp0H5CkHh7S8sfsFrljuP7scn5uf/AB5vzPrU1jpFlZTpLa20URRGjQIuAqs25gB2ycE/StKv/9k=</binary><binary content-type="image/jpeg" id="pic51.jpg">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</binary><binary content-type="image/jpeg" id="pic52.jpg">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</binary><binary content-type="image/jpeg" id="pic61.jpg">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</binary><binary content-type="image/jpeg" id="pic81.jpg">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</binary><binary content-type="image/jpeg" id="pic82.jpg">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</binary><binary content-type="image/jpeg" id="pic111.jpg">/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/wAALCABhAO4BAREA/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/9oACAEBAAA/APobV9SvdPvdoEEkGwy7MEMVDKCM5xn5jSS+Jo1Nwi2k7SW4JmAx8nX356dqLTxA37+O5hJuIQHkVOiqcYxzz1oh8U20h/1MoPmiLBx1LbfXnmnjxNbFgPKl2kqMnHBLlfX1FSab4ht769jtkhlR5E8wbsdMfWtG7v4bWSOObeHkztARmz+Qpn9pwBclZ/8Avy/+FLHqdu/TzR/vRMP6Up1GADP70/SJv8KadThGPln5/wCmL/4VJ/aEGR/rP+/bf4Uw6nADjbOfpCx/pSx6hC5PEqjtuiYfzFKdQgUnJkAHfy2x/KrEMySqHjZWQ9CDmpM0UUUUUUUUUUUUVTv9Pt76F47iMMGXaTjnH+QKRNNs1IYW0O4Z52Dv1pw0+0GMW8XByPkHB/yBTH0qxcqWtICyncD5YyD607+zrP5f9Gh+Xp8g45z6epNOgsbW3YGC3ijI4GxAMVYxS4pMUYoxS4pMUACgqD1rOmsHjkM1hIIZScsmMo/1Hr7ipLfUFaQQ3CmG4/uN391PcVdBz3paKKKKKKKKKKKKKKKKKKKKKKKKKKKhubaG5jKTRq6+hqmsdzZP8jG4t/7rH51+h7/jVq2u4bkN5TZKnDKeCp9CO1WBRRRRRRRRRRRRRRRRRRRRRRRRRRRRVK9sVmIkiZoZx0kTg/Q+oqFL2W1fy79FCn7syfcP1/u1oqwZQVIIPcU6iiiiiiiisS58R2Ntq76ZcSNHdLatefMuFManDEHoSPSptI17T9T0q1v4LhVguohPH5p2MUIznB5HHNXFvrRlDLdQFTnBDjnBwfyPFLb3trcki3uIZSAGOxwcA9Dx64NMGo2RDYu7c7QSf3g4AOCfz4pV1GyZiq3duWGcgSDPGM/lkfmKR9SskUM95bqCu4EyAZGCc/kD+VSG8tlkVDcRB2XeFLjJX1+lMXUbJm2rd25bG7AkGcev6H8qadTsAwU3ttuOOPMGeckfyP5GkGq6eV3C+tivHPmr3GR37gg/jT7e8jnup4IzuaHG/A4BIyBn1x/MVaooooooprqrqVYAgjGDWebKS1JewcKnUwt90/T0qDSfENnqWoXVjEWS7tseYjDH5HvWzRRRRRRRXDeKLHRrzV1utT1JbeS0ZMLnbtOxyVY91ZSSR6LWdYaFo8Ol21rBraOkLom5tv3hH5RB9Mqeh4zz3wX6dZaZp2oO661byPuZxG8avt+b5tp6rkOoOPUHBq1oGm6fpQF/FrDPbW6xwS8bVYqGQBvxY/QisxNG0aK9Lp4hRLsSsBuVSAxllJUqeMfPIuD3HrVmXS9GivJLmXWkVomlnYKFAT5oWJOOw2Jn2btxSXmn6Pc2JtjrkS2sPngAKu5N6PvB57ZYgYHA/GrFzY6TdT2MU2ueZcRv5kB3qWO/MiL7rtQkDqQDzjrUGh6HMbjULbWgE2K5ZVDIokMu0+mCZWwPYYrUh8CxpPFLHeyDZtIBQdjMcf8AkZvyFVo/h1FHbpH/AGhOxQqwbYoLEIi/N6giMcdPyrr9EspLO1In2m4ldpZSvQuev4AYH0FaNFFFFFFQXVytuoLrIwP9xC38qzdT8Q2mnWT3NzHdCJSAcQNnk49KvWE1veQR3dumFkGVZk2t+vNY2s+KoNKn1WOa3mf+zraK6kK4+ZZGZQBz1yjVqS6vZQXPkTTok2M7W4OMgfzZR+NRL4h0psFb2FgSFBBzklN4/wDHQW+lQnxTooGTqNuBgH73YqGz/wB8kH6HNWJdd02J9sl5CGyBjdknLBR+pA+pph8RaT5fmfboDHtD5D/w8c/+PL+Ypr+JNJQsGvYQVJU5OOQ4Qj67iB9auQaja3MssdvMkrxY3qhyVz0z9cH8qwPEXhKPV1v3WeWOe4Hy5wUDCJ4xx1xhyfypf+ENsJfPN0ru9yiLdYbAm24IyOwBFRr4KtRNYTtdXjXVipWGYuu5QSvXCgHhAvPUZ71of8I9bnRZtNEkwhllaZmyN2Wk8wjp0yfyrMHguCS81D7XIZ7C7VS0LnBL+bJKefTL8Y9Kkv8AwhFJb3xtppFu7m1ltvMkww+dEXcQPQRr+tP/AOEPtG1AX8kswvCVdmUgrvVCgYAj+6cfgKrxeAtLiikhj89YJHSTZvHylCSuDjIxnHHYY6U//hBdPECxJNdKirGnyuBwgIUdOnJ4rrlGBS0UUUUUUUUGo5VjZCJApXqd3Ss+x1m1vNSuLK28xpIAC77DsOfRuhqjrHhi21SbU3nlmU6hbxW0u0gYSNmYY465dqLzw2t5ci4ubu5eVVKBgVAK+Yr4IA5HygY9PrVe28GWNssaxS3AEbKy5YEjbCYQOn91ifrVWLwPb209sttM/wBkVWSZH5ZwYRF1x1xySauy+ENPbYE81ER96KGyFzIkhAyOhZFqsngXTwhTzrrATy0JcHap2ZA46fuxx25qSbwVYTS+Y0twW3s45GFLTCUkDH94fln1rU0TRItJieOCWV0J+VZCDsXJIUHAyBk9cn3rZoopKKKKKKKKKKKKKKKKq3l5FbLltzOfuogyzfQVWiguLs774BYycrADxj/aPetBI1QAKqj6Cn0UUUUUUUtFFJRRRRRRRRRRRRRSMQoJJAA61nyXklyfLsU3A9ZmHyD6epqW0sEgcyMzSzt96Rup9vYVcoooooooooqrcaha293bW086JcXO4QxscF9oycD2FSfa4SMiRSPY5oa7gVyrSoGHUE4xSieIkAOpJ7ZpXmjRtrMA3XFM+2W+MmZAPc4pRdQEZEqH1welIbuAdZUH40ouoD/y1T86PtMOM+amMZzntSNdwL96RR9TTZL62jheV54xGiF2bPRR1P0qaKRZY1dM7WAIyMdafRRVW8vI7Zfm3M5+7GoyzfQVXjtp7xxJfYWMHKwKeP8AgR7/AE6VoqoUAAYA4ApaKKKKKKKKKK5LxB4ek1S7FyLxIr2GaGWzkKk+TsOWGMjO7JB9jXP3PhyOK4Nm2phZ7uMoBHbM2FMkz5yDhf8AW4ySPue/GrqHhqW7yZtQgjk8mOHeI/m+SVHDcnrhMfjn2q1p3hlbVNMIuFZrKeWUuF5cPvO05Pbf19vek8R+HP7VuZphqTWzuFKkDJjKq445HyndyO+Kzbrwk91dz72t4I2hTzDFGFjklEhbeEySpALrknnd7UkXgxo7kldRh8thtliZCQ675G5ww5HmcHttzVmLwsq2tpBPeWkssE+4ymHa8yiNkVZPm+Zvm5PfA4rOs/A3kyRkasjhPJwpGQSkkbc89/LPHqx64qzZeCEtrremoL5YACQ7MqqBnJjwTyg8w4+gqe18FNHp8tub2G4BeJobiWHdKFWQOVZ93zDjA6YB70ll4Pmsbwf6SslvO22ZAu0LH5ry7QM9MsFx3Gc13SjAozzihmCjJrNN7NeMyaeBsHBnb7oPsO9WLSySBzIWLzMPmdup/wAB7VbAwOKKKKKKKKKKKKK4nUPCsmq6zqd04it9/ltby7Q5JETIcj0yw474pp8CbrO4ga/mxM2/egw8Z8x3BQ544fafXFWp/B4luFmaaIuZFkkHkja22Jo8AZ4zuyaSDwpc2+iT2cOoYuJLlLkSGPKAqEG3bnlTtPGe9LqfhJryBI1nijVLF7PasOB8zo2QAeANmAPeqWk+DX8+O9nKW9xHcXDeWqhllR5JCA/POFfj0NWbTwUltcwypcArEsKqrR5DbBIG3c87vMP5CoJfAaM1vsulAgFuFJiBYGJ2YnOeCQ5X2FMsvATW1pJbi+UK7wNlIsEeXLJJwc9T5mM+2alu/A5na3kW+aK5hVFWaOPBO1Sh7/xKzA/8B9BXT+H9P/snRLHTy4f7LCkW4DGdoxmtDAoNV5LWOSQuwbJ9HI/rTGsIHDK6llbqGYkfzqyihQAowB0HpTqKKKKKKKKKKKKKQdqcKKSigdKKKKKKKKKKKKKKKKKKKKKKKKK//9k=</binary><binary content-type="image/jpeg" id="pic112.jpg"></binary><binary content-type="image/jpeg" id="pic121.jpg">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</binary></FictionBook>
